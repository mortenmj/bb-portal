// Code generated by ent, DO NOT EDIT.

package networkmetrics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the networkmetrics type in the database.
	Label = "network_metrics"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeMetrics holds the string denoting the metrics edge name in mutations.
	EdgeMetrics = "metrics"
	// EdgeSystemNetworkStats holds the string denoting the system_network_stats edge name in mutations.
	EdgeSystemNetworkStats = "system_network_stats"
	// Table holds the table name of the networkmetrics in the database.
	Table = "network_metrics"
	// MetricsTable is the table that holds the metrics relation/edge. The primary key declared below.
	MetricsTable = "metrics_network_metrics"
	// MetricsInverseTable is the table name for the Metrics entity.
	// It exists in this package in order to avoid circular dependency with the "metrics" package.
	MetricsInverseTable = "metrics"
	// SystemNetworkStatsTable is the table that holds the system_network_stats relation/edge.
	SystemNetworkStatsTable = "system_network_stats"
	// SystemNetworkStatsInverseTable is the table name for the SystemNetworkStats entity.
	// It exists in this package in order to avoid circular dependency with the "systemnetworkstats" package.
	SystemNetworkStatsInverseTable = "system_network_stats"
	// SystemNetworkStatsColumn is the table column denoting the system_network_stats relation/edge.
	SystemNetworkStatsColumn = "network_metrics_system_network_stats"
)

// Columns holds all SQL columns for networkmetrics fields.
var Columns = []string{
	FieldID,
}

var (
	// MetricsPrimaryKey and MetricsColumn2 are the table columns denoting the
	// primary key for the metrics relation (M2M).
	MetricsPrimaryKey = []string{"metrics_id", "network_metrics_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the NetworkMetrics queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMetricsCount orders the results by metrics count.
func ByMetricsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetricsStep(), opts...)
	}
}

// ByMetrics orders the results by metrics terms.
func ByMetrics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetricsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySystemNetworkStatsCount orders the results by system_network_stats count.
func BySystemNetworkStatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSystemNetworkStatsStep(), opts...)
	}
}

// BySystemNetworkStats orders the results by system_network_stats terms.
func BySystemNetworkStats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSystemNetworkStatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMetricsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetricsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MetricsTable, MetricsPrimaryKey...),
	)
}
func newSystemNetworkStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SystemNetworkStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SystemNetworkStatsTable, SystemNetworkStatsColumn),
	)
}
