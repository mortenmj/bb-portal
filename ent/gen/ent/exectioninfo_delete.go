// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/exectioninfo"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ExectionInfoDelete is the builder for deleting a ExectionInfo entity.
type ExectionInfoDelete struct {
	config
	hooks    []Hook
	mutation *ExectionInfoMutation
}

// Where appends a list predicates to the ExectionInfoDelete builder.
func (eid *ExectionInfoDelete) Where(ps ...predicate.ExectionInfo) *ExectionInfoDelete {
	eid.mutation.Where(ps...)
	return eid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (eid *ExectionInfoDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, eid.sqlExec, eid.mutation, eid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (eid *ExectionInfoDelete) ExecX(ctx context.Context) int {
	n, err := eid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (eid *ExectionInfoDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(exectioninfo.Table, sqlgraph.NewFieldSpec(exectioninfo.FieldID, field.TypeInt))
	if ps := eid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, eid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	eid.mutation.done = true
	return affected, err
}

// ExectionInfoDeleteOne is the builder for deleting a single ExectionInfo entity.
type ExectionInfoDeleteOne struct {
	eid *ExectionInfoDelete
}

// Where appends a list predicates to the ExectionInfoDelete builder.
func (eido *ExectionInfoDeleteOne) Where(ps ...predicate.ExectionInfo) *ExectionInfoDeleteOne {
	eido.eid.mutation.Where(ps...)
	return eido
}

// Exec executes the deletion query.
func (eido *ExectionInfoDeleteOne) Exec(ctx context.Context) error {
	n, err := eido.eid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{exectioninfo.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (eido *ExectionInfoDeleteOne) ExecX(ctx context.Context) {
	if err := eido.Exec(ctx); err != nil {
		panic(err)
	}
}
