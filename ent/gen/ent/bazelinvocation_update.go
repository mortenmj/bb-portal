// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocationproblem"
	"github.com/buildbarn/bb-portal/ent/gen/ent/build"
	"github.com/buildbarn/bb-portal/ent/gen/ent/eventfile"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
	"github.com/buildbarn/bb-portal/pkg/summary"
)

// BazelInvocationUpdate is the builder for updating BazelInvocation entities.
type BazelInvocationUpdate struct {
	config
	hooks    []Hook
	mutation *BazelInvocationMutation
}

// Where appends a list predicates to the BazelInvocationUpdate builder.
func (biu *BazelInvocationUpdate) Where(ps ...predicate.BazelInvocation) *BazelInvocationUpdate {
	biu.mutation.Where(ps...)
	return biu
}

// SetStartedAt sets the "started_at" field.
func (biu *BazelInvocationUpdate) SetStartedAt(t time.Time) *BazelInvocationUpdate {
	biu.mutation.SetStartedAt(t)
	return biu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableStartedAt(t *time.Time) *BazelInvocationUpdate {
	if t != nil {
		biu.SetStartedAt(*t)
	}
	return biu
}

// SetEndedAt sets the "ended_at" field.
func (biu *BazelInvocationUpdate) SetEndedAt(t time.Time) *BazelInvocationUpdate {
	biu.mutation.SetEndedAt(t)
	return biu
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableEndedAt(t *time.Time) *BazelInvocationUpdate {
	if t != nil {
		biu.SetEndedAt(*t)
	}
	return biu
}

// ClearEndedAt clears the value of the "ended_at" field.
func (biu *BazelInvocationUpdate) ClearEndedAt() *BazelInvocationUpdate {
	biu.mutation.ClearEndedAt()
	return biu
}

// SetChangeNumber sets the "change_number" field.
func (biu *BazelInvocationUpdate) SetChangeNumber(i int32) *BazelInvocationUpdate {
	biu.mutation.ResetChangeNumber()
	biu.mutation.SetChangeNumber(i)
	return biu
}

// SetNillableChangeNumber sets the "change_number" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableChangeNumber(i *int32) *BazelInvocationUpdate {
	if i != nil {
		biu.SetChangeNumber(*i)
	}
	return biu
}

// AddChangeNumber adds i to the "change_number" field.
func (biu *BazelInvocationUpdate) AddChangeNumber(i int32) *BazelInvocationUpdate {
	biu.mutation.AddChangeNumber(i)
	return biu
}

// ClearChangeNumber clears the value of the "change_number" field.
func (biu *BazelInvocationUpdate) ClearChangeNumber() *BazelInvocationUpdate {
	biu.mutation.ClearChangeNumber()
	return biu
}

// SetPatchsetNumber sets the "patchset_number" field.
func (biu *BazelInvocationUpdate) SetPatchsetNumber(i int32) *BazelInvocationUpdate {
	biu.mutation.ResetPatchsetNumber()
	biu.mutation.SetPatchsetNumber(i)
	return biu
}

// SetNillablePatchsetNumber sets the "patchset_number" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillablePatchsetNumber(i *int32) *BazelInvocationUpdate {
	if i != nil {
		biu.SetPatchsetNumber(*i)
	}
	return biu
}

// AddPatchsetNumber adds i to the "patchset_number" field.
func (biu *BazelInvocationUpdate) AddPatchsetNumber(i int32) *BazelInvocationUpdate {
	biu.mutation.AddPatchsetNumber(i)
	return biu
}

// ClearPatchsetNumber clears the value of the "patchset_number" field.
func (biu *BazelInvocationUpdate) ClearPatchsetNumber() *BazelInvocationUpdate {
	biu.mutation.ClearPatchsetNumber()
	return biu
}

// SetSummary sets the "summary" field.
func (biu *BazelInvocationUpdate) SetSummary(ss summary.InvocationSummary) *BazelInvocationUpdate {
	biu.mutation.SetSummary(ss)
	return biu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableSummary(ss *summary.InvocationSummary) *BazelInvocationUpdate {
	if ss != nil {
		biu.SetSummary(*ss)
	}
	return biu
}

// SetBepCompleted sets the "bep_completed" field.
func (biu *BazelInvocationUpdate) SetBepCompleted(b bool) *BazelInvocationUpdate {
	biu.mutation.SetBepCompleted(b)
	return biu
}

// SetNillableBepCompleted sets the "bep_completed" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableBepCompleted(b *bool) *BazelInvocationUpdate {
	if b != nil {
		biu.SetBepCompleted(*b)
	}
	return biu
}

// ClearBepCompleted clears the value of the "bep_completed" field.
func (biu *BazelInvocationUpdate) ClearBepCompleted() *BazelInvocationUpdate {
	biu.mutation.ClearBepCompleted()
	return biu
}

// SetStepLabel sets the "step_label" field.
func (biu *BazelInvocationUpdate) SetStepLabel(s string) *BazelInvocationUpdate {
	biu.mutation.SetStepLabel(s)
	return biu
}

// SetNillableStepLabel sets the "step_label" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableStepLabel(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetStepLabel(*s)
	}
	return biu
}

// SetRelatedFiles sets the "related_files" field.
func (biu *BazelInvocationUpdate) SetRelatedFiles(m map[string]string) *BazelInvocationUpdate {
	biu.mutation.SetRelatedFiles(m)
	return biu
}

// SetUserEmail sets the "user_email" field.
func (biu *BazelInvocationUpdate) SetUserEmail(s string) *BazelInvocationUpdate {
	biu.mutation.SetUserEmail(s)
	return biu
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableUserEmail(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetUserEmail(*s)
	}
	return biu
}

// ClearUserEmail clears the value of the "user_email" field.
func (biu *BazelInvocationUpdate) ClearUserEmail() *BazelInvocationUpdate {
	biu.mutation.ClearUserEmail()
	return biu
}

// SetUserLdap sets the "user_ldap" field.
func (biu *BazelInvocationUpdate) SetUserLdap(s string) *BazelInvocationUpdate {
	biu.mutation.SetUserLdap(s)
	return biu
}

// SetNillableUserLdap sets the "user_ldap" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableUserLdap(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetUserLdap(*s)
	}
	return biu
}

// ClearUserLdap clears the value of the "user_ldap" field.
func (biu *BazelInvocationUpdate) ClearUserLdap() *BazelInvocationUpdate {
	biu.mutation.ClearUserLdap()
	return biu
}

// SetBuildLogs sets the "build_logs" field.
func (biu *BazelInvocationUpdate) SetBuildLogs(s string) *BazelInvocationUpdate {
	biu.mutation.SetBuildLogs(s)
	return biu
}

// SetNillableBuildLogs sets the "build_logs" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableBuildLogs(s *string) *BazelInvocationUpdate {
	if s != nil {
		biu.SetBuildLogs(*s)
	}
	return biu
}

// ClearBuildLogs clears the value of the "build_logs" field.
func (biu *BazelInvocationUpdate) ClearBuildLogs() *BazelInvocationUpdate {
	biu.mutation.ClearBuildLogs()
	return biu
}

// SetMetrics sets the "metrics" field.
func (biu *BazelInvocationUpdate) SetMetrics(s summary.Metrics) *BazelInvocationUpdate {
	biu.mutation.SetMetrics(s)
	return biu
}

// SetNillableMetrics sets the "metrics" field if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableMetrics(s *summary.Metrics) *BazelInvocationUpdate {
	if s != nil {
		biu.SetMetrics(*s)
	}
	return biu
}

// ClearMetrics clears the value of the "metrics" field.
func (biu *BazelInvocationUpdate) ClearMetrics() *BazelInvocationUpdate {
	biu.mutation.ClearMetrics()
	return biu
}

// SetEventFileID sets the "event_file" edge to the EventFile entity by ID.
func (biu *BazelInvocationUpdate) SetEventFileID(id int) *BazelInvocationUpdate {
	biu.mutation.SetEventFileID(id)
	return biu
}

// SetEventFile sets the "event_file" edge to the EventFile entity.
func (biu *BazelInvocationUpdate) SetEventFile(e *EventFile) *BazelInvocationUpdate {
	return biu.SetEventFileID(e.ID)
}

// SetBuildID sets the "build" edge to the Build entity by ID.
func (biu *BazelInvocationUpdate) SetBuildID(id int) *BazelInvocationUpdate {
	biu.mutation.SetBuildID(id)
	return biu
}

// SetNillableBuildID sets the "build" edge to the Build entity by ID if the given value is not nil.
func (biu *BazelInvocationUpdate) SetNillableBuildID(id *int) *BazelInvocationUpdate {
	if id != nil {
		biu = biu.SetBuildID(*id)
	}
	return biu
}

// SetBuild sets the "build" edge to the Build entity.
func (biu *BazelInvocationUpdate) SetBuild(b *Build) *BazelInvocationUpdate {
	return biu.SetBuildID(b.ID)
}

// AddProblemIDs adds the "problems" edge to the BazelInvocationProblem entity by IDs.
func (biu *BazelInvocationUpdate) AddProblemIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.AddProblemIDs(ids...)
	return biu
}

// AddProblems adds the "problems" edges to the BazelInvocationProblem entity.
func (biu *BazelInvocationUpdate) AddProblems(b ...*BazelInvocationProblem) *BazelInvocationUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.AddProblemIDs(ids...)
}

// Mutation returns the BazelInvocationMutation object of the builder.
func (biu *BazelInvocationUpdate) Mutation() *BazelInvocationMutation {
	return biu.mutation
}

// ClearEventFile clears the "event_file" edge to the EventFile entity.
func (biu *BazelInvocationUpdate) ClearEventFile() *BazelInvocationUpdate {
	biu.mutation.ClearEventFile()
	return biu
}

// ClearBuild clears the "build" edge to the Build entity.
func (biu *BazelInvocationUpdate) ClearBuild() *BazelInvocationUpdate {
	biu.mutation.ClearBuild()
	return biu
}

// ClearProblems clears all "problems" edges to the BazelInvocationProblem entity.
func (biu *BazelInvocationUpdate) ClearProblems() *BazelInvocationUpdate {
	biu.mutation.ClearProblems()
	return biu
}

// RemoveProblemIDs removes the "problems" edge to BazelInvocationProblem entities by IDs.
func (biu *BazelInvocationUpdate) RemoveProblemIDs(ids ...int) *BazelInvocationUpdate {
	biu.mutation.RemoveProblemIDs(ids...)
	return biu
}

// RemoveProblems removes "problems" edges to BazelInvocationProblem entities.
func (biu *BazelInvocationUpdate) RemoveProblems(b ...*BazelInvocationProblem) *BazelInvocationUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biu.RemoveProblemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BazelInvocationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, biu.sqlSave, biu.mutation, biu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BazelInvocationUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BazelInvocationUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BazelInvocationUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biu *BazelInvocationUpdate) check() error {
	if _, ok := biu.mutation.EventFileID(); biu.mutation.EventFileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BazelInvocation.event_file"`)
	}
	return nil
}

func (biu *BazelInvocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := biu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bazelinvocation.Table, bazelinvocation.Columns, sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt))
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.StartedAt(); ok {
		_spec.SetField(bazelinvocation.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := biu.mutation.EndedAt(); ok {
		_spec.SetField(bazelinvocation.FieldEndedAt, field.TypeTime, value)
	}
	if biu.mutation.EndedAtCleared() {
		_spec.ClearField(bazelinvocation.FieldEndedAt, field.TypeTime)
	}
	if value, ok := biu.mutation.ChangeNumber(); ok {
		_spec.SetField(bazelinvocation.FieldChangeNumber, field.TypeInt32, value)
	}
	if value, ok := biu.mutation.AddedChangeNumber(); ok {
		_spec.AddField(bazelinvocation.FieldChangeNumber, field.TypeInt32, value)
	}
	if biu.mutation.ChangeNumberCleared() {
		_spec.ClearField(bazelinvocation.FieldChangeNumber, field.TypeInt32)
	}
	if value, ok := biu.mutation.PatchsetNumber(); ok {
		_spec.SetField(bazelinvocation.FieldPatchsetNumber, field.TypeInt32, value)
	}
	if value, ok := biu.mutation.AddedPatchsetNumber(); ok {
		_spec.AddField(bazelinvocation.FieldPatchsetNumber, field.TypeInt32, value)
	}
	if biu.mutation.PatchsetNumberCleared() {
		_spec.ClearField(bazelinvocation.FieldPatchsetNumber, field.TypeInt32)
	}
	if value, ok := biu.mutation.Summary(); ok {
		_spec.SetField(bazelinvocation.FieldSummary, field.TypeJSON, value)
	}
	if value, ok := biu.mutation.BepCompleted(); ok {
		_spec.SetField(bazelinvocation.FieldBepCompleted, field.TypeBool, value)
	}
	if biu.mutation.BepCompletedCleared() {
		_spec.ClearField(bazelinvocation.FieldBepCompleted, field.TypeBool)
	}
	if value, ok := biu.mutation.StepLabel(); ok {
		_spec.SetField(bazelinvocation.FieldStepLabel, field.TypeString, value)
	}
	if value, ok := biu.mutation.RelatedFiles(); ok {
		_spec.SetField(bazelinvocation.FieldRelatedFiles, field.TypeJSON, value)
	}
	if value, ok := biu.mutation.UserEmail(); ok {
		_spec.SetField(bazelinvocation.FieldUserEmail, field.TypeString, value)
	}
	if biu.mutation.UserEmailCleared() {
		_spec.ClearField(bazelinvocation.FieldUserEmail, field.TypeString)
	}
	if value, ok := biu.mutation.UserLdap(); ok {
		_spec.SetField(bazelinvocation.FieldUserLdap, field.TypeString, value)
	}
	if biu.mutation.UserLdapCleared() {
		_spec.ClearField(bazelinvocation.FieldUserLdap, field.TypeString)
	}
	if value, ok := biu.mutation.BuildLogs(); ok {
		_spec.SetField(bazelinvocation.FieldBuildLogs, field.TypeString, value)
	}
	if biu.mutation.BuildLogsCleared() {
		_spec.ClearField(bazelinvocation.FieldBuildLogs, field.TypeString)
	}
	if value, ok := biu.mutation.Metrics(); ok {
		_spec.SetField(bazelinvocation.FieldMetrics, field.TypeJSON, value)
	}
	if biu.mutation.MetricsCleared() {
		_spec.ClearField(bazelinvocation.FieldMetrics, field.TypeJSON)
	}
	if biu.mutation.EventFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bazelinvocation.EventFileTable,
			Columns: []string{bazelinvocation.EventFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.EventFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bazelinvocation.EventFileTable,
			Columns: []string{bazelinvocation.EventFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bazelinvocation.BuildTable,
			Columns: []string{bazelinvocation.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bazelinvocation.BuildTable,
			Columns: []string{bazelinvocation.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !biu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bazelinvocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biu.mutation.done = true
	return n, nil
}

// BazelInvocationUpdateOne is the builder for updating a single BazelInvocation entity.
type BazelInvocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BazelInvocationMutation
}

// SetStartedAt sets the "started_at" field.
func (biuo *BazelInvocationUpdateOne) SetStartedAt(t time.Time) *BazelInvocationUpdateOne {
	biuo.mutation.SetStartedAt(t)
	return biuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableStartedAt(t *time.Time) *BazelInvocationUpdateOne {
	if t != nil {
		biuo.SetStartedAt(*t)
	}
	return biuo
}

// SetEndedAt sets the "ended_at" field.
func (biuo *BazelInvocationUpdateOne) SetEndedAt(t time.Time) *BazelInvocationUpdateOne {
	biuo.mutation.SetEndedAt(t)
	return biuo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableEndedAt(t *time.Time) *BazelInvocationUpdateOne {
	if t != nil {
		biuo.SetEndedAt(*t)
	}
	return biuo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (biuo *BazelInvocationUpdateOne) ClearEndedAt() *BazelInvocationUpdateOne {
	biuo.mutation.ClearEndedAt()
	return biuo
}

// SetChangeNumber sets the "change_number" field.
func (biuo *BazelInvocationUpdateOne) SetChangeNumber(i int32) *BazelInvocationUpdateOne {
	biuo.mutation.ResetChangeNumber()
	biuo.mutation.SetChangeNumber(i)
	return biuo
}

// SetNillableChangeNumber sets the "change_number" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableChangeNumber(i *int32) *BazelInvocationUpdateOne {
	if i != nil {
		biuo.SetChangeNumber(*i)
	}
	return biuo
}

// AddChangeNumber adds i to the "change_number" field.
func (biuo *BazelInvocationUpdateOne) AddChangeNumber(i int32) *BazelInvocationUpdateOne {
	biuo.mutation.AddChangeNumber(i)
	return biuo
}

// ClearChangeNumber clears the value of the "change_number" field.
func (biuo *BazelInvocationUpdateOne) ClearChangeNumber() *BazelInvocationUpdateOne {
	biuo.mutation.ClearChangeNumber()
	return biuo
}

// SetPatchsetNumber sets the "patchset_number" field.
func (biuo *BazelInvocationUpdateOne) SetPatchsetNumber(i int32) *BazelInvocationUpdateOne {
	biuo.mutation.ResetPatchsetNumber()
	biuo.mutation.SetPatchsetNumber(i)
	return biuo
}

// SetNillablePatchsetNumber sets the "patchset_number" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillablePatchsetNumber(i *int32) *BazelInvocationUpdateOne {
	if i != nil {
		biuo.SetPatchsetNumber(*i)
	}
	return biuo
}

// AddPatchsetNumber adds i to the "patchset_number" field.
func (biuo *BazelInvocationUpdateOne) AddPatchsetNumber(i int32) *BazelInvocationUpdateOne {
	biuo.mutation.AddPatchsetNumber(i)
	return biuo
}

// ClearPatchsetNumber clears the value of the "patchset_number" field.
func (biuo *BazelInvocationUpdateOne) ClearPatchsetNumber() *BazelInvocationUpdateOne {
	biuo.mutation.ClearPatchsetNumber()
	return biuo
}

// SetSummary sets the "summary" field.
func (biuo *BazelInvocationUpdateOne) SetSummary(ss summary.InvocationSummary) *BazelInvocationUpdateOne {
	biuo.mutation.SetSummary(ss)
	return biuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableSummary(ss *summary.InvocationSummary) *BazelInvocationUpdateOne {
	if ss != nil {
		biuo.SetSummary(*ss)
	}
	return biuo
}

// SetBepCompleted sets the "bep_completed" field.
func (biuo *BazelInvocationUpdateOne) SetBepCompleted(b bool) *BazelInvocationUpdateOne {
	biuo.mutation.SetBepCompleted(b)
	return biuo
}

// SetNillableBepCompleted sets the "bep_completed" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableBepCompleted(b *bool) *BazelInvocationUpdateOne {
	if b != nil {
		biuo.SetBepCompleted(*b)
	}
	return biuo
}

// ClearBepCompleted clears the value of the "bep_completed" field.
func (biuo *BazelInvocationUpdateOne) ClearBepCompleted() *BazelInvocationUpdateOne {
	biuo.mutation.ClearBepCompleted()
	return biuo
}

// SetStepLabel sets the "step_label" field.
func (biuo *BazelInvocationUpdateOne) SetStepLabel(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetStepLabel(s)
	return biuo
}

// SetNillableStepLabel sets the "step_label" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableStepLabel(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetStepLabel(*s)
	}
	return biuo
}

// SetRelatedFiles sets the "related_files" field.
func (biuo *BazelInvocationUpdateOne) SetRelatedFiles(m map[string]string) *BazelInvocationUpdateOne {
	biuo.mutation.SetRelatedFiles(m)
	return biuo
}

// SetUserEmail sets the "user_email" field.
func (biuo *BazelInvocationUpdateOne) SetUserEmail(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetUserEmail(s)
	return biuo
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableUserEmail(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetUserEmail(*s)
	}
	return biuo
}

// ClearUserEmail clears the value of the "user_email" field.
func (biuo *BazelInvocationUpdateOne) ClearUserEmail() *BazelInvocationUpdateOne {
	biuo.mutation.ClearUserEmail()
	return biuo
}

// SetUserLdap sets the "user_ldap" field.
func (biuo *BazelInvocationUpdateOne) SetUserLdap(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetUserLdap(s)
	return biuo
}

// SetNillableUserLdap sets the "user_ldap" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableUserLdap(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetUserLdap(*s)
	}
	return biuo
}

// ClearUserLdap clears the value of the "user_ldap" field.
func (biuo *BazelInvocationUpdateOne) ClearUserLdap() *BazelInvocationUpdateOne {
	biuo.mutation.ClearUserLdap()
	return biuo
}

// SetBuildLogs sets the "build_logs" field.
func (biuo *BazelInvocationUpdateOne) SetBuildLogs(s string) *BazelInvocationUpdateOne {
	biuo.mutation.SetBuildLogs(s)
	return biuo
}

// SetNillableBuildLogs sets the "build_logs" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableBuildLogs(s *string) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetBuildLogs(*s)
	}
	return biuo
}

// ClearBuildLogs clears the value of the "build_logs" field.
func (biuo *BazelInvocationUpdateOne) ClearBuildLogs() *BazelInvocationUpdateOne {
	biuo.mutation.ClearBuildLogs()
	return biuo
}

// SetMetrics sets the "metrics" field.
func (biuo *BazelInvocationUpdateOne) SetMetrics(s summary.Metrics) *BazelInvocationUpdateOne {
	biuo.mutation.SetMetrics(s)
	return biuo
}

// SetNillableMetrics sets the "metrics" field if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableMetrics(s *summary.Metrics) *BazelInvocationUpdateOne {
	if s != nil {
		biuo.SetMetrics(*s)
	}
	return biuo
}

// ClearMetrics clears the value of the "metrics" field.
func (biuo *BazelInvocationUpdateOne) ClearMetrics() *BazelInvocationUpdateOne {
	biuo.mutation.ClearMetrics()
	return biuo
}

// SetEventFileID sets the "event_file" edge to the EventFile entity by ID.
func (biuo *BazelInvocationUpdateOne) SetEventFileID(id int) *BazelInvocationUpdateOne {
	biuo.mutation.SetEventFileID(id)
	return biuo
}

// SetEventFile sets the "event_file" edge to the EventFile entity.
func (biuo *BazelInvocationUpdateOne) SetEventFile(e *EventFile) *BazelInvocationUpdateOne {
	return biuo.SetEventFileID(e.ID)
}

// SetBuildID sets the "build" edge to the Build entity by ID.
func (biuo *BazelInvocationUpdateOne) SetBuildID(id int) *BazelInvocationUpdateOne {
	biuo.mutation.SetBuildID(id)
	return biuo
}

// SetNillableBuildID sets the "build" edge to the Build entity by ID if the given value is not nil.
func (biuo *BazelInvocationUpdateOne) SetNillableBuildID(id *int) *BazelInvocationUpdateOne {
	if id != nil {
		biuo = biuo.SetBuildID(*id)
	}
	return biuo
}

// SetBuild sets the "build" edge to the Build entity.
func (biuo *BazelInvocationUpdateOne) SetBuild(b *Build) *BazelInvocationUpdateOne {
	return biuo.SetBuildID(b.ID)
}

// AddProblemIDs adds the "problems" edge to the BazelInvocationProblem entity by IDs.
func (biuo *BazelInvocationUpdateOne) AddProblemIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.AddProblemIDs(ids...)
	return biuo
}

// AddProblems adds the "problems" edges to the BazelInvocationProblem entity.
func (biuo *BazelInvocationUpdateOne) AddProblems(b ...*BazelInvocationProblem) *BazelInvocationUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.AddProblemIDs(ids...)
}

// Mutation returns the BazelInvocationMutation object of the builder.
func (biuo *BazelInvocationUpdateOne) Mutation() *BazelInvocationMutation {
	return biuo.mutation
}

// ClearEventFile clears the "event_file" edge to the EventFile entity.
func (biuo *BazelInvocationUpdateOne) ClearEventFile() *BazelInvocationUpdateOne {
	biuo.mutation.ClearEventFile()
	return biuo
}

// ClearBuild clears the "build" edge to the Build entity.
func (biuo *BazelInvocationUpdateOne) ClearBuild() *BazelInvocationUpdateOne {
	biuo.mutation.ClearBuild()
	return biuo
}

// ClearProblems clears all "problems" edges to the BazelInvocationProblem entity.
func (biuo *BazelInvocationUpdateOne) ClearProblems() *BazelInvocationUpdateOne {
	biuo.mutation.ClearProblems()
	return biuo
}

// RemoveProblemIDs removes the "problems" edge to BazelInvocationProblem entities by IDs.
func (biuo *BazelInvocationUpdateOne) RemoveProblemIDs(ids ...int) *BazelInvocationUpdateOne {
	biuo.mutation.RemoveProblemIDs(ids...)
	return biuo
}

// RemoveProblems removes "problems" edges to BazelInvocationProblem entities.
func (biuo *BazelInvocationUpdateOne) RemoveProblems(b ...*BazelInvocationProblem) *BazelInvocationUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return biuo.RemoveProblemIDs(ids...)
}

// Where appends a list predicates to the BazelInvocationUpdate builder.
func (biuo *BazelInvocationUpdateOne) Where(ps ...predicate.BazelInvocation) *BazelInvocationUpdateOne {
	biuo.mutation.Where(ps...)
	return biuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biuo *BazelInvocationUpdateOne) Select(field string, fields ...string) *BazelInvocationUpdateOne {
	biuo.fields = append([]string{field}, fields...)
	return biuo
}

// Save executes the query and returns the updated BazelInvocation entity.
func (biuo *BazelInvocationUpdateOne) Save(ctx context.Context) (*BazelInvocation, error) {
	return withHooks(ctx, biuo.sqlSave, biuo.mutation, biuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BazelInvocationUpdateOne) SaveX(ctx context.Context) *BazelInvocation {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BazelInvocationUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BazelInvocationUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biuo *BazelInvocationUpdateOne) check() error {
	if _, ok := biuo.mutation.EventFileID(); biuo.mutation.EventFileCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BazelInvocation.event_file"`)
	}
	return nil
}

func (biuo *BazelInvocationUpdateOne) sqlSave(ctx context.Context) (_node *BazelInvocation, err error) {
	if err := biuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bazelinvocation.Table, bazelinvocation.Columns, sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt))
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BazelInvocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bazelinvocation.FieldID)
		for _, f := range fields {
			if !bazelinvocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bazelinvocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.StartedAt(); ok {
		_spec.SetField(bazelinvocation.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.EndedAt(); ok {
		_spec.SetField(bazelinvocation.FieldEndedAt, field.TypeTime, value)
	}
	if biuo.mutation.EndedAtCleared() {
		_spec.ClearField(bazelinvocation.FieldEndedAt, field.TypeTime)
	}
	if value, ok := biuo.mutation.ChangeNumber(); ok {
		_spec.SetField(bazelinvocation.FieldChangeNumber, field.TypeInt32, value)
	}
	if value, ok := biuo.mutation.AddedChangeNumber(); ok {
		_spec.AddField(bazelinvocation.FieldChangeNumber, field.TypeInt32, value)
	}
	if biuo.mutation.ChangeNumberCleared() {
		_spec.ClearField(bazelinvocation.FieldChangeNumber, field.TypeInt32)
	}
	if value, ok := biuo.mutation.PatchsetNumber(); ok {
		_spec.SetField(bazelinvocation.FieldPatchsetNumber, field.TypeInt32, value)
	}
	if value, ok := biuo.mutation.AddedPatchsetNumber(); ok {
		_spec.AddField(bazelinvocation.FieldPatchsetNumber, field.TypeInt32, value)
	}
	if biuo.mutation.PatchsetNumberCleared() {
		_spec.ClearField(bazelinvocation.FieldPatchsetNumber, field.TypeInt32)
	}
	if value, ok := biuo.mutation.Summary(); ok {
		_spec.SetField(bazelinvocation.FieldSummary, field.TypeJSON, value)
	}
	if value, ok := biuo.mutation.BepCompleted(); ok {
		_spec.SetField(bazelinvocation.FieldBepCompleted, field.TypeBool, value)
	}
	if biuo.mutation.BepCompletedCleared() {
		_spec.ClearField(bazelinvocation.FieldBepCompleted, field.TypeBool)
	}
	if value, ok := biuo.mutation.StepLabel(); ok {
		_spec.SetField(bazelinvocation.FieldStepLabel, field.TypeString, value)
	}
	if value, ok := biuo.mutation.RelatedFiles(); ok {
		_spec.SetField(bazelinvocation.FieldRelatedFiles, field.TypeJSON, value)
	}
	if value, ok := biuo.mutation.UserEmail(); ok {
		_spec.SetField(bazelinvocation.FieldUserEmail, field.TypeString, value)
	}
	if biuo.mutation.UserEmailCleared() {
		_spec.ClearField(bazelinvocation.FieldUserEmail, field.TypeString)
	}
	if value, ok := biuo.mutation.UserLdap(); ok {
		_spec.SetField(bazelinvocation.FieldUserLdap, field.TypeString, value)
	}
	if biuo.mutation.UserLdapCleared() {
		_spec.ClearField(bazelinvocation.FieldUserLdap, field.TypeString)
	}
	if value, ok := biuo.mutation.BuildLogs(); ok {
		_spec.SetField(bazelinvocation.FieldBuildLogs, field.TypeString, value)
	}
	if biuo.mutation.BuildLogsCleared() {
		_spec.ClearField(bazelinvocation.FieldBuildLogs, field.TypeString)
	}
	if value, ok := biuo.mutation.Metrics(); ok {
		_spec.SetField(bazelinvocation.FieldMetrics, field.TypeJSON, value)
	}
	if biuo.mutation.MetricsCleared() {
		_spec.ClearField(bazelinvocation.FieldMetrics, field.TypeJSON)
	}
	if biuo.mutation.EventFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bazelinvocation.EventFileTable,
			Columns: []string{bazelinvocation.EventFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventfile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.EventFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bazelinvocation.EventFileTable,
			Columns: []string{bazelinvocation.EventFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventfile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.BuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bazelinvocation.BuildTable,
			Columns: []string{bazelinvocation.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.BuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bazelinvocation.BuildTable,
			Columns: []string{bazelinvocation.BuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(build.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !biuo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bazelinvocation.ProblemsTable,
			Columns: []string{bazelinvocation.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocationproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BazelInvocation{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bazelinvocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biuo.mutation.done = true
	return _node, nil
}
