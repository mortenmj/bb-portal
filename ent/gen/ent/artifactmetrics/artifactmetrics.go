// Code generated by ent, DO NOT EDIT.

package artifactmetrics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the artifactmetrics type in the database.
	Label = "artifact_metrics"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeMetrics holds the string denoting the metrics edge name in mutations.
	EdgeMetrics = "metrics"
	// EdgeSourceArtifactsRead holds the string denoting the source_artifacts_read edge name in mutations.
	EdgeSourceArtifactsRead = "source_artifacts_read"
	// EdgeOutputArtifactsSeen holds the string denoting the output_artifacts_seen edge name in mutations.
	EdgeOutputArtifactsSeen = "output_artifacts_seen"
	// EdgeOutputArtifactsFromActionCache holds the string denoting the output_artifacts_from_action_cache edge name in mutations.
	EdgeOutputArtifactsFromActionCache = "output_artifacts_from_action_cache"
	// EdgeTopLevelArtifacts holds the string denoting the top_level_artifacts edge name in mutations.
	EdgeTopLevelArtifacts = "top_level_artifacts"
	// Table holds the table name of the artifactmetrics in the database.
	Table = "artifact_metrics"
	// MetricsTable is the table that holds the metrics relation/edge. The primary key declared below.
	MetricsTable = "metrics_artifact_metrics"
	// MetricsInverseTable is the table name for the Metrics entity.
	// It exists in this package in order to avoid circular dependency with the "metrics" package.
	MetricsInverseTable = "metrics"
	// SourceArtifactsReadTable is the table that holds the source_artifacts_read relation/edge.
	SourceArtifactsReadTable = "files_metrics"
	// SourceArtifactsReadInverseTable is the table name for the FilesMetric entity.
	// It exists in this package in order to avoid circular dependency with the "filesmetric" package.
	SourceArtifactsReadInverseTable = "files_metrics"
	// SourceArtifactsReadColumn is the table column denoting the source_artifacts_read relation/edge.
	SourceArtifactsReadColumn = "artifact_metrics_source_artifacts_read"
	// OutputArtifactsSeenTable is the table that holds the output_artifacts_seen relation/edge.
	OutputArtifactsSeenTable = "files_metrics"
	// OutputArtifactsSeenInverseTable is the table name for the FilesMetric entity.
	// It exists in this package in order to avoid circular dependency with the "filesmetric" package.
	OutputArtifactsSeenInverseTable = "files_metrics"
	// OutputArtifactsSeenColumn is the table column denoting the output_artifacts_seen relation/edge.
	OutputArtifactsSeenColumn = "artifact_metrics_output_artifacts_seen"
	// OutputArtifactsFromActionCacheTable is the table that holds the output_artifacts_from_action_cache relation/edge.
	OutputArtifactsFromActionCacheTable = "files_metrics"
	// OutputArtifactsFromActionCacheInverseTable is the table name for the FilesMetric entity.
	// It exists in this package in order to avoid circular dependency with the "filesmetric" package.
	OutputArtifactsFromActionCacheInverseTable = "files_metrics"
	// OutputArtifactsFromActionCacheColumn is the table column denoting the output_artifacts_from_action_cache relation/edge.
	OutputArtifactsFromActionCacheColumn = "artifact_metrics_output_artifacts_from_action_cache"
	// TopLevelArtifactsTable is the table that holds the top_level_artifacts relation/edge. The primary key declared below.
	TopLevelArtifactsTable = "artifact_metrics_top_level_artifacts"
	// TopLevelArtifactsInverseTable is the table name for the FilesMetric entity.
	// It exists in this package in order to avoid circular dependency with the "filesmetric" package.
	TopLevelArtifactsInverseTable = "files_metrics"
)

// Columns holds all SQL columns for artifactmetrics fields.
var Columns = []string{
	FieldID,
}

var (
	// MetricsPrimaryKey and MetricsColumn2 are the table columns denoting the
	// primary key for the metrics relation (M2M).
	MetricsPrimaryKey = []string{"metrics_id", "artifact_metrics_id"}
	// TopLevelArtifactsPrimaryKey and TopLevelArtifactsColumn2 are the table columns denoting the
	// primary key for the top_level_artifacts relation (M2M).
	TopLevelArtifactsPrimaryKey = []string{"artifact_metrics_id", "files_metric_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ArtifactMetrics queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMetricsCount orders the results by metrics count.
func ByMetricsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetricsStep(), opts...)
	}
}

// ByMetrics orders the results by metrics terms.
func ByMetrics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetricsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySourceArtifactsReadCount orders the results by source_artifacts_read count.
func BySourceArtifactsReadCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSourceArtifactsReadStep(), opts...)
	}
}

// BySourceArtifactsRead orders the results by source_artifacts_read terms.
func BySourceArtifactsRead(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceArtifactsReadStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOutputArtifactsSeenCount orders the results by output_artifacts_seen count.
func ByOutputArtifactsSeenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOutputArtifactsSeenStep(), opts...)
	}
}

// ByOutputArtifactsSeen orders the results by output_artifacts_seen terms.
func ByOutputArtifactsSeen(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutputArtifactsSeenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOutputArtifactsFromActionCacheCount orders the results by output_artifacts_from_action_cache count.
func ByOutputArtifactsFromActionCacheCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOutputArtifactsFromActionCacheStep(), opts...)
	}
}

// ByOutputArtifactsFromActionCache orders the results by output_artifacts_from_action_cache terms.
func ByOutputArtifactsFromActionCache(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutputArtifactsFromActionCacheStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTopLevelArtifactsCount orders the results by top_level_artifacts count.
func ByTopLevelArtifactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTopLevelArtifactsStep(), opts...)
	}
}

// ByTopLevelArtifacts orders the results by top_level_artifacts terms.
func ByTopLevelArtifacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopLevelArtifactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMetricsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetricsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MetricsTable, MetricsPrimaryKey...),
	)
}
func newSourceArtifactsReadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceArtifactsReadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SourceArtifactsReadTable, SourceArtifactsReadColumn),
	)
}
func newOutputArtifactsSeenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutputArtifactsSeenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OutputArtifactsSeenTable, OutputArtifactsSeenColumn),
	)
}
func newOutputArtifactsFromActionCacheStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutputArtifactsFromActionCacheInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OutputArtifactsFromActionCacheTable, OutputArtifactsFromActionCacheColumn),
	)
}
func newTopLevelArtifactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TopLevelArtifactsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TopLevelArtifactsTable, TopLevelArtifactsPrimaryKey...),
	)
}
