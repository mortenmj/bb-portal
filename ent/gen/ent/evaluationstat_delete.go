// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/evaluationstat"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// EvaluationStatDelete is the builder for deleting a EvaluationStat entity.
type EvaluationStatDelete struct {
	config
	hooks    []Hook
	mutation *EvaluationStatMutation
}

// Where appends a list predicates to the EvaluationStatDelete builder.
func (esd *EvaluationStatDelete) Where(ps ...predicate.EvaluationStat) *EvaluationStatDelete {
	esd.mutation.Where(ps...)
	return esd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (esd *EvaluationStatDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, esd.sqlExec, esd.mutation, esd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (esd *EvaluationStatDelete) ExecX(ctx context.Context) int {
	n, err := esd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (esd *EvaluationStatDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(evaluationstat.Table, sqlgraph.NewFieldSpec(evaluationstat.FieldID, field.TypeInt))
	if ps := esd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, esd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	esd.mutation.done = true
	return affected, err
}

// EvaluationStatDeleteOne is the builder for deleting a single EvaluationStat entity.
type EvaluationStatDeleteOne struct {
	esd *EvaluationStatDelete
}

// Where appends a list predicates to the EvaluationStatDelete builder.
func (esdo *EvaluationStatDeleteOne) Where(ps ...predicate.EvaluationStat) *EvaluationStatDeleteOne {
	esdo.esd.mutation.Where(ps...)
	return esdo
}

// Exec executes the deletion query.
func (esdo *EvaluationStatDeleteOne) Exec(ctx context.Context) error {
	n, err := esdo.esd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{evaluationstat.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (esdo *EvaluationStatDeleteOne) ExecX(ctx context.Context) {
	if err := esdo.Exec(ctx); err != nil {
		panic(err)
	}
}
