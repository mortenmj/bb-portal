// Code generated by ent, DO NOT EDIT.

package targetmetrics

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the targetmetrics type in the database.
	Label = "target_metrics"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTargetsLoaded holds the string denoting the targets_loaded field in the database.
	FieldTargetsLoaded = "targets_loaded"
	// FieldTargetsConfigured holds the string denoting the targets_configured field in the database.
	FieldTargetsConfigured = "targets_configured"
	// FieldTargetsConfiguredNotIncludingAspects holds the string denoting the targets_configured_not_including_aspects field in the database.
	FieldTargetsConfiguredNotIncludingAspects = "targets_configured_not_including_aspects"
	// EdgeMetrics holds the string denoting the metrics edge name in mutations.
	EdgeMetrics = "metrics"
	// Table holds the table name of the targetmetrics in the database.
	Table = "target_metrics"
	// MetricsTable is the table that holds the metrics relation/edge. The primary key declared below.
	MetricsTable = "metrics_target_metrics"
	// MetricsInverseTable is the table name for the Metrics entity.
	// It exists in this package in order to avoid circular dependency with the "metrics" package.
	MetricsInverseTable = "metrics"
)

// Columns holds all SQL columns for targetmetrics fields.
var Columns = []string{
	FieldID,
	FieldTargetsLoaded,
	FieldTargetsConfigured,
	FieldTargetsConfiguredNotIncludingAspects,
}

var (
	// MetricsPrimaryKey and MetricsColumn2 are the table columns denoting the
	// primary key for the metrics relation (M2M).
	MetricsPrimaryKey = []string{"metrics_id", "target_metrics_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TargetMetrics queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTargetsLoaded orders the results by the targets_loaded field.
func ByTargetsLoaded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetsLoaded, opts...).ToFunc()
}

// ByTargetsConfigured orders the results by the targets_configured field.
func ByTargetsConfigured(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetsConfigured, opts...).ToFunc()
}

// ByTargetsConfiguredNotIncludingAspects orders the results by the targets_configured_not_including_aspects field.
func ByTargetsConfiguredNotIncludingAspects(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetsConfiguredNotIncludingAspects, opts...).ToFunc()
}

// ByMetricsCount orders the results by metrics count.
func ByMetricsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetricsStep(), opts...)
	}
}

// ByMetrics orders the results by metrics terms.
func ByMetrics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetricsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMetricsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetricsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MetricsTable, MetricsPrimaryKey...),
	)
}
