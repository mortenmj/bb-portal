// Code generated by ent, DO NOT EDIT.

package missdetail

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldLTE(FieldID, id))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int32) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldEQ(FieldCount, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v Reason) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v Reason) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...Reason) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...Reason) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldNotIn(FieldReason, vs...))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int32) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int32) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int32) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int32) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int32) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int32) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int32) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int32) predicate.MissDetail {
	return predicate.MissDetail(sql.FieldLTE(FieldCount, v))
}

// CountIsNil applies the IsNil predicate on the "count" field.
func CountIsNil() predicate.MissDetail {
	return predicate.MissDetail(sql.FieldIsNull(FieldCount))
}

// CountNotNil applies the NotNil predicate on the "count" field.
func CountNotNil() predicate.MissDetail {
	return predicate.MissDetail(sql.FieldNotNull(FieldCount))
}

// HasActionCacheStatistics applies the HasEdge predicate on the "action_cache_statistics" edge.
func HasActionCacheStatistics() predicate.MissDetail {
	return predicate.MissDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ActionCacheStatisticsTable, ActionCacheStatisticsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionCacheStatisticsWith applies the HasEdge predicate on the "action_cache_statistics" edge with a given conditions (other predicates).
func HasActionCacheStatisticsWith(preds ...predicate.ActionCacheStatistics) predicate.MissDetail {
	return predicate.MissDetail(func(s *sql.Selector) {
		step := newActionCacheStatisticsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MissDetail) predicate.MissDetail {
	return predicate.MissDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MissDetail) predicate.MissDetail {
	return predicate.MissDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MissDetail) predicate.MissDetail {
	return predicate.MissDetail(sql.NotPredicates(p))
}
