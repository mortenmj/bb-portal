// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/artifactmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/filesmetric"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ArtifactMetricsUpdate is the builder for updating ArtifactMetrics entities.
type ArtifactMetricsUpdate struct {
	config
	hooks    []Hook
	mutation *ArtifactMetricsMutation
}

// Where appends a list predicates to the ArtifactMetricsUpdate builder.
func (amu *ArtifactMetricsUpdate) Where(ps ...predicate.ArtifactMetrics) *ArtifactMetricsUpdate {
	amu.mutation.Where(ps...)
	return amu
}

// AddMetricIDs adds the "metrics" edge to the Metrics entity by IDs.
func (amu *ArtifactMetricsUpdate) AddMetricIDs(ids ...int) *ArtifactMetricsUpdate {
	amu.mutation.AddMetricIDs(ids...)
	return amu
}

// AddMetrics adds the "metrics" edges to the Metrics entity.
func (amu *ArtifactMetricsUpdate) AddMetrics(m ...*Metrics) *ArtifactMetricsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return amu.AddMetricIDs(ids...)
}

// AddSourceArtifactsReadIDs adds the "source_artifacts_read" edge to the FilesMetric entity by IDs.
func (amu *ArtifactMetricsUpdate) AddSourceArtifactsReadIDs(ids ...int) *ArtifactMetricsUpdate {
	amu.mutation.AddSourceArtifactsReadIDs(ids...)
	return amu
}

// AddSourceArtifactsRead adds the "source_artifacts_read" edges to the FilesMetric entity.
func (amu *ArtifactMetricsUpdate) AddSourceArtifactsRead(f ...*FilesMetric) *ArtifactMetricsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amu.AddSourceArtifactsReadIDs(ids...)
}

// AddOutputArtifactsSeenIDs adds the "output_artifacts_seen" edge to the FilesMetric entity by IDs.
func (amu *ArtifactMetricsUpdate) AddOutputArtifactsSeenIDs(ids ...int) *ArtifactMetricsUpdate {
	amu.mutation.AddOutputArtifactsSeenIDs(ids...)
	return amu
}

// AddOutputArtifactsSeen adds the "output_artifacts_seen" edges to the FilesMetric entity.
func (amu *ArtifactMetricsUpdate) AddOutputArtifactsSeen(f ...*FilesMetric) *ArtifactMetricsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amu.AddOutputArtifactsSeenIDs(ids...)
}

// AddOutputArtifactsFromActionCacheIDs adds the "output_artifacts_from_action_cache" edge to the FilesMetric entity by IDs.
func (amu *ArtifactMetricsUpdate) AddOutputArtifactsFromActionCacheIDs(ids ...int) *ArtifactMetricsUpdate {
	amu.mutation.AddOutputArtifactsFromActionCacheIDs(ids...)
	return amu
}

// AddOutputArtifactsFromActionCache adds the "output_artifacts_from_action_cache" edges to the FilesMetric entity.
func (amu *ArtifactMetricsUpdate) AddOutputArtifactsFromActionCache(f ...*FilesMetric) *ArtifactMetricsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amu.AddOutputArtifactsFromActionCacheIDs(ids...)
}

// AddTopLevelArtifactIDs adds the "top_level_artifacts" edge to the FilesMetric entity by IDs.
func (amu *ArtifactMetricsUpdate) AddTopLevelArtifactIDs(ids ...int) *ArtifactMetricsUpdate {
	amu.mutation.AddTopLevelArtifactIDs(ids...)
	return amu
}

// AddTopLevelArtifacts adds the "top_level_artifacts" edges to the FilesMetric entity.
func (amu *ArtifactMetricsUpdate) AddTopLevelArtifacts(f ...*FilesMetric) *ArtifactMetricsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amu.AddTopLevelArtifactIDs(ids...)
}

// Mutation returns the ArtifactMetricsMutation object of the builder.
func (amu *ArtifactMetricsUpdate) Mutation() *ArtifactMetricsMutation {
	return amu.mutation
}

// ClearMetrics clears all "metrics" edges to the Metrics entity.
func (amu *ArtifactMetricsUpdate) ClearMetrics() *ArtifactMetricsUpdate {
	amu.mutation.ClearMetrics()
	return amu
}

// RemoveMetricIDs removes the "metrics" edge to Metrics entities by IDs.
func (amu *ArtifactMetricsUpdate) RemoveMetricIDs(ids ...int) *ArtifactMetricsUpdate {
	amu.mutation.RemoveMetricIDs(ids...)
	return amu
}

// RemoveMetrics removes "metrics" edges to Metrics entities.
func (amu *ArtifactMetricsUpdate) RemoveMetrics(m ...*Metrics) *ArtifactMetricsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return amu.RemoveMetricIDs(ids...)
}

// ClearSourceArtifactsRead clears all "source_artifacts_read" edges to the FilesMetric entity.
func (amu *ArtifactMetricsUpdate) ClearSourceArtifactsRead() *ArtifactMetricsUpdate {
	amu.mutation.ClearSourceArtifactsRead()
	return amu
}

// RemoveSourceArtifactsReadIDs removes the "source_artifacts_read" edge to FilesMetric entities by IDs.
func (amu *ArtifactMetricsUpdate) RemoveSourceArtifactsReadIDs(ids ...int) *ArtifactMetricsUpdate {
	amu.mutation.RemoveSourceArtifactsReadIDs(ids...)
	return amu
}

// RemoveSourceArtifactsRead removes "source_artifacts_read" edges to FilesMetric entities.
func (amu *ArtifactMetricsUpdate) RemoveSourceArtifactsRead(f ...*FilesMetric) *ArtifactMetricsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amu.RemoveSourceArtifactsReadIDs(ids...)
}

// ClearOutputArtifactsSeen clears all "output_artifacts_seen" edges to the FilesMetric entity.
func (amu *ArtifactMetricsUpdate) ClearOutputArtifactsSeen() *ArtifactMetricsUpdate {
	amu.mutation.ClearOutputArtifactsSeen()
	return amu
}

// RemoveOutputArtifactsSeenIDs removes the "output_artifacts_seen" edge to FilesMetric entities by IDs.
func (amu *ArtifactMetricsUpdate) RemoveOutputArtifactsSeenIDs(ids ...int) *ArtifactMetricsUpdate {
	amu.mutation.RemoveOutputArtifactsSeenIDs(ids...)
	return amu
}

// RemoveOutputArtifactsSeen removes "output_artifacts_seen" edges to FilesMetric entities.
func (amu *ArtifactMetricsUpdate) RemoveOutputArtifactsSeen(f ...*FilesMetric) *ArtifactMetricsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amu.RemoveOutputArtifactsSeenIDs(ids...)
}

// ClearOutputArtifactsFromActionCache clears all "output_artifacts_from_action_cache" edges to the FilesMetric entity.
func (amu *ArtifactMetricsUpdate) ClearOutputArtifactsFromActionCache() *ArtifactMetricsUpdate {
	amu.mutation.ClearOutputArtifactsFromActionCache()
	return amu
}

// RemoveOutputArtifactsFromActionCacheIDs removes the "output_artifacts_from_action_cache" edge to FilesMetric entities by IDs.
func (amu *ArtifactMetricsUpdate) RemoveOutputArtifactsFromActionCacheIDs(ids ...int) *ArtifactMetricsUpdate {
	amu.mutation.RemoveOutputArtifactsFromActionCacheIDs(ids...)
	return amu
}

// RemoveOutputArtifactsFromActionCache removes "output_artifacts_from_action_cache" edges to FilesMetric entities.
func (amu *ArtifactMetricsUpdate) RemoveOutputArtifactsFromActionCache(f ...*FilesMetric) *ArtifactMetricsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amu.RemoveOutputArtifactsFromActionCacheIDs(ids...)
}

// ClearTopLevelArtifacts clears all "top_level_artifacts" edges to the FilesMetric entity.
func (amu *ArtifactMetricsUpdate) ClearTopLevelArtifacts() *ArtifactMetricsUpdate {
	amu.mutation.ClearTopLevelArtifacts()
	return amu
}

// RemoveTopLevelArtifactIDs removes the "top_level_artifacts" edge to FilesMetric entities by IDs.
func (amu *ArtifactMetricsUpdate) RemoveTopLevelArtifactIDs(ids ...int) *ArtifactMetricsUpdate {
	amu.mutation.RemoveTopLevelArtifactIDs(ids...)
	return amu
}

// RemoveTopLevelArtifacts removes "top_level_artifacts" edges to FilesMetric entities.
func (amu *ArtifactMetricsUpdate) RemoveTopLevelArtifacts(f ...*FilesMetric) *ArtifactMetricsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amu.RemoveTopLevelArtifactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *ArtifactMetricsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, amu.sqlSave, amu.mutation, amu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amu *ArtifactMetricsUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *ArtifactMetricsUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *ArtifactMetricsUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (amu *ArtifactMetricsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(artifactmetrics.Table, artifactmetrics.Columns, sqlgraph.NewFieldSpec(artifactmetrics.FieldID, field.TypeInt))
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if amu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifactmetrics.MetricsTable,
			Columns: artifactmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedMetricsIDs(); len(nodes) > 0 && !amu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifactmetrics.MetricsTable,
			Columns: artifactmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifactmetrics.MetricsTable,
			Columns: artifactmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.SourceArtifactsReadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.SourceArtifactsReadTable,
			Columns: []string{artifactmetrics.SourceArtifactsReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedSourceArtifactsReadIDs(); len(nodes) > 0 && !amu.mutation.SourceArtifactsReadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.SourceArtifactsReadTable,
			Columns: []string{artifactmetrics.SourceArtifactsReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.SourceArtifactsReadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.SourceArtifactsReadTable,
			Columns: []string{artifactmetrics.SourceArtifactsReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.OutputArtifactsSeenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsSeenTable,
			Columns: []string{artifactmetrics.OutputArtifactsSeenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedOutputArtifactsSeenIDs(); len(nodes) > 0 && !amu.mutation.OutputArtifactsSeenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsSeenTable,
			Columns: []string{artifactmetrics.OutputArtifactsSeenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.OutputArtifactsSeenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsSeenTable,
			Columns: []string{artifactmetrics.OutputArtifactsSeenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.OutputArtifactsFromActionCacheCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsFromActionCacheTable,
			Columns: []string{artifactmetrics.OutputArtifactsFromActionCacheColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedOutputArtifactsFromActionCacheIDs(); len(nodes) > 0 && !amu.mutation.OutputArtifactsFromActionCacheCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsFromActionCacheTable,
			Columns: []string{artifactmetrics.OutputArtifactsFromActionCacheColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.OutputArtifactsFromActionCacheIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsFromActionCacheTable,
			Columns: []string{artifactmetrics.OutputArtifactsFromActionCacheColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.TopLevelArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artifactmetrics.TopLevelArtifactsTable,
			Columns: artifactmetrics.TopLevelArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedTopLevelArtifactsIDs(); len(nodes) > 0 && !amu.mutation.TopLevelArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artifactmetrics.TopLevelArtifactsTable,
			Columns: artifactmetrics.TopLevelArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.TopLevelArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artifactmetrics.TopLevelArtifactsTable,
			Columns: artifactmetrics.TopLevelArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifactmetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	amu.mutation.done = true
	return n, nil
}

// ArtifactMetricsUpdateOne is the builder for updating a single ArtifactMetrics entity.
type ArtifactMetricsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtifactMetricsMutation
}

// AddMetricIDs adds the "metrics" edge to the Metrics entity by IDs.
func (amuo *ArtifactMetricsUpdateOne) AddMetricIDs(ids ...int) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddMetricIDs(ids...)
	return amuo
}

// AddMetrics adds the "metrics" edges to the Metrics entity.
func (amuo *ArtifactMetricsUpdateOne) AddMetrics(m ...*Metrics) *ArtifactMetricsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return amuo.AddMetricIDs(ids...)
}

// AddSourceArtifactsReadIDs adds the "source_artifacts_read" edge to the FilesMetric entity by IDs.
func (amuo *ArtifactMetricsUpdateOne) AddSourceArtifactsReadIDs(ids ...int) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddSourceArtifactsReadIDs(ids...)
	return amuo
}

// AddSourceArtifactsRead adds the "source_artifacts_read" edges to the FilesMetric entity.
func (amuo *ArtifactMetricsUpdateOne) AddSourceArtifactsRead(f ...*FilesMetric) *ArtifactMetricsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amuo.AddSourceArtifactsReadIDs(ids...)
}

// AddOutputArtifactsSeenIDs adds the "output_artifacts_seen" edge to the FilesMetric entity by IDs.
func (amuo *ArtifactMetricsUpdateOne) AddOutputArtifactsSeenIDs(ids ...int) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddOutputArtifactsSeenIDs(ids...)
	return amuo
}

// AddOutputArtifactsSeen adds the "output_artifacts_seen" edges to the FilesMetric entity.
func (amuo *ArtifactMetricsUpdateOne) AddOutputArtifactsSeen(f ...*FilesMetric) *ArtifactMetricsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amuo.AddOutputArtifactsSeenIDs(ids...)
}

// AddOutputArtifactsFromActionCacheIDs adds the "output_artifacts_from_action_cache" edge to the FilesMetric entity by IDs.
func (amuo *ArtifactMetricsUpdateOne) AddOutputArtifactsFromActionCacheIDs(ids ...int) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddOutputArtifactsFromActionCacheIDs(ids...)
	return amuo
}

// AddOutputArtifactsFromActionCache adds the "output_artifacts_from_action_cache" edges to the FilesMetric entity.
func (amuo *ArtifactMetricsUpdateOne) AddOutputArtifactsFromActionCache(f ...*FilesMetric) *ArtifactMetricsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amuo.AddOutputArtifactsFromActionCacheIDs(ids...)
}

// AddTopLevelArtifactIDs adds the "top_level_artifacts" edge to the FilesMetric entity by IDs.
func (amuo *ArtifactMetricsUpdateOne) AddTopLevelArtifactIDs(ids ...int) *ArtifactMetricsUpdateOne {
	amuo.mutation.AddTopLevelArtifactIDs(ids...)
	return amuo
}

// AddTopLevelArtifacts adds the "top_level_artifacts" edges to the FilesMetric entity.
func (amuo *ArtifactMetricsUpdateOne) AddTopLevelArtifacts(f ...*FilesMetric) *ArtifactMetricsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amuo.AddTopLevelArtifactIDs(ids...)
}

// Mutation returns the ArtifactMetricsMutation object of the builder.
func (amuo *ArtifactMetricsUpdateOne) Mutation() *ArtifactMetricsMutation {
	return amuo.mutation
}

// ClearMetrics clears all "metrics" edges to the Metrics entity.
func (amuo *ArtifactMetricsUpdateOne) ClearMetrics() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearMetrics()
	return amuo
}

// RemoveMetricIDs removes the "metrics" edge to Metrics entities by IDs.
func (amuo *ArtifactMetricsUpdateOne) RemoveMetricIDs(ids ...int) *ArtifactMetricsUpdateOne {
	amuo.mutation.RemoveMetricIDs(ids...)
	return amuo
}

// RemoveMetrics removes "metrics" edges to Metrics entities.
func (amuo *ArtifactMetricsUpdateOne) RemoveMetrics(m ...*Metrics) *ArtifactMetricsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return amuo.RemoveMetricIDs(ids...)
}

// ClearSourceArtifactsRead clears all "source_artifacts_read" edges to the FilesMetric entity.
func (amuo *ArtifactMetricsUpdateOne) ClearSourceArtifactsRead() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearSourceArtifactsRead()
	return amuo
}

// RemoveSourceArtifactsReadIDs removes the "source_artifacts_read" edge to FilesMetric entities by IDs.
func (amuo *ArtifactMetricsUpdateOne) RemoveSourceArtifactsReadIDs(ids ...int) *ArtifactMetricsUpdateOne {
	amuo.mutation.RemoveSourceArtifactsReadIDs(ids...)
	return amuo
}

// RemoveSourceArtifactsRead removes "source_artifacts_read" edges to FilesMetric entities.
func (amuo *ArtifactMetricsUpdateOne) RemoveSourceArtifactsRead(f ...*FilesMetric) *ArtifactMetricsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amuo.RemoveSourceArtifactsReadIDs(ids...)
}

// ClearOutputArtifactsSeen clears all "output_artifacts_seen" edges to the FilesMetric entity.
func (amuo *ArtifactMetricsUpdateOne) ClearOutputArtifactsSeen() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearOutputArtifactsSeen()
	return amuo
}

// RemoveOutputArtifactsSeenIDs removes the "output_artifacts_seen" edge to FilesMetric entities by IDs.
func (amuo *ArtifactMetricsUpdateOne) RemoveOutputArtifactsSeenIDs(ids ...int) *ArtifactMetricsUpdateOne {
	amuo.mutation.RemoveOutputArtifactsSeenIDs(ids...)
	return amuo
}

// RemoveOutputArtifactsSeen removes "output_artifacts_seen" edges to FilesMetric entities.
func (amuo *ArtifactMetricsUpdateOne) RemoveOutputArtifactsSeen(f ...*FilesMetric) *ArtifactMetricsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amuo.RemoveOutputArtifactsSeenIDs(ids...)
}

// ClearOutputArtifactsFromActionCache clears all "output_artifacts_from_action_cache" edges to the FilesMetric entity.
func (amuo *ArtifactMetricsUpdateOne) ClearOutputArtifactsFromActionCache() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearOutputArtifactsFromActionCache()
	return amuo
}

// RemoveOutputArtifactsFromActionCacheIDs removes the "output_artifacts_from_action_cache" edge to FilesMetric entities by IDs.
func (amuo *ArtifactMetricsUpdateOne) RemoveOutputArtifactsFromActionCacheIDs(ids ...int) *ArtifactMetricsUpdateOne {
	amuo.mutation.RemoveOutputArtifactsFromActionCacheIDs(ids...)
	return amuo
}

// RemoveOutputArtifactsFromActionCache removes "output_artifacts_from_action_cache" edges to FilesMetric entities.
func (amuo *ArtifactMetricsUpdateOne) RemoveOutputArtifactsFromActionCache(f ...*FilesMetric) *ArtifactMetricsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amuo.RemoveOutputArtifactsFromActionCacheIDs(ids...)
}

// ClearTopLevelArtifacts clears all "top_level_artifacts" edges to the FilesMetric entity.
func (amuo *ArtifactMetricsUpdateOne) ClearTopLevelArtifacts() *ArtifactMetricsUpdateOne {
	amuo.mutation.ClearTopLevelArtifacts()
	return amuo
}

// RemoveTopLevelArtifactIDs removes the "top_level_artifacts" edge to FilesMetric entities by IDs.
func (amuo *ArtifactMetricsUpdateOne) RemoveTopLevelArtifactIDs(ids ...int) *ArtifactMetricsUpdateOne {
	amuo.mutation.RemoveTopLevelArtifactIDs(ids...)
	return amuo
}

// RemoveTopLevelArtifacts removes "top_level_artifacts" edges to FilesMetric entities.
func (amuo *ArtifactMetricsUpdateOne) RemoveTopLevelArtifacts(f ...*FilesMetric) *ArtifactMetricsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return amuo.RemoveTopLevelArtifactIDs(ids...)
}

// Where appends a list predicates to the ArtifactMetricsUpdate builder.
func (amuo *ArtifactMetricsUpdateOne) Where(ps ...predicate.ArtifactMetrics) *ArtifactMetricsUpdateOne {
	amuo.mutation.Where(ps...)
	return amuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *ArtifactMetricsUpdateOne) Select(field string, fields ...string) *ArtifactMetricsUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated ArtifactMetrics entity.
func (amuo *ArtifactMetricsUpdateOne) Save(ctx context.Context) (*ArtifactMetrics, error) {
	return withHooks(ctx, amuo.sqlSave, amuo.mutation, amuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *ArtifactMetricsUpdateOne) SaveX(ctx context.Context) *ArtifactMetrics {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *ArtifactMetricsUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *ArtifactMetricsUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (amuo *ArtifactMetricsUpdateOne) sqlSave(ctx context.Context) (_node *ArtifactMetrics, err error) {
	_spec := sqlgraph.NewUpdateSpec(artifactmetrics.Table, artifactmetrics.Columns, sqlgraph.NewFieldSpec(artifactmetrics.FieldID, field.TypeInt))
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ArtifactMetrics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artifactmetrics.FieldID)
		for _, f := range fields {
			if !artifactmetrics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != artifactmetrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if amuo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifactmetrics.MetricsTable,
			Columns: artifactmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedMetricsIDs(); len(nodes) > 0 && !amuo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifactmetrics.MetricsTable,
			Columns: artifactmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artifactmetrics.MetricsTable,
			Columns: artifactmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.SourceArtifactsReadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.SourceArtifactsReadTable,
			Columns: []string{artifactmetrics.SourceArtifactsReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedSourceArtifactsReadIDs(); len(nodes) > 0 && !amuo.mutation.SourceArtifactsReadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.SourceArtifactsReadTable,
			Columns: []string{artifactmetrics.SourceArtifactsReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.SourceArtifactsReadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.SourceArtifactsReadTable,
			Columns: []string{artifactmetrics.SourceArtifactsReadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.OutputArtifactsSeenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsSeenTable,
			Columns: []string{artifactmetrics.OutputArtifactsSeenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedOutputArtifactsSeenIDs(); len(nodes) > 0 && !amuo.mutation.OutputArtifactsSeenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsSeenTable,
			Columns: []string{artifactmetrics.OutputArtifactsSeenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.OutputArtifactsSeenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsSeenTable,
			Columns: []string{artifactmetrics.OutputArtifactsSeenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.OutputArtifactsFromActionCacheCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsFromActionCacheTable,
			Columns: []string{artifactmetrics.OutputArtifactsFromActionCacheColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedOutputArtifactsFromActionCacheIDs(); len(nodes) > 0 && !amuo.mutation.OutputArtifactsFromActionCacheCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsFromActionCacheTable,
			Columns: []string{artifactmetrics.OutputArtifactsFromActionCacheColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.OutputArtifactsFromActionCacheIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifactmetrics.OutputArtifactsFromActionCacheTable,
			Columns: []string{artifactmetrics.OutputArtifactsFromActionCacheColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.TopLevelArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artifactmetrics.TopLevelArtifactsTable,
			Columns: artifactmetrics.TopLevelArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedTopLevelArtifactsIDs(); len(nodes) > 0 && !amuo.mutation.TopLevelArtifactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artifactmetrics.TopLevelArtifactsTable,
			Columns: artifactmetrics.TopLevelArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.TopLevelArtifactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artifactmetrics.TopLevelArtifactsTable,
			Columns: artifactmetrics.TopLevelArtifactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filesmetric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArtifactMetrics{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifactmetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	amuo.mutation.done = true
	return _node, nil
}
