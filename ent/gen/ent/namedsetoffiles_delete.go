// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/namedsetoffiles"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// NamedSetOfFilesDelete is the builder for deleting a NamedSetOfFiles entity.
type NamedSetOfFilesDelete struct {
	config
	hooks    []Hook
	mutation *NamedSetOfFilesMutation
}

// Where appends a list predicates to the NamedSetOfFilesDelete builder.
func (nsofd *NamedSetOfFilesDelete) Where(ps ...predicate.NamedSetOfFiles) *NamedSetOfFilesDelete {
	nsofd.mutation.Where(ps...)
	return nsofd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nsofd *NamedSetOfFilesDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nsofd.sqlExec, nsofd.mutation, nsofd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nsofd *NamedSetOfFilesDelete) ExecX(ctx context.Context) int {
	n, err := nsofd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nsofd *NamedSetOfFilesDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(namedsetoffiles.Table, sqlgraph.NewFieldSpec(namedsetoffiles.FieldID, field.TypeInt))
	if ps := nsofd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nsofd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nsofd.mutation.done = true
	return affected, err
}

// NamedSetOfFilesDeleteOne is the builder for deleting a single NamedSetOfFiles entity.
type NamedSetOfFilesDeleteOne struct {
	nsofd *NamedSetOfFilesDelete
}

// Where appends a list predicates to the NamedSetOfFilesDelete builder.
func (nsofdo *NamedSetOfFilesDeleteOne) Where(ps ...predicate.NamedSetOfFiles) *NamedSetOfFilesDeleteOne {
	nsofdo.nsofd.mutation.Where(ps...)
	return nsofdo
}

// Exec executes the deletion query.
func (nsofdo *NamedSetOfFilesDeleteOne) Exec(ctx context.Context) error {
	n, err := nsofdo.nsofd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{namedsetoffiles.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nsofdo *NamedSetOfFilesDeleteOne) ExecX(ctx context.Context) {
	if err := nsofdo.Exec(ctx); err != nil {
		panic(err)
	}
}
