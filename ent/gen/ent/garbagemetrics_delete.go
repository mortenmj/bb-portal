// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/garbagemetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// GarbageMetricsDelete is the builder for deleting a GarbageMetrics entity.
type GarbageMetricsDelete struct {
	config
	hooks    []Hook
	mutation *GarbageMetricsMutation
}

// Where appends a list predicates to the GarbageMetricsDelete builder.
func (gmd *GarbageMetricsDelete) Where(ps ...predicate.GarbageMetrics) *GarbageMetricsDelete {
	gmd.mutation.Where(ps...)
	return gmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gmd *GarbageMetricsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gmd.sqlExec, gmd.mutation, gmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gmd *GarbageMetricsDelete) ExecX(ctx context.Context) int {
	n, err := gmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gmd *GarbageMetricsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(garbagemetrics.Table, sqlgraph.NewFieldSpec(garbagemetrics.FieldID, field.TypeInt))
	if ps := gmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gmd.mutation.done = true
	return affected, err
}

// GarbageMetricsDeleteOne is the builder for deleting a single GarbageMetrics entity.
type GarbageMetricsDeleteOne struct {
	gmd *GarbageMetricsDelete
}

// Where appends a list predicates to the GarbageMetricsDelete builder.
func (gmdo *GarbageMetricsDeleteOne) Where(ps ...predicate.GarbageMetrics) *GarbageMetricsDeleteOne {
	gmdo.gmd.mutation.Where(ps...)
	return gmdo
}

// Exec executes the deletion query.
func (gmdo *GarbageMetricsDeleteOne) Exec(ctx context.Context) error {
	n, err := gmdo.gmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{garbagemetrics.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gmdo *GarbageMetricsDeleteOne) ExecX(ctx context.Context) {
	if err := gmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
