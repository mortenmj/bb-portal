// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/buildbarn/bb-portal/ent/gen/ent/artifactmetrics"
)

// ArtifactMetrics is the model entity for the ArtifactMetrics schema.
type ArtifactMetrics struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArtifactMetricsQuery when eager-loading is set.
	Edges        ArtifactMetricsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ArtifactMetricsEdges holds the relations/edges for other nodes in the graph.
type ArtifactMetricsEdges struct {
	// Metrics holds the value of the metrics edge.
	Metrics []*Metrics `json:"metrics,omitempty"`
	// SourceArtifactsRead holds the value of the source_artifacts_read edge.
	SourceArtifactsRead []*FilesMetric `json:"source_artifacts_read,omitempty"`
	// OutputArtifactsSeen holds the value of the output_artifacts_seen edge.
	OutputArtifactsSeen []*FilesMetric `json:"output_artifacts_seen,omitempty"`
	// OutputArtifactsFromActionCache holds the value of the output_artifacts_from_action_cache edge.
	OutputArtifactsFromActionCache []*FilesMetric `json:"output_artifacts_from_action_cache,omitempty"`
	// TopLevelArtifacts holds the value of the top_level_artifacts edge.
	TopLevelArtifacts []*FilesMetric `json:"top_level_artifacts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedMetrics                        map[string][]*Metrics
	namedSourceArtifactsRead            map[string][]*FilesMetric
	namedOutputArtifactsSeen            map[string][]*FilesMetric
	namedOutputArtifactsFromActionCache map[string][]*FilesMetric
	namedTopLevelArtifacts              map[string][]*FilesMetric
}

// MetricsOrErr returns the Metrics value or an error if the edge
// was not loaded in eager-loading.
func (e ArtifactMetricsEdges) MetricsOrErr() ([]*Metrics, error) {
	if e.loadedTypes[0] {
		return e.Metrics, nil
	}
	return nil, &NotLoadedError{edge: "metrics"}
}

// SourceArtifactsReadOrErr returns the SourceArtifactsRead value or an error if the edge
// was not loaded in eager-loading.
func (e ArtifactMetricsEdges) SourceArtifactsReadOrErr() ([]*FilesMetric, error) {
	if e.loadedTypes[1] {
		return e.SourceArtifactsRead, nil
	}
	return nil, &NotLoadedError{edge: "source_artifacts_read"}
}

// OutputArtifactsSeenOrErr returns the OutputArtifactsSeen value or an error if the edge
// was not loaded in eager-loading.
func (e ArtifactMetricsEdges) OutputArtifactsSeenOrErr() ([]*FilesMetric, error) {
	if e.loadedTypes[2] {
		return e.OutputArtifactsSeen, nil
	}
	return nil, &NotLoadedError{edge: "output_artifacts_seen"}
}

// OutputArtifactsFromActionCacheOrErr returns the OutputArtifactsFromActionCache value or an error if the edge
// was not loaded in eager-loading.
func (e ArtifactMetricsEdges) OutputArtifactsFromActionCacheOrErr() ([]*FilesMetric, error) {
	if e.loadedTypes[3] {
		return e.OutputArtifactsFromActionCache, nil
	}
	return nil, &NotLoadedError{edge: "output_artifacts_from_action_cache"}
}

// TopLevelArtifactsOrErr returns the TopLevelArtifacts value or an error if the edge
// was not loaded in eager-loading.
func (e ArtifactMetricsEdges) TopLevelArtifactsOrErr() ([]*FilesMetric, error) {
	if e.loadedTypes[4] {
		return e.TopLevelArtifacts, nil
	}
	return nil, &NotLoadedError{edge: "top_level_artifacts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ArtifactMetrics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case artifactmetrics.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ArtifactMetrics fields.
func (am *ArtifactMetrics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case artifactmetrics.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			am.ID = int(value.Int64)
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ArtifactMetrics.
// This includes values selected through modifiers, order, etc.
func (am *ArtifactMetrics) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// QueryMetrics queries the "metrics" edge of the ArtifactMetrics entity.
func (am *ArtifactMetrics) QueryMetrics() *MetricsQuery {
	return NewArtifactMetricsClient(am.config).QueryMetrics(am)
}

// QuerySourceArtifactsRead queries the "source_artifacts_read" edge of the ArtifactMetrics entity.
func (am *ArtifactMetrics) QuerySourceArtifactsRead() *FilesMetricQuery {
	return NewArtifactMetricsClient(am.config).QuerySourceArtifactsRead(am)
}

// QueryOutputArtifactsSeen queries the "output_artifacts_seen" edge of the ArtifactMetrics entity.
func (am *ArtifactMetrics) QueryOutputArtifactsSeen() *FilesMetricQuery {
	return NewArtifactMetricsClient(am.config).QueryOutputArtifactsSeen(am)
}

// QueryOutputArtifactsFromActionCache queries the "output_artifacts_from_action_cache" edge of the ArtifactMetrics entity.
func (am *ArtifactMetrics) QueryOutputArtifactsFromActionCache() *FilesMetricQuery {
	return NewArtifactMetricsClient(am.config).QueryOutputArtifactsFromActionCache(am)
}

// QueryTopLevelArtifacts queries the "top_level_artifacts" edge of the ArtifactMetrics entity.
func (am *ArtifactMetrics) QueryTopLevelArtifacts() *FilesMetricQuery {
	return NewArtifactMetricsClient(am.config).QueryTopLevelArtifacts(am)
}

// Update returns a builder for updating this ArtifactMetrics.
// Note that you need to call ArtifactMetrics.Unwrap() before calling this method if this ArtifactMetrics
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *ArtifactMetrics) Update() *ArtifactMetricsUpdateOne {
	return NewArtifactMetricsClient(am.config).UpdateOne(am)
}

// Unwrap unwraps the ArtifactMetrics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *ArtifactMetrics) Unwrap() *ArtifactMetrics {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: ArtifactMetrics is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *ArtifactMetrics) String() string {
	var builder strings.Builder
	builder.WriteString("ArtifactMetrics(")
	builder.WriteString(fmt.Sprintf("id=%v", am.ID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedMetrics returns the Metrics named value or an error if the edge was not
// loaded in eager-loading with this name.
func (am *ArtifactMetrics) NamedMetrics(name string) ([]*Metrics, error) {
	if am.Edges.namedMetrics == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := am.Edges.namedMetrics[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (am *ArtifactMetrics) appendNamedMetrics(name string, edges ...*Metrics) {
	if am.Edges.namedMetrics == nil {
		am.Edges.namedMetrics = make(map[string][]*Metrics)
	}
	if len(edges) == 0 {
		am.Edges.namedMetrics[name] = []*Metrics{}
	} else {
		am.Edges.namedMetrics[name] = append(am.Edges.namedMetrics[name], edges...)
	}
}

// NamedSourceArtifactsRead returns the SourceArtifactsRead named value or an error if the edge was not
// loaded in eager-loading with this name.
func (am *ArtifactMetrics) NamedSourceArtifactsRead(name string) ([]*FilesMetric, error) {
	if am.Edges.namedSourceArtifactsRead == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := am.Edges.namedSourceArtifactsRead[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (am *ArtifactMetrics) appendNamedSourceArtifactsRead(name string, edges ...*FilesMetric) {
	if am.Edges.namedSourceArtifactsRead == nil {
		am.Edges.namedSourceArtifactsRead = make(map[string][]*FilesMetric)
	}
	if len(edges) == 0 {
		am.Edges.namedSourceArtifactsRead[name] = []*FilesMetric{}
	} else {
		am.Edges.namedSourceArtifactsRead[name] = append(am.Edges.namedSourceArtifactsRead[name], edges...)
	}
}

// NamedOutputArtifactsSeen returns the OutputArtifactsSeen named value or an error if the edge was not
// loaded in eager-loading with this name.
func (am *ArtifactMetrics) NamedOutputArtifactsSeen(name string) ([]*FilesMetric, error) {
	if am.Edges.namedOutputArtifactsSeen == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := am.Edges.namedOutputArtifactsSeen[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (am *ArtifactMetrics) appendNamedOutputArtifactsSeen(name string, edges ...*FilesMetric) {
	if am.Edges.namedOutputArtifactsSeen == nil {
		am.Edges.namedOutputArtifactsSeen = make(map[string][]*FilesMetric)
	}
	if len(edges) == 0 {
		am.Edges.namedOutputArtifactsSeen[name] = []*FilesMetric{}
	} else {
		am.Edges.namedOutputArtifactsSeen[name] = append(am.Edges.namedOutputArtifactsSeen[name], edges...)
	}
}

// NamedOutputArtifactsFromActionCache returns the OutputArtifactsFromActionCache named value or an error if the edge was not
// loaded in eager-loading with this name.
func (am *ArtifactMetrics) NamedOutputArtifactsFromActionCache(name string) ([]*FilesMetric, error) {
	if am.Edges.namedOutputArtifactsFromActionCache == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := am.Edges.namedOutputArtifactsFromActionCache[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (am *ArtifactMetrics) appendNamedOutputArtifactsFromActionCache(name string, edges ...*FilesMetric) {
	if am.Edges.namedOutputArtifactsFromActionCache == nil {
		am.Edges.namedOutputArtifactsFromActionCache = make(map[string][]*FilesMetric)
	}
	if len(edges) == 0 {
		am.Edges.namedOutputArtifactsFromActionCache[name] = []*FilesMetric{}
	} else {
		am.Edges.namedOutputArtifactsFromActionCache[name] = append(am.Edges.namedOutputArtifactsFromActionCache[name], edges...)
	}
}

// NamedTopLevelArtifacts returns the TopLevelArtifacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (am *ArtifactMetrics) NamedTopLevelArtifacts(name string) ([]*FilesMetric, error) {
	if am.Edges.namedTopLevelArtifacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := am.Edges.namedTopLevelArtifacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (am *ArtifactMetrics) appendNamedTopLevelArtifacts(name string, edges ...*FilesMetric) {
	if am.Edges.namedTopLevelArtifacts == nil {
		am.Edges.namedTopLevelArtifacts = make(map[string][]*FilesMetric)
	}
	if len(edges) == 0 {
		am.Edges.namedTopLevelArtifacts[name] = []*FilesMetric{}
	} else {
		am.Edges.namedTopLevelArtifacts[name] = append(am.Edges.namedTopLevelArtifacts[name], edges...)
	}
}

// ArtifactMetricsSlice is a parsable slice of ArtifactMetrics.
type ArtifactMetricsSlice []*ArtifactMetrics
