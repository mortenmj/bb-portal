// Code generated by ent, DO NOT EDIT.

package testcollection

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the testcollection type in the database.
	Label = "test_collection"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// EdgeBazelInvocation holds the string denoting the bazel_invocation edge name in mutations.
	EdgeBazelInvocation = "bazel_invocation"
	// EdgeTestSummary holds the string denoting the test_summary edge name in mutations.
	EdgeTestSummary = "test_summary"
	// EdgeTestResults holds the string denoting the test_results edge name in mutations.
	EdgeTestResults = "test_results"
	// Table holds the table name of the testcollection in the database.
	Table = "test_collections"
	// BazelInvocationTable is the table that holds the bazel_invocation relation/edge. The primary key declared below.
	BazelInvocationTable = "bazel_invocation_test_collection"
	// BazelInvocationInverseTable is the table name for the BazelInvocation entity.
	// It exists in this package in order to avoid circular dependency with the "bazelinvocation" package.
	BazelInvocationInverseTable = "bazel_invocations"
	// TestSummaryTable is the table that holds the test_summary relation/edge.
	TestSummaryTable = "test_collections"
	// TestSummaryInverseTable is the table name for the TestSummary entity.
	// It exists in this package in order to avoid circular dependency with the "testsummary" package.
	TestSummaryInverseTable = "test_summaries"
	// TestSummaryColumn is the table column denoting the test_summary relation/edge.
	TestSummaryColumn = "test_collection_test_summary"
	// TestResultsTable is the table that holds the test_results relation/edge.
	TestResultsTable = "test_result_be_ss"
	// TestResultsInverseTable is the table name for the TestResultBES entity.
	// It exists in this package in order to avoid circular dependency with the "testresultbes" package.
	TestResultsInverseTable = "test_result_be_ss"
	// TestResultsColumn is the table column denoting the test_results relation/edge.
	TestResultsColumn = "test_collection_test_results"
)

// Columns holds all SQL columns for testcollection fields.
var Columns = []string{
	FieldID,
	FieldLabel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "test_collections"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"test_collection_test_summary",
}

var (
	// BazelInvocationPrimaryKey and BazelInvocationColumn2 are the table columns denoting the
	// primary key for the bazel_invocation relation (M2M).
	BazelInvocationPrimaryKey = []string{"bazel_invocation_id", "test_collection_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TestCollection queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByBazelInvocationCount orders the results by bazel_invocation count.
func ByBazelInvocationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBazelInvocationStep(), opts...)
	}
}

// ByBazelInvocation orders the results by bazel_invocation terms.
func ByBazelInvocation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBazelInvocationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTestSummaryField orders the results by test_summary field.
func ByTestSummaryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestSummaryStep(), sql.OrderByField(field, opts...))
	}
}

// ByTestResultsCount orders the results by test_results count.
func ByTestResultsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestResultsStep(), opts...)
	}
}

// ByTestResults orders the results by test_results terms.
func ByTestResults(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestResultsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBazelInvocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BazelInvocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, BazelInvocationTable, BazelInvocationPrimaryKey...),
	)
}
func newTestSummaryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestSummaryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TestSummaryTable, TestSummaryColumn),
	)
}
func newTestResultsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestResultsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TestResultsTable, TestResultsColumn),
	)
}
