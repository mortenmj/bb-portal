// Code generated by ent, DO NOT EDIT.

package testcollection

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldLTE(FieldID, id))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelIsNil applies the IsNil predicate on the "label" field.
func LabelIsNil() predicate.TestCollection {
	return predicate.TestCollection(sql.FieldIsNull(FieldLabel))
}

// LabelNotNil applies the NotNil predicate on the "label" field.
func LabelNotNil() predicate.TestCollection {
	return predicate.TestCollection(sql.FieldNotNull(FieldLabel))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.TestCollection {
	return predicate.TestCollection(sql.FieldContainsFold(FieldLabel, v))
}

// HasBazelInvocation applies the HasEdge predicate on the "bazel_invocation" edge.
func HasBazelInvocation() predicate.TestCollection {
	return predicate.TestCollection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BazelInvocationTable, BazelInvocationPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBazelInvocationWith applies the HasEdge predicate on the "bazel_invocation" edge with a given conditions (other predicates).
func HasBazelInvocationWith(preds ...predicate.BazelInvocation) predicate.TestCollection {
	return predicate.TestCollection(func(s *sql.Selector) {
		step := newBazelInvocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestSummary applies the HasEdge predicate on the "test_summary" edge.
func HasTestSummary() predicate.TestCollection {
	return predicate.TestCollection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TestSummaryTable, TestSummaryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestSummaryWith applies the HasEdge predicate on the "test_summary" edge with a given conditions (other predicates).
func HasTestSummaryWith(preds ...predicate.TestSummary) predicate.TestCollection {
	return predicate.TestCollection(func(s *sql.Selector) {
		step := newTestSummaryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestResults applies the HasEdge predicate on the "test_results" edge.
func HasTestResults() predicate.TestCollection {
	return predicate.TestCollection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TestResultsTable, TestResultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestResultsWith applies the HasEdge predicate on the "test_results" edge with a given conditions (other predicates).
func HasTestResultsWith(preds ...predicate.TestResultBES) predicate.TestCollection {
	return predicate.TestCollection(func(s *sql.Selector) {
		step := newTestResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestCollection) predicate.TestCollection {
	return predicate.TestCollection(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestCollection) predicate.TestCollection {
	return predicate.TestCollection(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestCollection) predicate.TestCollection {
	return predicate.TestCollection(sql.NotPredicates(p))
}
