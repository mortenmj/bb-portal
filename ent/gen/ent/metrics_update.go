// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/actionsummary"
	"github.com/buildbarn/bb-portal/ent/gen/ent/artifactmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/cumulativemetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/dynamicexecutionmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/memorymetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/networkmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/packagemetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
	"github.com/buildbarn/bb-portal/ent/gen/ent/targetmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/timingmetrics"
)

// MetricsUpdate is the builder for updating Metrics entities.
type MetricsUpdate struct {
	config
	hooks    []Hook
	mutation *MetricsMutation
}

// Where appends a list predicates to the MetricsUpdate builder.
func (mu *MetricsUpdate) Where(ps ...predicate.Metrics) *MetricsUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (mu *MetricsUpdate) SetBazelInvocationID(id int) *MetricsUpdate {
	mu.mutation.SetBazelInvocationID(id)
	return mu
}

// SetNillableBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID if the given value is not nil.
func (mu *MetricsUpdate) SetNillableBazelInvocationID(id *int) *MetricsUpdate {
	if id != nil {
		mu = mu.SetBazelInvocationID(*id)
	}
	return mu
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (mu *MetricsUpdate) SetBazelInvocation(b *BazelInvocation) *MetricsUpdate {
	return mu.SetBazelInvocationID(b.ID)
}

// AddActionSummaryIDs adds the "action_summary" edge to the ActionSummary entity by IDs.
func (mu *MetricsUpdate) AddActionSummaryIDs(ids ...int) *MetricsUpdate {
	mu.mutation.AddActionSummaryIDs(ids...)
	return mu
}

// AddActionSummary adds the "action_summary" edges to the ActionSummary entity.
func (mu *MetricsUpdate) AddActionSummary(a ...*ActionSummary) *MetricsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.AddActionSummaryIDs(ids...)
}

// AddMemoryMetricIDs adds the "memory_metrics" edge to the MemoryMetrics entity by IDs.
func (mu *MetricsUpdate) AddMemoryMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.AddMemoryMetricIDs(ids...)
	return mu
}

// AddMemoryMetrics adds the "memory_metrics" edges to the MemoryMetrics entity.
func (mu *MetricsUpdate) AddMemoryMetrics(m ...*MemoryMetrics) *MetricsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMemoryMetricIDs(ids...)
}

// AddTargetMetricIDs adds the "target_metrics" edge to the TargetMetrics entity by IDs.
func (mu *MetricsUpdate) AddTargetMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.AddTargetMetricIDs(ids...)
	return mu
}

// AddTargetMetrics adds the "target_metrics" edges to the TargetMetrics entity.
func (mu *MetricsUpdate) AddTargetMetrics(t ...*TargetMetrics) *MetricsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddTargetMetricIDs(ids...)
}

// AddPackageMetricIDs adds the "package_metrics" edge to the PackageMetrics entity by IDs.
func (mu *MetricsUpdate) AddPackageMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.AddPackageMetricIDs(ids...)
	return mu
}

// AddPackageMetrics adds the "package_metrics" edges to the PackageMetrics entity.
func (mu *MetricsUpdate) AddPackageMetrics(p ...*PackageMetrics) *MetricsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddPackageMetricIDs(ids...)
}

// AddTimingMetricIDs adds the "timing_metrics" edge to the TimingMetrics entity by IDs.
func (mu *MetricsUpdate) AddTimingMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.AddTimingMetricIDs(ids...)
	return mu
}

// AddTimingMetrics adds the "timing_metrics" edges to the TimingMetrics entity.
func (mu *MetricsUpdate) AddTimingMetrics(t ...*TimingMetrics) *MetricsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddTimingMetricIDs(ids...)
}

// AddCumulativeMetricIDs adds the "cumulative_metrics" edge to the CumulativeMetrics entity by IDs.
func (mu *MetricsUpdate) AddCumulativeMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.AddCumulativeMetricIDs(ids...)
	return mu
}

// AddCumulativeMetrics adds the "cumulative_metrics" edges to the CumulativeMetrics entity.
func (mu *MetricsUpdate) AddCumulativeMetrics(c ...*CumulativeMetrics) *MetricsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddCumulativeMetricIDs(ids...)
}

// AddArtifactMetricIDs adds the "artifact_metrics" edge to the ArtifactMetrics entity by IDs.
func (mu *MetricsUpdate) AddArtifactMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.AddArtifactMetricIDs(ids...)
	return mu
}

// AddArtifactMetrics adds the "artifact_metrics" edges to the ArtifactMetrics entity.
func (mu *MetricsUpdate) AddArtifactMetrics(a ...*ArtifactMetrics) *MetricsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.AddArtifactMetricIDs(ids...)
}

// AddNetworkMetricIDs adds the "network_metrics" edge to the NetworkMetrics entity by IDs.
func (mu *MetricsUpdate) AddNetworkMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.AddNetworkMetricIDs(ids...)
	return mu
}

// AddNetworkMetrics adds the "network_metrics" edges to the NetworkMetrics entity.
func (mu *MetricsUpdate) AddNetworkMetrics(n ...*NetworkMetrics) *MetricsUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mu.AddNetworkMetricIDs(ids...)
}

// AddDynamicExecutionMetricIDs adds the "dynamic_execution_metrics" edge to the DynamicExecutionMetrics entity by IDs.
func (mu *MetricsUpdate) AddDynamicExecutionMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.AddDynamicExecutionMetricIDs(ids...)
	return mu
}

// AddDynamicExecutionMetrics adds the "dynamic_execution_metrics" edges to the DynamicExecutionMetrics entity.
func (mu *MetricsUpdate) AddDynamicExecutionMetrics(d ...*DynamicExecutionMetrics) *MetricsUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return mu.AddDynamicExecutionMetricIDs(ids...)
}

// Mutation returns the MetricsMutation object of the builder.
func (mu *MetricsUpdate) Mutation() *MetricsMutation {
	return mu.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (mu *MetricsUpdate) ClearBazelInvocation() *MetricsUpdate {
	mu.mutation.ClearBazelInvocation()
	return mu
}

// ClearActionSummary clears all "action_summary" edges to the ActionSummary entity.
func (mu *MetricsUpdate) ClearActionSummary() *MetricsUpdate {
	mu.mutation.ClearActionSummary()
	return mu
}

// RemoveActionSummaryIDs removes the "action_summary" edge to ActionSummary entities by IDs.
func (mu *MetricsUpdate) RemoveActionSummaryIDs(ids ...int) *MetricsUpdate {
	mu.mutation.RemoveActionSummaryIDs(ids...)
	return mu
}

// RemoveActionSummary removes "action_summary" edges to ActionSummary entities.
func (mu *MetricsUpdate) RemoveActionSummary(a ...*ActionSummary) *MetricsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.RemoveActionSummaryIDs(ids...)
}

// ClearMemoryMetrics clears all "memory_metrics" edges to the MemoryMetrics entity.
func (mu *MetricsUpdate) ClearMemoryMetrics() *MetricsUpdate {
	mu.mutation.ClearMemoryMetrics()
	return mu
}

// RemoveMemoryMetricIDs removes the "memory_metrics" edge to MemoryMetrics entities by IDs.
func (mu *MetricsUpdate) RemoveMemoryMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.RemoveMemoryMetricIDs(ids...)
	return mu
}

// RemoveMemoryMetrics removes "memory_metrics" edges to MemoryMetrics entities.
func (mu *MetricsUpdate) RemoveMemoryMetrics(m ...*MemoryMetrics) *MetricsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMemoryMetricIDs(ids...)
}

// ClearTargetMetrics clears all "target_metrics" edges to the TargetMetrics entity.
func (mu *MetricsUpdate) ClearTargetMetrics() *MetricsUpdate {
	mu.mutation.ClearTargetMetrics()
	return mu
}

// RemoveTargetMetricIDs removes the "target_metrics" edge to TargetMetrics entities by IDs.
func (mu *MetricsUpdate) RemoveTargetMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.RemoveTargetMetricIDs(ids...)
	return mu
}

// RemoveTargetMetrics removes "target_metrics" edges to TargetMetrics entities.
func (mu *MetricsUpdate) RemoveTargetMetrics(t ...*TargetMetrics) *MetricsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveTargetMetricIDs(ids...)
}

// ClearPackageMetrics clears all "package_metrics" edges to the PackageMetrics entity.
func (mu *MetricsUpdate) ClearPackageMetrics() *MetricsUpdate {
	mu.mutation.ClearPackageMetrics()
	return mu
}

// RemovePackageMetricIDs removes the "package_metrics" edge to PackageMetrics entities by IDs.
func (mu *MetricsUpdate) RemovePackageMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.RemovePackageMetricIDs(ids...)
	return mu
}

// RemovePackageMetrics removes "package_metrics" edges to PackageMetrics entities.
func (mu *MetricsUpdate) RemovePackageMetrics(p ...*PackageMetrics) *MetricsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemovePackageMetricIDs(ids...)
}

// ClearTimingMetrics clears all "timing_metrics" edges to the TimingMetrics entity.
func (mu *MetricsUpdate) ClearTimingMetrics() *MetricsUpdate {
	mu.mutation.ClearTimingMetrics()
	return mu
}

// RemoveTimingMetricIDs removes the "timing_metrics" edge to TimingMetrics entities by IDs.
func (mu *MetricsUpdate) RemoveTimingMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.RemoveTimingMetricIDs(ids...)
	return mu
}

// RemoveTimingMetrics removes "timing_metrics" edges to TimingMetrics entities.
func (mu *MetricsUpdate) RemoveTimingMetrics(t ...*TimingMetrics) *MetricsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveTimingMetricIDs(ids...)
}

// ClearCumulativeMetrics clears all "cumulative_metrics" edges to the CumulativeMetrics entity.
func (mu *MetricsUpdate) ClearCumulativeMetrics() *MetricsUpdate {
	mu.mutation.ClearCumulativeMetrics()
	return mu
}

// RemoveCumulativeMetricIDs removes the "cumulative_metrics" edge to CumulativeMetrics entities by IDs.
func (mu *MetricsUpdate) RemoveCumulativeMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.RemoveCumulativeMetricIDs(ids...)
	return mu
}

// RemoveCumulativeMetrics removes "cumulative_metrics" edges to CumulativeMetrics entities.
func (mu *MetricsUpdate) RemoveCumulativeMetrics(c ...*CumulativeMetrics) *MetricsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveCumulativeMetricIDs(ids...)
}

// ClearArtifactMetrics clears all "artifact_metrics" edges to the ArtifactMetrics entity.
func (mu *MetricsUpdate) ClearArtifactMetrics() *MetricsUpdate {
	mu.mutation.ClearArtifactMetrics()
	return mu
}

// RemoveArtifactMetricIDs removes the "artifact_metrics" edge to ArtifactMetrics entities by IDs.
func (mu *MetricsUpdate) RemoveArtifactMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.RemoveArtifactMetricIDs(ids...)
	return mu
}

// RemoveArtifactMetrics removes "artifact_metrics" edges to ArtifactMetrics entities.
func (mu *MetricsUpdate) RemoveArtifactMetrics(a ...*ArtifactMetrics) *MetricsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.RemoveArtifactMetricIDs(ids...)
}

// ClearNetworkMetrics clears all "network_metrics" edges to the NetworkMetrics entity.
func (mu *MetricsUpdate) ClearNetworkMetrics() *MetricsUpdate {
	mu.mutation.ClearNetworkMetrics()
	return mu
}

// RemoveNetworkMetricIDs removes the "network_metrics" edge to NetworkMetrics entities by IDs.
func (mu *MetricsUpdate) RemoveNetworkMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.RemoveNetworkMetricIDs(ids...)
	return mu
}

// RemoveNetworkMetrics removes "network_metrics" edges to NetworkMetrics entities.
func (mu *MetricsUpdate) RemoveNetworkMetrics(n ...*NetworkMetrics) *MetricsUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return mu.RemoveNetworkMetricIDs(ids...)
}

// ClearDynamicExecutionMetrics clears all "dynamic_execution_metrics" edges to the DynamicExecutionMetrics entity.
func (mu *MetricsUpdate) ClearDynamicExecutionMetrics() *MetricsUpdate {
	mu.mutation.ClearDynamicExecutionMetrics()
	return mu
}

// RemoveDynamicExecutionMetricIDs removes the "dynamic_execution_metrics" edge to DynamicExecutionMetrics entities by IDs.
func (mu *MetricsUpdate) RemoveDynamicExecutionMetricIDs(ids ...int) *MetricsUpdate {
	mu.mutation.RemoveDynamicExecutionMetricIDs(ids...)
	return mu
}

// RemoveDynamicExecutionMetrics removes "dynamic_execution_metrics" edges to DynamicExecutionMetrics entities.
func (mu *MetricsUpdate) RemoveDynamicExecutionMetrics(d ...*DynamicExecutionMetrics) *MetricsUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return mu.RemoveDynamicExecutionMetricIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MetricsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MetricsUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MetricsUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MetricsUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MetricsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(metrics.Table, metrics.Columns, sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mu.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   metrics.BazelInvocationTable,
			Columns: []string{metrics.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   metrics.BazelInvocationTable,
			Columns: []string{metrics.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ActionSummaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrics.ActionSummaryTable,
			Columns: []string{metrics.ActionSummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionsummary.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedActionSummaryIDs(); len(nodes) > 0 && !mu.mutation.ActionSummaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrics.ActionSummaryTable,
			Columns: []string{metrics.ActionSummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionsummary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ActionSummaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrics.ActionSummaryTable,
			Columns: []string{metrics.ActionSummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionsummary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MemoryMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.MemoryMetricsTable,
			Columns: metrics.MemoryMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorymetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMemoryMetricsIDs(); len(nodes) > 0 && !mu.mutation.MemoryMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.MemoryMetricsTable,
			Columns: metrics.MemoryMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorymetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MemoryMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.MemoryMetricsTable,
			Columns: metrics.MemoryMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorymetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.TargetMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TargetMetricsTable,
			Columns: metrics.TargetMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targetmetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedTargetMetricsIDs(); len(nodes) > 0 && !mu.mutation.TargetMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TargetMetricsTable,
			Columns: metrics.TargetMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targetmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TargetMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TargetMetricsTable,
			Columns: metrics.TargetMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targetmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.PackageMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.PackageMetricsTable,
			Columns: metrics.PackageMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagemetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedPackageMetricsIDs(); len(nodes) > 0 && !mu.mutation.PackageMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.PackageMetricsTable,
			Columns: metrics.PackageMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagemetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PackageMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.PackageMetricsTable,
			Columns: metrics.PackageMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagemetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.TimingMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TimingMetricsTable,
			Columns: metrics.TimingMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timingmetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedTimingMetricsIDs(); len(nodes) > 0 && !mu.mutation.TimingMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TimingMetricsTable,
			Columns: metrics.TimingMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timingmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TimingMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TimingMetricsTable,
			Columns: metrics.TimingMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timingmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CumulativeMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.CumulativeMetricsTable,
			Columns: metrics.CumulativeMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cumulativemetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedCumulativeMetricsIDs(); len(nodes) > 0 && !mu.mutation.CumulativeMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.CumulativeMetricsTable,
			Columns: metrics.CumulativeMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cumulativemetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CumulativeMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.CumulativeMetricsTable,
			Columns: metrics.CumulativeMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cumulativemetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ArtifactMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.ArtifactMetricsTable,
			Columns: metrics.ArtifactMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactmetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedArtifactMetricsIDs(); len(nodes) > 0 && !mu.mutation.ArtifactMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.ArtifactMetricsTable,
			Columns: metrics.ArtifactMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ArtifactMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.ArtifactMetricsTable,
			Columns: metrics.ArtifactMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.NetworkMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.NetworkMetricsTable,
			Columns: metrics.NetworkMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkmetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedNetworkMetricsIDs(); len(nodes) > 0 && !mu.mutation.NetworkMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.NetworkMetricsTable,
			Columns: metrics.NetworkMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.NetworkMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.NetworkMetricsTable,
			Columns: metrics.NetworkMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.DynamicExecutionMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.DynamicExecutionMetricsTable,
			Columns: metrics.DynamicExecutionMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynamicexecutionmetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedDynamicExecutionMetricsIDs(); len(nodes) > 0 && !mu.mutation.DynamicExecutionMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.DynamicExecutionMetricsTable,
			Columns: metrics.DynamicExecutionMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynamicexecutionmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.DynamicExecutionMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.DynamicExecutionMetricsTable,
			Columns: metrics.DynamicExecutionMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynamicexecutionmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MetricsUpdateOne is the builder for updating a single Metrics entity.
type MetricsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetricsMutation
}

// SetBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID.
func (muo *MetricsUpdateOne) SetBazelInvocationID(id int) *MetricsUpdateOne {
	muo.mutation.SetBazelInvocationID(id)
	return muo
}

// SetNillableBazelInvocationID sets the "bazel_invocation" edge to the BazelInvocation entity by ID if the given value is not nil.
func (muo *MetricsUpdateOne) SetNillableBazelInvocationID(id *int) *MetricsUpdateOne {
	if id != nil {
		muo = muo.SetBazelInvocationID(*id)
	}
	return muo
}

// SetBazelInvocation sets the "bazel_invocation" edge to the BazelInvocation entity.
func (muo *MetricsUpdateOne) SetBazelInvocation(b *BazelInvocation) *MetricsUpdateOne {
	return muo.SetBazelInvocationID(b.ID)
}

// AddActionSummaryIDs adds the "action_summary" edge to the ActionSummary entity by IDs.
func (muo *MetricsUpdateOne) AddActionSummaryIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.AddActionSummaryIDs(ids...)
	return muo
}

// AddActionSummary adds the "action_summary" edges to the ActionSummary entity.
func (muo *MetricsUpdateOne) AddActionSummary(a ...*ActionSummary) *MetricsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.AddActionSummaryIDs(ids...)
}

// AddMemoryMetricIDs adds the "memory_metrics" edge to the MemoryMetrics entity by IDs.
func (muo *MetricsUpdateOne) AddMemoryMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.AddMemoryMetricIDs(ids...)
	return muo
}

// AddMemoryMetrics adds the "memory_metrics" edges to the MemoryMetrics entity.
func (muo *MetricsUpdateOne) AddMemoryMetrics(m ...*MemoryMetrics) *MetricsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMemoryMetricIDs(ids...)
}

// AddTargetMetricIDs adds the "target_metrics" edge to the TargetMetrics entity by IDs.
func (muo *MetricsUpdateOne) AddTargetMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.AddTargetMetricIDs(ids...)
	return muo
}

// AddTargetMetrics adds the "target_metrics" edges to the TargetMetrics entity.
func (muo *MetricsUpdateOne) AddTargetMetrics(t ...*TargetMetrics) *MetricsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddTargetMetricIDs(ids...)
}

// AddPackageMetricIDs adds the "package_metrics" edge to the PackageMetrics entity by IDs.
func (muo *MetricsUpdateOne) AddPackageMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.AddPackageMetricIDs(ids...)
	return muo
}

// AddPackageMetrics adds the "package_metrics" edges to the PackageMetrics entity.
func (muo *MetricsUpdateOne) AddPackageMetrics(p ...*PackageMetrics) *MetricsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddPackageMetricIDs(ids...)
}

// AddTimingMetricIDs adds the "timing_metrics" edge to the TimingMetrics entity by IDs.
func (muo *MetricsUpdateOne) AddTimingMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.AddTimingMetricIDs(ids...)
	return muo
}

// AddTimingMetrics adds the "timing_metrics" edges to the TimingMetrics entity.
func (muo *MetricsUpdateOne) AddTimingMetrics(t ...*TimingMetrics) *MetricsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddTimingMetricIDs(ids...)
}

// AddCumulativeMetricIDs adds the "cumulative_metrics" edge to the CumulativeMetrics entity by IDs.
func (muo *MetricsUpdateOne) AddCumulativeMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.AddCumulativeMetricIDs(ids...)
	return muo
}

// AddCumulativeMetrics adds the "cumulative_metrics" edges to the CumulativeMetrics entity.
func (muo *MetricsUpdateOne) AddCumulativeMetrics(c ...*CumulativeMetrics) *MetricsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddCumulativeMetricIDs(ids...)
}

// AddArtifactMetricIDs adds the "artifact_metrics" edge to the ArtifactMetrics entity by IDs.
func (muo *MetricsUpdateOne) AddArtifactMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.AddArtifactMetricIDs(ids...)
	return muo
}

// AddArtifactMetrics adds the "artifact_metrics" edges to the ArtifactMetrics entity.
func (muo *MetricsUpdateOne) AddArtifactMetrics(a ...*ArtifactMetrics) *MetricsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.AddArtifactMetricIDs(ids...)
}

// AddNetworkMetricIDs adds the "network_metrics" edge to the NetworkMetrics entity by IDs.
func (muo *MetricsUpdateOne) AddNetworkMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.AddNetworkMetricIDs(ids...)
	return muo
}

// AddNetworkMetrics adds the "network_metrics" edges to the NetworkMetrics entity.
func (muo *MetricsUpdateOne) AddNetworkMetrics(n ...*NetworkMetrics) *MetricsUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return muo.AddNetworkMetricIDs(ids...)
}

// AddDynamicExecutionMetricIDs adds the "dynamic_execution_metrics" edge to the DynamicExecutionMetrics entity by IDs.
func (muo *MetricsUpdateOne) AddDynamicExecutionMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.AddDynamicExecutionMetricIDs(ids...)
	return muo
}

// AddDynamicExecutionMetrics adds the "dynamic_execution_metrics" edges to the DynamicExecutionMetrics entity.
func (muo *MetricsUpdateOne) AddDynamicExecutionMetrics(d ...*DynamicExecutionMetrics) *MetricsUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return muo.AddDynamicExecutionMetricIDs(ids...)
}

// Mutation returns the MetricsMutation object of the builder.
func (muo *MetricsUpdateOne) Mutation() *MetricsMutation {
	return muo.mutation
}

// ClearBazelInvocation clears the "bazel_invocation" edge to the BazelInvocation entity.
func (muo *MetricsUpdateOne) ClearBazelInvocation() *MetricsUpdateOne {
	muo.mutation.ClearBazelInvocation()
	return muo
}

// ClearActionSummary clears all "action_summary" edges to the ActionSummary entity.
func (muo *MetricsUpdateOne) ClearActionSummary() *MetricsUpdateOne {
	muo.mutation.ClearActionSummary()
	return muo
}

// RemoveActionSummaryIDs removes the "action_summary" edge to ActionSummary entities by IDs.
func (muo *MetricsUpdateOne) RemoveActionSummaryIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.RemoveActionSummaryIDs(ids...)
	return muo
}

// RemoveActionSummary removes "action_summary" edges to ActionSummary entities.
func (muo *MetricsUpdateOne) RemoveActionSummary(a ...*ActionSummary) *MetricsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.RemoveActionSummaryIDs(ids...)
}

// ClearMemoryMetrics clears all "memory_metrics" edges to the MemoryMetrics entity.
func (muo *MetricsUpdateOne) ClearMemoryMetrics() *MetricsUpdateOne {
	muo.mutation.ClearMemoryMetrics()
	return muo
}

// RemoveMemoryMetricIDs removes the "memory_metrics" edge to MemoryMetrics entities by IDs.
func (muo *MetricsUpdateOne) RemoveMemoryMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.RemoveMemoryMetricIDs(ids...)
	return muo
}

// RemoveMemoryMetrics removes "memory_metrics" edges to MemoryMetrics entities.
func (muo *MetricsUpdateOne) RemoveMemoryMetrics(m ...*MemoryMetrics) *MetricsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMemoryMetricIDs(ids...)
}

// ClearTargetMetrics clears all "target_metrics" edges to the TargetMetrics entity.
func (muo *MetricsUpdateOne) ClearTargetMetrics() *MetricsUpdateOne {
	muo.mutation.ClearTargetMetrics()
	return muo
}

// RemoveTargetMetricIDs removes the "target_metrics" edge to TargetMetrics entities by IDs.
func (muo *MetricsUpdateOne) RemoveTargetMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.RemoveTargetMetricIDs(ids...)
	return muo
}

// RemoveTargetMetrics removes "target_metrics" edges to TargetMetrics entities.
func (muo *MetricsUpdateOne) RemoveTargetMetrics(t ...*TargetMetrics) *MetricsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveTargetMetricIDs(ids...)
}

// ClearPackageMetrics clears all "package_metrics" edges to the PackageMetrics entity.
func (muo *MetricsUpdateOne) ClearPackageMetrics() *MetricsUpdateOne {
	muo.mutation.ClearPackageMetrics()
	return muo
}

// RemovePackageMetricIDs removes the "package_metrics" edge to PackageMetrics entities by IDs.
func (muo *MetricsUpdateOne) RemovePackageMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.RemovePackageMetricIDs(ids...)
	return muo
}

// RemovePackageMetrics removes "package_metrics" edges to PackageMetrics entities.
func (muo *MetricsUpdateOne) RemovePackageMetrics(p ...*PackageMetrics) *MetricsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemovePackageMetricIDs(ids...)
}

// ClearTimingMetrics clears all "timing_metrics" edges to the TimingMetrics entity.
func (muo *MetricsUpdateOne) ClearTimingMetrics() *MetricsUpdateOne {
	muo.mutation.ClearTimingMetrics()
	return muo
}

// RemoveTimingMetricIDs removes the "timing_metrics" edge to TimingMetrics entities by IDs.
func (muo *MetricsUpdateOne) RemoveTimingMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.RemoveTimingMetricIDs(ids...)
	return muo
}

// RemoveTimingMetrics removes "timing_metrics" edges to TimingMetrics entities.
func (muo *MetricsUpdateOne) RemoveTimingMetrics(t ...*TimingMetrics) *MetricsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveTimingMetricIDs(ids...)
}

// ClearCumulativeMetrics clears all "cumulative_metrics" edges to the CumulativeMetrics entity.
func (muo *MetricsUpdateOne) ClearCumulativeMetrics() *MetricsUpdateOne {
	muo.mutation.ClearCumulativeMetrics()
	return muo
}

// RemoveCumulativeMetricIDs removes the "cumulative_metrics" edge to CumulativeMetrics entities by IDs.
func (muo *MetricsUpdateOne) RemoveCumulativeMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.RemoveCumulativeMetricIDs(ids...)
	return muo
}

// RemoveCumulativeMetrics removes "cumulative_metrics" edges to CumulativeMetrics entities.
func (muo *MetricsUpdateOne) RemoveCumulativeMetrics(c ...*CumulativeMetrics) *MetricsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveCumulativeMetricIDs(ids...)
}

// ClearArtifactMetrics clears all "artifact_metrics" edges to the ArtifactMetrics entity.
func (muo *MetricsUpdateOne) ClearArtifactMetrics() *MetricsUpdateOne {
	muo.mutation.ClearArtifactMetrics()
	return muo
}

// RemoveArtifactMetricIDs removes the "artifact_metrics" edge to ArtifactMetrics entities by IDs.
func (muo *MetricsUpdateOne) RemoveArtifactMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.RemoveArtifactMetricIDs(ids...)
	return muo
}

// RemoveArtifactMetrics removes "artifact_metrics" edges to ArtifactMetrics entities.
func (muo *MetricsUpdateOne) RemoveArtifactMetrics(a ...*ArtifactMetrics) *MetricsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.RemoveArtifactMetricIDs(ids...)
}

// ClearNetworkMetrics clears all "network_metrics" edges to the NetworkMetrics entity.
func (muo *MetricsUpdateOne) ClearNetworkMetrics() *MetricsUpdateOne {
	muo.mutation.ClearNetworkMetrics()
	return muo
}

// RemoveNetworkMetricIDs removes the "network_metrics" edge to NetworkMetrics entities by IDs.
func (muo *MetricsUpdateOne) RemoveNetworkMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.RemoveNetworkMetricIDs(ids...)
	return muo
}

// RemoveNetworkMetrics removes "network_metrics" edges to NetworkMetrics entities.
func (muo *MetricsUpdateOne) RemoveNetworkMetrics(n ...*NetworkMetrics) *MetricsUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return muo.RemoveNetworkMetricIDs(ids...)
}

// ClearDynamicExecutionMetrics clears all "dynamic_execution_metrics" edges to the DynamicExecutionMetrics entity.
func (muo *MetricsUpdateOne) ClearDynamicExecutionMetrics() *MetricsUpdateOne {
	muo.mutation.ClearDynamicExecutionMetrics()
	return muo
}

// RemoveDynamicExecutionMetricIDs removes the "dynamic_execution_metrics" edge to DynamicExecutionMetrics entities by IDs.
func (muo *MetricsUpdateOne) RemoveDynamicExecutionMetricIDs(ids ...int) *MetricsUpdateOne {
	muo.mutation.RemoveDynamicExecutionMetricIDs(ids...)
	return muo
}

// RemoveDynamicExecutionMetrics removes "dynamic_execution_metrics" edges to DynamicExecutionMetrics entities.
func (muo *MetricsUpdateOne) RemoveDynamicExecutionMetrics(d ...*DynamicExecutionMetrics) *MetricsUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return muo.RemoveDynamicExecutionMetricIDs(ids...)
}

// Where appends a list predicates to the MetricsUpdate builder.
func (muo *MetricsUpdateOne) Where(ps ...predicate.Metrics) *MetricsUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MetricsUpdateOne) Select(field string, fields ...string) *MetricsUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Metrics entity.
func (muo *MetricsUpdateOne) Save(ctx context.Context) (*Metrics, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MetricsUpdateOne) SaveX(ctx context.Context) *Metrics {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MetricsUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MetricsUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MetricsUpdateOne) sqlSave(ctx context.Context) (_node *Metrics, err error) {
	_spec := sqlgraph.NewUpdateSpec(metrics.Table, metrics.Columns, sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Metrics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metrics.FieldID)
		for _, f := range fields {
			if !metrics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if muo.mutation.BazelInvocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   metrics.BazelInvocationTable,
			Columns: []string{metrics.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.BazelInvocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   metrics.BazelInvocationTable,
			Columns: []string{metrics.BazelInvocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bazelinvocation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ActionSummaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrics.ActionSummaryTable,
			Columns: []string{metrics.ActionSummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionsummary.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedActionSummaryIDs(); len(nodes) > 0 && !muo.mutation.ActionSummaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrics.ActionSummaryTable,
			Columns: []string{metrics.ActionSummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionsummary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ActionSummaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metrics.ActionSummaryTable,
			Columns: []string{metrics.ActionSummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionsummary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MemoryMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.MemoryMetricsTable,
			Columns: metrics.MemoryMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorymetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMemoryMetricsIDs(); len(nodes) > 0 && !muo.mutation.MemoryMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.MemoryMetricsTable,
			Columns: metrics.MemoryMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorymetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MemoryMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.MemoryMetricsTable,
			Columns: metrics.MemoryMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memorymetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.TargetMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TargetMetricsTable,
			Columns: metrics.TargetMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targetmetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedTargetMetricsIDs(); len(nodes) > 0 && !muo.mutation.TargetMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TargetMetricsTable,
			Columns: metrics.TargetMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targetmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TargetMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TargetMetricsTable,
			Columns: metrics.TargetMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(targetmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.PackageMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.PackageMetricsTable,
			Columns: metrics.PackageMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagemetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedPackageMetricsIDs(); len(nodes) > 0 && !muo.mutation.PackageMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.PackageMetricsTable,
			Columns: metrics.PackageMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagemetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PackageMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.PackageMetricsTable,
			Columns: metrics.PackageMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagemetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.TimingMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TimingMetricsTable,
			Columns: metrics.TimingMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timingmetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedTimingMetricsIDs(); len(nodes) > 0 && !muo.mutation.TimingMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TimingMetricsTable,
			Columns: metrics.TimingMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timingmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TimingMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.TimingMetricsTable,
			Columns: metrics.TimingMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timingmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CumulativeMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.CumulativeMetricsTable,
			Columns: metrics.CumulativeMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cumulativemetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedCumulativeMetricsIDs(); len(nodes) > 0 && !muo.mutation.CumulativeMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.CumulativeMetricsTable,
			Columns: metrics.CumulativeMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cumulativemetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CumulativeMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.CumulativeMetricsTable,
			Columns: metrics.CumulativeMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cumulativemetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ArtifactMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.ArtifactMetricsTable,
			Columns: metrics.ArtifactMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactmetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedArtifactMetricsIDs(); len(nodes) > 0 && !muo.mutation.ArtifactMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.ArtifactMetricsTable,
			Columns: metrics.ArtifactMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ArtifactMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.ArtifactMetricsTable,
			Columns: metrics.ArtifactMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifactmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.NetworkMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.NetworkMetricsTable,
			Columns: metrics.NetworkMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkmetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedNetworkMetricsIDs(); len(nodes) > 0 && !muo.mutation.NetworkMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.NetworkMetricsTable,
			Columns: metrics.NetworkMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.NetworkMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.NetworkMetricsTable,
			Columns: metrics.NetworkMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.DynamicExecutionMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.DynamicExecutionMetricsTable,
			Columns: metrics.DynamicExecutionMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynamicexecutionmetrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedDynamicExecutionMetricsIDs(); len(nodes) > 0 && !muo.mutation.DynamicExecutionMetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.DynamicExecutionMetricsTable,
			Columns: metrics.DynamicExecutionMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynamicexecutionmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.DynamicExecutionMetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   metrics.DynamicExecutionMetricsTable,
			Columns: metrics.DynamicExecutionMetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynamicexecutionmetrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Metrics{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
