// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/actioncachestatistics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ActionCacheStatisticsDelete is the builder for deleting a ActionCacheStatistics entity.
type ActionCacheStatisticsDelete struct {
	config
	hooks    []Hook
	mutation *ActionCacheStatisticsMutation
}

// Where appends a list predicates to the ActionCacheStatisticsDelete builder.
func (acsd *ActionCacheStatisticsDelete) Where(ps ...predicate.ActionCacheStatistics) *ActionCacheStatisticsDelete {
	acsd.mutation.Where(ps...)
	return acsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (acsd *ActionCacheStatisticsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, acsd.sqlExec, acsd.mutation, acsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (acsd *ActionCacheStatisticsDelete) ExecX(ctx context.Context) int {
	n, err := acsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (acsd *ActionCacheStatisticsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(actioncachestatistics.Table, sqlgraph.NewFieldSpec(actioncachestatistics.FieldID, field.TypeInt))
	if ps := acsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, acsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	acsd.mutation.done = true
	return affected, err
}

// ActionCacheStatisticsDeleteOne is the builder for deleting a single ActionCacheStatistics entity.
type ActionCacheStatisticsDeleteOne struct {
	acsd *ActionCacheStatisticsDelete
}

// Where appends a list predicates to the ActionCacheStatisticsDelete builder.
func (acsdo *ActionCacheStatisticsDeleteOne) Where(ps ...predicate.ActionCacheStatistics) *ActionCacheStatisticsDeleteOne {
	acsdo.acsd.mutation.Where(ps...)
	return acsdo
}

// Exec executes the deletion query.
func (acsdo *ActionCacheStatisticsDeleteOne) Exec(ctx context.Context) error {
	n, err := acsdo.acsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{actioncachestatistics.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (acsdo *ActionCacheStatisticsDeleteOne) ExecX(ctx context.Context) {
	if err := acsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
