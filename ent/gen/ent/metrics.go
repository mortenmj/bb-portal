// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
)

// Metrics is the model entity for the Metrics schema.
type Metrics struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetricsQuery when eager-loading is set.
	Edges        MetricsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MetricsEdges holds the relations/edges for other nodes in the graph.
type MetricsEdges struct {
	// ActionSummary holds the value of the action_summary edge.
	ActionSummary []*ActionSummary `json:"action_summary,omitempty"`
	// MemoryMetrics holds the value of the memory_metrics edge.
	MemoryMetrics []*MemoryMetrics `json:"memory_metrics,omitempty"`
	// TargetMetrics holds the value of the target_metrics edge.
	TargetMetrics []*TargetMetrics `json:"target_metrics,omitempty"`
	// PackageMetrics holds the value of the package_metrics edge.
	PackageMetrics []*PackageMetrics `json:"package_metrics,omitempty"`
	// TimingMetrics holds the value of the timing_metrics edge.
	TimingMetrics []*TimingMetrics `json:"timing_metrics,omitempty"`
	// CumulativeMetrics holds the value of the cumulative_metrics edge.
	CumulativeMetrics []*CumulativeMetrics `json:"cumulative_metrics,omitempty"`
	// ArtifactMetrics holds the value of the artifact_metrics edge.
	ArtifactMetrics []*ArtifactMetrics `json:"artifact_metrics,omitempty"`
	// NetworkMetrics holds the value of the network_metrics edge.
	NetworkMetrics []*NetworkMetrics `json:"network_metrics,omitempty"`
	// DynamicExecutionMetrics holds the value of the dynamic_execution_metrics edge.
	DynamicExecutionMetrics []*DynamicExecutionMetrics `json:"dynamic_execution_metrics,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
	// totalCount holds the count of the edges above.
	totalCount [9]map[string]int

	namedActionSummary           map[string][]*ActionSummary
	namedMemoryMetrics           map[string][]*MemoryMetrics
	namedTargetMetrics           map[string][]*TargetMetrics
	namedPackageMetrics          map[string][]*PackageMetrics
	namedTimingMetrics           map[string][]*TimingMetrics
	namedCumulativeMetrics       map[string][]*CumulativeMetrics
	namedArtifactMetrics         map[string][]*ArtifactMetrics
	namedNetworkMetrics          map[string][]*NetworkMetrics
	namedDynamicExecutionMetrics map[string][]*DynamicExecutionMetrics
}

// ActionSummaryOrErr returns the ActionSummary value or an error if the edge
// was not loaded in eager-loading.
func (e MetricsEdges) ActionSummaryOrErr() ([]*ActionSummary, error) {
	if e.loadedTypes[0] {
		return e.ActionSummary, nil
	}
	return nil, &NotLoadedError{edge: "action_summary"}
}

// MemoryMetricsOrErr returns the MemoryMetrics value or an error if the edge
// was not loaded in eager-loading.
func (e MetricsEdges) MemoryMetricsOrErr() ([]*MemoryMetrics, error) {
	if e.loadedTypes[1] {
		return e.MemoryMetrics, nil
	}
	return nil, &NotLoadedError{edge: "memory_metrics"}
}

// TargetMetricsOrErr returns the TargetMetrics value or an error if the edge
// was not loaded in eager-loading.
func (e MetricsEdges) TargetMetricsOrErr() ([]*TargetMetrics, error) {
	if e.loadedTypes[2] {
		return e.TargetMetrics, nil
	}
	return nil, &NotLoadedError{edge: "target_metrics"}
}

// PackageMetricsOrErr returns the PackageMetrics value or an error if the edge
// was not loaded in eager-loading.
func (e MetricsEdges) PackageMetricsOrErr() ([]*PackageMetrics, error) {
	if e.loadedTypes[3] {
		return e.PackageMetrics, nil
	}
	return nil, &NotLoadedError{edge: "package_metrics"}
}

// TimingMetricsOrErr returns the TimingMetrics value or an error if the edge
// was not loaded in eager-loading.
func (e MetricsEdges) TimingMetricsOrErr() ([]*TimingMetrics, error) {
	if e.loadedTypes[4] {
		return e.TimingMetrics, nil
	}
	return nil, &NotLoadedError{edge: "timing_metrics"}
}

// CumulativeMetricsOrErr returns the CumulativeMetrics value or an error if the edge
// was not loaded in eager-loading.
func (e MetricsEdges) CumulativeMetricsOrErr() ([]*CumulativeMetrics, error) {
	if e.loadedTypes[5] {
		return e.CumulativeMetrics, nil
	}
	return nil, &NotLoadedError{edge: "cumulative_metrics"}
}

// ArtifactMetricsOrErr returns the ArtifactMetrics value or an error if the edge
// was not loaded in eager-loading.
func (e MetricsEdges) ArtifactMetricsOrErr() ([]*ArtifactMetrics, error) {
	if e.loadedTypes[6] {
		return e.ArtifactMetrics, nil
	}
	return nil, &NotLoadedError{edge: "artifact_metrics"}
}

// NetworkMetricsOrErr returns the NetworkMetrics value or an error if the edge
// was not loaded in eager-loading.
func (e MetricsEdges) NetworkMetricsOrErr() ([]*NetworkMetrics, error) {
	if e.loadedTypes[7] {
		return e.NetworkMetrics, nil
	}
	return nil, &NotLoadedError{edge: "network_metrics"}
}

// DynamicExecutionMetricsOrErr returns the DynamicExecutionMetrics value or an error if the edge
// was not loaded in eager-loading.
func (e MetricsEdges) DynamicExecutionMetricsOrErr() ([]*DynamicExecutionMetrics, error) {
	if e.loadedTypes[8] {
		return e.DynamicExecutionMetrics, nil
	}
	return nil, &NotLoadedError{edge: "dynamic_execution_metrics"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Metrics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case metrics.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Metrics fields.
func (m *Metrics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metrics.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Metrics.
// This includes values selected through modifiers, order, etc.
func (m *Metrics) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryActionSummary queries the "action_summary" edge of the Metrics entity.
func (m *Metrics) QueryActionSummary() *ActionSummaryQuery {
	return NewMetricsClient(m.config).QueryActionSummary(m)
}

// QueryMemoryMetrics queries the "memory_metrics" edge of the Metrics entity.
func (m *Metrics) QueryMemoryMetrics() *MemoryMetricsQuery {
	return NewMetricsClient(m.config).QueryMemoryMetrics(m)
}

// QueryTargetMetrics queries the "target_metrics" edge of the Metrics entity.
func (m *Metrics) QueryTargetMetrics() *TargetMetricsQuery {
	return NewMetricsClient(m.config).QueryTargetMetrics(m)
}

// QueryPackageMetrics queries the "package_metrics" edge of the Metrics entity.
func (m *Metrics) QueryPackageMetrics() *PackageMetricsQuery {
	return NewMetricsClient(m.config).QueryPackageMetrics(m)
}

// QueryTimingMetrics queries the "timing_metrics" edge of the Metrics entity.
func (m *Metrics) QueryTimingMetrics() *TimingMetricsQuery {
	return NewMetricsClient(m.config).QueryTimingMetrics(m)
}

// QueryCumulativeMetrics queries the "cumulative_metrics" edge of the Metrics entity.
func (m *Metrics) QueryCumulativeMetrics() *CumulativeMetricsQuery {
	return NewMetricsClient(m.config).QueryCumulativeMetrics(m)
}

// QueryArtifactMetrics queries the "artifact_metrics" edge of the Metrics entity.
func (m *Metrics) QueryArtifactMetrics() *ArtifactMetricsQuery {
	return NewMetricsClient(m.config).QueryArtifactMetrics(m)
}

// QueryNetworkMetrics queries the "network_metrics" edge of the Metrics entity.
func (m *Metrics) QueryNetworkMetrics() *NetworkMetricsQuery {
	return NewMetricsClient(m.config).QueryNetworkMetrics(m)
}

// QueryDynamicExecutionMetrics queries the "dynamic_execution_metrics" edge of the Metrics entity.
func (m *Metrics) QueryDynamicExecutionMetrics() *DynamicExecutionMetricsQuery {
	return NewMetricsClient(m.config).QueryDynamicExecutionMetrics(m)
}

// Update returns a builder for updating this Metrics.
// Note that you need to call Metrics.Unwrap() before calling this method if this Metrics
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Metrics) Update() *MetricsUpdateOne {
	return NewMetricsClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Metrics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Metrics) Unwrap() *Metrics {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Metrics is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Metrics) String() string {
	var builder strings.Builder
	builder.WriteString("Metrics(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedActionSummary returns the ActionSummary named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Metrics) NamedActionSummary(name string) ([]*ActionSummary, error) {
	if m.Edges.namedActionSummary == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedActionSummary[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Metrics) appendNamedActionSummary(name string, edges ...*ActionSummary) {
	if m.Edges.namedActionSummary == nil {
		m.Edges.namedActionSummary = make(map[string][]*ActionSummary)
	}
	if len(edges) == 0 {
		m.Edges.namedActionSummary[name] = []*ActionSummary{}
	} else {
		m.Edges.namedActionSummary[name] = append(m.Edges.namedActionSummary[name], edges...)
	}
}

// NamedMemoryMetrics returns the MemoryMetrics named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Metrics) NamedMemoryMetrics(name string) ([]*MemoryMetrics, error) {
	if m.Edges.namedMemoryMetrics == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedMemoryMetrics[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Metrics) appendNamedMemoryMetrics(name string, edges ...*MemoryMetrics) {
	if m.Edges.namedMemoryMetrics == nil {
		m.Edges.namedMemoryMetrics = make(map[string][]*MemoryMetrics)
	}
	if len(edges) == 0 {
		m.Edges.namedMemoryMetrics[name] = []*MemoryMetrics{}
	} else {
		m.Edges.namedMemoryMetrics[name] = append(m.Edges.namedMemoryMetrics[name], edges...)
	}
}

// NamedTargetMetrics returns the TargetMetrics named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Metrics) NamedTargetMetrics(name string) ([]*TargetMetrics, error) {
	if m.Edges.namedTargetMetrics == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedTargetMetrics[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Metrics) appendNamedTargetMetrics(name string, edges ...*TargetMetrics) {
	if m.Edges.namedTargetMetrics == nil {
		m.Edges.namedTargetMetrics = make(map[string][]*TargetMetrics)
	}
	if len(edges) == 0 {
		m.Edges.namedTargetMetrics[name] = []*TargetMetrics{}
	} else {
		m.Edges.namedTargetMetrics[name] = append(m.Edges.namedTargetMetrics[name], edges...)
	}
}

// NamedPackageMetrics returns the PackageMetrics named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Metrics) NamedPackageMetrics(name string) ([]*PackageMetrics, error) {
	if m.Edges.namedPackageMetrics == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedPackageMetrics[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Metrics) appendNamedPackageMetrics(name string, edges ...*PackageMetrics) {
	if m.Edges.namedPackageMetrics == nil {
		m.Edges.namedPackageMetrics = make(map[string][]*PackageMetrics)
	}
	if len(edges) == 0 {
		m.Edges.namedPackageMetrics[name] = []*PackageMetrics{}
	} else {
		m.Edges.namedPackageMetrics[name] = append(m.Edges.namedPackageMetrics[name], edges...)
	}
}

// NamedTimingMetrics returns the TimingMetrics named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Metrics) NamedTimingMetrics(name string) ([]*TimingMetrics, error) {
	if m.Edges.namedTimingMetrics == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedTimingMetrics[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Metrics) appendNamedTimingMetrics(name string, edges ...*TimingMetrics) {
	if m.Edges.namedTimingMetrics == nil {
		m.Edges.namedTimingMetrics = make(map[string][]*TimingMetrics)
	}
	if len(edges) == 0 {
		m.Edges.namedTimingMetrics[name] = []*TimingMetrics{}
	} else {
		m.Edges.namedTimingMetrics[name] = append(m.Edges.namedTimingMetrics[name], edges...)
	}
}

// NamedCumulativeMetrics returns the CumulativeMetrics named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Metrics) NamedCumulativeMetrics(name string) ([]*CumulativeMetrics, error) {
	if m.Edges.namedCumulativeMetrics == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedCumulativeMetrics[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Metrics) appendNamedCumulativeMetrics(name string, edges ...*CumulativeMetrics) {
	if m.Edges.namedCumulativeMetrics == nil {
		m.Edges.namedCumulativeMetrics = make(map[string][]*CumulativeMetrics)
	}
	if len(edges) == 0 {
		m.Edges.namedCumulativeMetrics[name] = []*CumulativeMetrics{}
	} else {
		m.Edges.namedCumulativeMetrics[name] = append(m.Edges.namedCumulativeMetrics[name], edges...)
	}
}

// NamedArtifactMetrics returns the ArtifactMetrics named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Metrics) NamedArtifactMetrics(name string) ([]*ArtifactMetrics, error) {
	if m.Edges.namedArtifactMetrics == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedArtifactMetrics[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Metrics) appendNamedArtifactMetrics(name string, edges ...*ArtifactMetrics) {
	if m.Edges.namedArtifactMetrics == nil {
		m.Edges.namedArtifactMetrics = make(map[string][]*ArtifactMetrics)
	}
	if len(edges) == 0 {
		m.Edges.namedArtifactMetrics[name] = []*ArtifactMetrics{}
	} else {
		m.Edges.namedArtifactMetrics[name] = append(m.Edges.namedArtifactMetrics[name], edges...)
	}
}

// NamedNetworkMetrics returns the NetworkMetrics named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Metrics) NamedNetworkMetrics(name string) ([]*NetworkMetrics, error) {
	if m.Edges.namedNetworkMetrics == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedNetworkMetrics[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Metrics) appendNamedNetworkMetrics(name string, edges ...*NetworkMetrics) {
	if m.Edges.namedNetworkMetrics == nil {
		m.Edges.namedNetworkMetrics = make(map[string][]*NetworkMetrics)
	}
	if len(edges) == 0 {
		m.Edges.namedNetworkMetrics[name] = []*NetworkMetrics{}
	} else {
		m.Edges.namedNetworkMetrics[name] = append(m.Edges.namedNetworkMetrics[name], edges...)
	}
}

// NamedDynamicExecutionMetrics returns the DynamicExecutionMetrics named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Metrics) NamedDynamicExecutionMetrics(name string) ([]*DynamicExecutionMetrics, error) {
	if m.Edges.namedDynamicExecutionMetrics == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedDynamicExecutionMetrics[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Metrics) appendNamedDynamicExecutionMetrics(name string, edges ...*DynamicExecutionMetrics) {
	if m.Edges.namedDynamicExecutionMetrics == nil {
		m.Edges.namedDynamicExecutionMetrics = make(map[string][]*DynamicExecutionMetrics)
	}
	if len(edges) == 0 {
		m.Edges.namedDynamicExecutionMetrics[name] = []*DynamicExecutionMetrics{}
	} else {
		m.Edges.namedDynamicExecutionMetrics[name] = append(m.Edges.namedDynamicExecutionMetrics[name], edges...)
	}
}

// MetricsSlice is a parsable slice of Metrics.
type MetricsSlice []*Metrics
