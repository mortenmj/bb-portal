// Code generated by ent, DO NOT EDIT.

package resourceusage

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the resourceusage type in the database.
	Label = "resource_usage"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeExecutionInfo holds the string denoting the execution_info edge name in mutations.
	EdgeExecutionInfo = "execution_info"
	// Table holds the table name of the resourceusage in the database.
	Table = "resource_usages"
	// ExecutionInfoTable is the table that holds the execution_info relation/edge. The primary key declared below.
	ExecutionInfoTable = "exection_info_resource_usage"
	// ExecutionInfoInverseTable is the table name for the ExectionInfo entity.
	// It exists in this package in order to avoid circular dependency with the "exectioninfo" package.
	ExecutionInfoInverseTable = "exection_infos"
)

// Columns holds all SQL columns for resourceusage fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldValue,
}

var (
	// ExecutionInfoPrimaryKey and ExecutionInfoColumn2 are the table columns denoting the
	// primary key for the execution_info relation (M2M).
	ExecutionInfoPrimaryKey = []string{"exection_info_id", "resource_usage_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ResourceUsage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByExecutionInfoCount orders the results by execution_info count.
func ByExecutionInfoCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExecutionInfoStep(), opts...)
	}
}

// ByExecutionInfo orders the results by execution_info terms.
func ByExecutionInfo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionInfoStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newExecutionInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ExecutionInfoTable, ExecutionInfoPrimaryKey...),
	)
}
