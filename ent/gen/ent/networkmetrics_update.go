// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/metrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/networkmetrics"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
	"github.com/buildbarn/bb-portal/ent/gen/ent/systemnetworkstats"
)

// NetworkMetricsUpdate is the builder for updating NetworkMetrics entities.
type NetworkMetricsUpdate struct {
	config
	hooks    []Hook
	mutation *NetworkMetricsMutation
}

// Where appends a list predicates to the NetworkMetricsUpdate builder.
func (nmu *NetworkMetricsUpdate) Where(ps ...predicate.NetworkMetrics) *NetworkMetricsUpdate {
	nmu.mutation.Where(ps...)
	return nmu
}

// AddMetricIDs adds the "metrics" edge to the Metrics entity by IDs.
func (nmu *NetworkMetricsUpdate) AddMetricIDs(ids ...int) *NetworkMetricsUpdate {
	nmu.mutation.AddMetricIDs(ids...)
	return nmu
}

// AddMetrics adds the "metrics" edges to the Metrics entity.
func (nmu *NetworkMetricsUpdate) AddMetrics(m ...*Metrics) *NetworkMetricsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nmu.AddMetricIDs(ids...)
}

// AddSystemNetworkStatIDs adds the "system_network_stats" edge to the SystemNetworkStats entity by IDs.
func (nmu *NetworkMetricsUpdate) AddSystemNetworkStatIDs(ids ...int) *NetworkMetricsUpdate {
	nmu.mutation.AddSystemNetworkStatIDs(ids...)
	return nmu
}

// AddSystemNetworkStats adds the "system_network_stats" edges to the SystemNetworkStats entity.
func (nmu *NetworkMetricsUpdate) AddSystemNetworkStats(s ...*SystemNetworkStats) *NetworkMetricsUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nmu.AddSystemNetworkStatIDs(ids...)
}

// Mutation returns the NetworkMetricsMutation object of the builder.
func (nmu *NetworkMetricsUpdate) Mutation() *NetworkMetricsMutation {
	return nmu.mutation
}

// ClearMetrics clears all "metrics" edges to the Metrics entity.
func (nmu *NetworkMetricsUpdate) ClearMetrics() *NetworkMetricsUpdate {
	nmu.mutation.ClearMetrics()
	return nmu
}

// RemoveMetricIDs removes the "metrics" edge to Metrics entities by IDs.
func (nmu *NetworkMetricsUpdate) RemoveMetricIDs(ids ...int) *NetworkMetricsUpdate {
	nmu.mutation.RemoveMetricIDs(ids...)
	return nmu
}

// RemoveMetrics removes "metrics" edges to Metrics entities.
func (nmu *NetworkMetricsUpdate) RemoveMetrics(m ...*Metrics) *NetworkMetricsUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nmu.RemoveMetricIDs(ids...)
}

// ClearSystemNetworkStats clears all "system_network_stats" edges to the SystemNetworkStats entity.
func (nmu *NetworkMetricsUpdate) ClearSystemNetworkStats() *NetworkMetricsUpdate {
	nmu.mutation.ClearSystemNetworkStats()
	return nmu
}

// RemoveSystemNetworkStatIDs removes the "system_network_stats" edge to SystemNetworkStats entities by IDs.
func (nmu *NetworkMetricsUpdate) RemoveSystemNetworkStatIDs(ids ...int) *NetworkMetricsUpdate {
	nmu.mutation.RemoveSystemNetworkStatIDs(ids...)
	return nmu
}

// RemoveSystemNetworkStats removes "system_network_stats" edges to SystemNetworkStats entities.
func (nmu *NetworkMetricsUpdate) RemoveSystemNetworkStats(s ...*SystemNetworkStats) *NetworkMetricsUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nmu.RemoveSystemNetworkStatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nmu *NetworkMetricsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nmu.sqlSave, nmu.mutation, nmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nmu *NetworkMetricsUpdate) SaveX(ctx context.Context) int {
	affected, err := nmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nmu *NetworkMetricsUpdate) Exec(ctx context.Context) error {
	_, err := nmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nmu *NetworkMetricsUpdate) ExecX(ctx context.Context) {
	if err := nmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nmu *NetworkMetricsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(networkmetrics.Table, networkmetrics.Columns, sqlgraph.NewFieldSpec(networkmetrics.FieldID, field.TypeInt))
	if ps := nmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nmu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   networkmetrics.MetricsTable,
			Columns: networkmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nmu.mutation.RemovedMetricsIDs(); len(nodes) > 0 && !nmu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   networkmetrics.MetricsTable,
			Columns: networkmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nmu.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   networkmetrics.MetricsTable,
			Columns: networkmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nmu.mutation.SystemNetworkStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkmetrics.SystemNetworkStatsTable,
			Columns: []string{networkmetrics.SystemNetworkStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemnetworkstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nmu.mutation.RemovedSystemNetworkStatsIDs(); len(nodes) > 0 && !nmu.mutation.SystemNetworkStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkmetrics.SystemNetworkStatsTable,
			Columns: []string{networkmetrics.SystemNetworkStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemnetworkstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nmu.mutation.SystemNetworkStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkmetrics.SystemNetworkStatsTable,
			Columns: []string{networkmetrics.SystemNetworkStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemnetworkstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networkmetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nmu.mutation.done = true
	return n, nil
}

// NetworkMetricsUpdateOne is the builder for updating a single NetworkMetrics entity.
type NetworkMetricsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetworkMetricsMutation
}

// AddMetricIDs adds the "metrics" edge to the Metrics entity by IDs.
func (nmuo *NetworkMetricsUpdateOne) AddMetricIDs(ids ...int) *NetworkMetricsUpdateOne {
	nmuo.mutation.AddMetricIDs(ids...)
	return nmuo
}

// AddMetrics adds the "metrics" edges to the Metrics entity.
func (nmuo *NetworkMetricsUpdateOne) AddMetrics(m ...*Metrics) *NetworkMetricsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nmuo.AddMetricIDs(ids...)
}

// AddSystemNetworkStatIDs adds the "system_network_stats" edge to the SystemNetworkStats entity by IDs.
func (nmuo *NetworkMetricsUpdateOne) AddSystemNetworkStatIDs(ids ...int) *NetworkMetricsUpdateOne {
	nmuo.mutation.AddSystemNetworkStatIDs(ids...)
	return nmuo
}

// AddSystemNetworkStats adds the "system_network_stats" edges to the SystemNetworkStats entity.
func (nmuo *NetworkMetricsUpdateOne) AddSystemNetworkStats(s ...*SystemNetworkStats) *NetworkMetricsUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nmuo.AddSystemNetworkStatIDs(ids...)
}

// Mutation returns the NetworkMetricsMutation object of the builder.
func (nmuo *NetworkMetricsUpdateOne) Mutation() *NetworkMetricsMutation {
	return nmuo.mutation
}

// ClearMetrics clears all "metrics" edges to the Metrics entity.
func (nmuo *NetworkMetricsUpdateOne) ClearMetrics() *NetworkMetricsUpdateOne {
	nmuo.mutation.ClearMetrics()
	return nmuo
}

// RemoveMetricIDs removes the "metrics" edge to Metrics entities by IDs.
func (nmuo *NetworkMetricsUpdateOne) RemoveMetricIDs(ids ...int) *NetworkMetricsUpdateOne {
	nmuo.mutation.RemoveMetricIDs(ids...)
	return nmuo
}

// RemoveMetrics removes "metrics" edges to Metrics entities.
func (nmuo *NetworkMetricsUpdateOne) RemoveMetrics(m ...*Metrics) *NetworkMetricsUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return nmuo.RemoveMetricIDs(ids...)
}

// ClearSystemNetworkStats clears all "system_network_stats" edges to the SystemNetworkStats entity.
func (nmuo *NetworkMetricsUpdateOne) ClearSystemNetworkStats() *NetworkMetricsUpdateOne {
	nmuo.mutation.ClearSystemNetworkStats()
	return nmuo
}

// RemoveSystemNetworkStatIDs removes the "system_network_stats" edge to SystemNetworkStats entities by IDs.
func (nmuo *NetworkMetricsUpdateOne) RemoveSystemNetworkStatIDs(ids ...int) *NetworkMetricsUpdateOne {
	nmuo.mutation.RemoveSystemNetworkStatIDs(ids...)
	return nmuo
}

// RemoveSystemNetworkStats removes "system_network_stats" edges to SystemNetworkStats entities.
func (nmuo *NetworkMetricsUpdateOne) RemoveSystemNetworkStats(s ...*SystemNetworkStats) *NetworkMetricsUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nmuo.RemoveSystemNetworkStatIDs(ids...)
}

// Where appends a list predicates to the NetworkMetricsUpdate builder.
func (nmuo *NetworkMetricsUpdateOne) Where(ps ...predicate.NetworkMetrics) *NetworkMetricsUpdateOne {
	nmuo.mutation.Where(ps...)
	return nmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nmuo *NetworkMetricsUpdateOne) Select(field string, fields ...string) *NetworkMetricsUpdateOne {
	nmuo.fields = append([]string{field}, fields...)
	return nmuo
}

// Save executes the query and returns the updated NetworkMetrics entity.
func (nmuo *NetworkMetricsUpdateOne) Save(ctx context.Context) (*NetworkMetrics, error) {
	return withHooks(ctx, nmuo.sqlSave, nmuo.mutation, nmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nmuo *NetworkMetricsUpdateOne) SaveX(ctx context.Context) *NetworkMetrics {
	node, err := nmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nmuo *NetworkMetricsUpdateOne) Exec(ctx context.Context) error {
	_, err := nmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nmuo *NetworkMetricsUpdateOne) ExecX(ctx context.Context) {
	if err := nmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nmuo *NetworkMetricsUpdateOne) sqlSave(ctx context.Context) (_node *NetworkMetrics, err error) {
	_spec := sqlgraph.NewUpdateSpec(networkmetrics.Table, networkmetrics.Columns, sqlgraph.NewFieldSpec(networkmetrics.FieldID, field.TypeInt))
	id, ok := nmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NetworkMetrics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, networkmetrics.FieldID)
		for _, f := range fields {
			if !networkmetrics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != networkmetrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nmuo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   networkmetrics.MetricsTable,
			Columns: networkmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nmuo.mutation.RemovedMetricsIDs(); len(nodes) > 0 && !nmuo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   networkmetrics.MetricsTable,
			Columns: networkmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nmuo.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   networkmetrics.MetricsTable,
			Columns: networkmetrics.MetricsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metrics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nmuo.mutation.SystemNetworkStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkmetrics.SystemNetworkStatsTable,
			Columns: []string{networkmetrics.SystemNetworkStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemnetworkstats.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nmuo.mutation.RemovedSystemNetworkStatsIDs(); len(nodes) > 0 && !nmuo.mutation.SystemNetworkStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkmetrics.SystemNetworkStatsTable,
			Columns: []string{networkmetrics.SystemNetworkStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemnetworkstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nmuo.mutation.SystemNetworkStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networkmetrics.SystemNetworkStatsTable,
			Columns: []string{networkmetrics.SystemNetworkStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemnetworkstats.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NetworkMetrics{config: nmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networkmetrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nmuo.mutation.done = true
	return _node, nil
}
