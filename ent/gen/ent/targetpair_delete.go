// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
	"github.com/buildbarn/bb-portal/ent/gen/ent/targetpair"
)

// TargetPairDelete is the builder for deleting a TargetPair entity.
type TargetPairDelete struct {
	config
	hooks    []Hook
	mutation *TargetPairMutation
}

// Where appends a list predicates to the TargetPairDelete builder.
func (tpd *TargetPairDelete) Where(ps ...predicate.TargetPair) *TargetPairDelete {
	tpd.mutation.Where(ps...)
	return tpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tpd *TargetPairDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tpd.sqlExec, tpd.mutation, tpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tpd *TargetPairDelete) ExecX(ctx context.Context) int {
	n, err := tpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tpd *TargetPairDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(targetpair.Table, sqlgraph.NewFieldSpec(targetpair.FieldID, field.TypeInt))
	if ps := tpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tpd.mutation.done = true
	return affected, err
}

// TargetPairDeleteOne is the builder for deleting a single TargetPair entity.
type TargetPairDeleteOne struct {
	tpd *TargetPairDelete
}

// Where appends a list predicates to the TargetPairDelete builder.
func (tpdo *TargetPairDeleteOne) Where(ps ...predicate.TargetPair) *TargetPairDeleteOne {
	tpdo.tpd.mutation.Where(ps...)
	return tpdo
}

// Exec executes the deletion query.
func (tpdo *TargetPairDeleteOne) Exec(ctx context.Context) error {
	n, err := tpdo.tpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{targetpair.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tpdo *TargetPairDeleteOne) ExecX(ctx context.Context) {
	if err := tpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
