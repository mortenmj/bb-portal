/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /**
   * Define a Relay Cursor type:
   * https://relay.dev/graphql/connections.htm#sec-Cursor
   */
  Cursor: { input: any; output: any; }
  /** The builtin Time type */
  Time: { input: any; output: any; }
  UUID: { input: any; output: any; }
};

export enum ActionOutputStatus {
  Available = 'AVAILABLE',
  Processing = 'PROCESSING',
  Unavailable = 'UNAVAILABLE'
}

export type ActionProblem = Node & Problem & {
  __typename?: 'ActionProblem';
  id: Scalars['ID']['output'];
  label: Scalars['String']['output'];
  stderr?: Maybe<BlobReference>;
  stdout?: Maybe<BlobReference>;
  type: Scalars['String']['output'];
};

export type BazelCommand = {
  __typename?: 'BazelCommand';
  command: Scalars['String']['output'];
  executable: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  options: Scalars['String']['output'];
  residual: Scalars['String']['output'];
};

export type BazelInvocation = Node & {
  __typename?: 'BazelInvocation';
  bazelCommand: BazelCommand;
  bepCompleted?: Maybe<Scalars['Boolean']['output']>;
  build?: Maybe<Build>;
  buildLogs?: Maybe<Scalars['String']['output']>;
  changeNumber?: Maybe<Scalars['Int']['output']>;
  endedAt?: Maybe<Scalars['Time']['output']>;
  eventFile: EventFile;
  id: Scalars['ID']['output'];
  invocationID: Scalars['UUID']['output'];
  patchsetNumber?: Maybe<Scalars['Int']['output']>;
  problems: Array<Problem>;
  relatedFiles: Array<NamedFile>;
  startedAt: Scalars['Time']['output'];
  state: BazelInvocationState;
  stepLabel: Scalars['String']['output'];
  user?: Maybe<User>;
  userEmail?: Maybe<Scalars['String']['output']>;
  userLdap?: Maybe<Scalars['String']['output']>;
};

/** A connection to a list of items. */
export type BazelInvocationConnection = {
  __typename?: 'BazelInvocationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BazelInvocationEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type BazelInvocationEdge = {
  __typename?: 'BazelInvocationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<BazelInvocation>;
};

export type BazelInvocationProblem = Node & {
  __typename?: 'BazelInvocationProblem';
  bazelInvocation?: Maybe<BazelInvocation>;
  id: Scalars['ID']['output'];
  label: Scalars['String']['output'];
  problemType: Scalars['String']['output'];
};

/**
 * BazelInvocationProblemWhereInput is used for filtering BazelInvocationProblem objects.
 * Input was generated by ent.
 */
export type BazelInvocationProblemWhereInput = {
  and?: InputMaybe<Array<BazelInvocationProblemWhereInput>>;
  /** bazel_invocation edge predicates */
  hasBazelInvocation?: InputMaybe<Scalars['Boolean']['input']>;
  hasBazelInvocationWith?: InputMaybe<Array<BazelInvocationWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** label field predicates */
  label?: InputMaybe<Scalars['String']['input']>;
  labelContains?: InputMaybe<Scalars['String']['input']>;
  labelContainsFold?: InputMaybe<Scalars['String']['input']>;
  labelEqualFold?: InputMaybe<Scalars['String']['input']>;
  labelGT?: InputMaybe<Scalars['String']['input']>;
  labelGTE?: InputMaybe<Scalars['String']['input']>;
  labelHasPrefix?: InputMaybe<Scalars['String']['input']>;
  labelHasSuffix?: InputMaybe<Scalars['String']['input']>;
  labelIn?: InputMaybe<Array<Scalars['String']['input']>>;
  labelLT?: InputMaybe<Scalars['String']['input']>;
  labelLTE?: InputMaybe<Scalars['String']['input']>;
  labelNEQ?: InputMaybe<Scalars['String']['input']>;
  labelNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<BazelInvocationProblemWhereInput>;
  or?: InputMaybe<Array<BazelInvocationProblemWhereInput>>;
  /** problem_type field predicates */
  problemType?: InputMaybe<Scalars['String']['input']>;
  problemTypeContains?: InputMaybe<Scalars['String']['input']>;
  problemTypeContainsFold?: InputMaybe<Scalars['String']['input']>;
  problemTypeEqualFold?: InputMaybe<Scalars['String']['input']>;
  problemTypeGT?: InputMaybe<Scalars['String']['input']>;
  problemTypeGTE?: InputMaybe<Scalars['String']['input']>;
  problemTypeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  problemTypeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  problemTypeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  problemTypeLT?: InputMaybe<Scalars['String']['input']>;
  problemTypeLTE?: InputMaybe<Scalars['String']['input']>;
  problemTypeNEQ?: InputMaybe<Scalars['String']['input']>;
  problemTypeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type BazelInvocationState = {
  __typename?: 'BazelInvocationState';
  bepCompleted: Scalars['Boolean']['output'];
  buildEndTime: Scalars['Time']['output'];
  buildStartTime: Scalars['Time']['output'];
  exitCode?: Maybe<ExitCode>;
  id: Scalars['ID']['output'];
};

/**
 * BazelInvocationWhereInput is used for filtering BazelInvocation objects.
 * Input was generated by ent.
 */
export type BazelInvocationWhereInput = {
  and?: InputMaybe<Array<BazelInvocationWhereInput>>;
  /** bep_completed field predicates */
  bepCompleted?: InputMaybe<Scalars['Boolean']['input']>;
  bepCompletedIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  bepCompletedNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  bepCompletedNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** build_logs field predicates */
  buildLogs?: InputMaybe<Scalars['String']['input']>;
  buildLogsContains?: InputMaybe<Scalars['String']['input']>;
  buildLogsContainsFold?: InputMaybe<Scalars['String']['input']>;
  buildLogsEqualFold?: InputMaybe<Scalars['String']['input']>;
  buildLogsGT?: InputMaybe<Scalars['String']['input']>;
  buildLogsGTE?: InputMaybe<Scalars['String']['input']>;
  buildLogsHasPrefix?: InputMaybe<Scalars['String']['input']>;
  buildLogsHasSuffix?: InputMaybe<Scalars['String']['input']>;
  buildLogsIn?: InputMaybe<Array<Scalars['String']['input']>>;
  buildLogsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  buildLogsLT?: InputMaybe<Scalars['String']['input']>;
  buildLogsLTE?: InputMaybe<Scalars['String']['input']>;
  buildLogsNEQ?: InputMaybe<Scalars['String']['input']>;
  buildLogsNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  buildLogsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** change_number field predicates */
  changeNumber?: InputMaybe<Scalars['Int']['input']>;
  changeNumberGT?: InputMaybe<Scalars['Int']['input']>;
  changeNumberGTE?: InputMaybe<Scalars['Int']['input']>;
  changeNumberIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  changeNumberIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  changeNumberLT?: InputMaybe<Scalars['Int']['input']>;
  changeNumberLTE?: InputMaybe<Scalars['Int']['input']>;
  changeNumberNEQ?: InputMaybe<Scalars['Int']['input']>;
  changeNumberNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  changeNumberNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** ended_at field predicates */
  endedAt?: InputMaybe<Scalars['Time']['input']>;
  endedAtGT?: InputMaybe<Scalars['Time']['input']>;
  endedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  endedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  endedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  endedAtLT?: InputMaybe<Scalars['Time']['input']>;
  endedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  endedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  endedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  endedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** build edge predicates */
  hasBuild?: InputMaybe<Scalars['Boolean']['input']>;
  hasBuildWith?: InputMaybe<Array<BuildWhereInput>>;
  /** event_file edge predicates */
  hasEventFile?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventFileWith?: InputMaybe<Array<EventFileWhereInput>>;
  /** problems edge predicates */
  hasProblems?: InputMaybe<Scalars['Boolean']['input']>;
  hasProblemsWith?: InputMaybe<Array<BazelInvocationProblemWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** invocation_id field predicates */
  invocationID?: InputMaybe<Scalars['UUID']['input']>;
  invocationIDGT?: InputMaybe<Scalars['UUID']['input']>;
  invocationIDGTE?: InputMaybe<Scalars['UUID']['input']>;
  invocationIDIn?: InputMaybe<Array<Scalars['UUID']['input']>>;
  invocationIDLT?: InputMaybe<Scalars['UUID']['input']>;
  invocationIDLTE?: InputMaybe<Scalars['UUID']['input']>;
  invocationIDNEQ?: InputMaybe<Scalars['UUID']['input']>;
  invocationIDNotIn?: InputMaybe<Array<Scalars['UUID']['input']>>;
  not?: InputMaybe<BazelInvocationWhereInput>;
  or?: InputMaybe<Array<BazelInvocationWhereInput>>;
  /** patchset_number field predicates */
  patchsetNumber?: InputMaybe<Scalars['Int']['input']>;
  patchsetNumberGT?: InputMaybe<Scalars['Int']['input']>;
  patchsetNumberGTE?: InputMaybe<Scalars['Int']['input']>;
  patchsetNumberIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  patchsetNumberIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  patchsetNumberLT?: InputMaybe<Scalars['Int']['input']>;
  patchsetNumberLTE?: InputMaybe<Scalars['Int']['input']>;
  patchsetNumberNEQ?: InputMaybe<Scalars['Int']['input']>;
  patchsetNumberNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  patchsetNumberNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** started_at field predicates */
  startedAt?: InputMaybe<Scalars['Time']['input']>;
  startedAtGT?: InputMaybe<Scalars['Time']['input']>;
  startedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  startedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  startedAtLT?: InputMaybe<Scalars['Time']['input']>;
  startedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  startedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  startedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** step_label field predicates */
  stepLabel?: InputMaybe<Scalars['String']['input']>;
  stepLabelContains?: InputMaybe<Scalars['String']['input']>;
  stepLabelContainsFold?: InputMaybe<Scalars['String']['input']>;
  stepLabelEqualFold?: InputMaybe<Scalars['String']['input']>;
  stepLabelGT?: InputMaybe<Scalars['String']['input']>;
  stepLabelGTE?: InputMaybe<Scalars['String']['input']>;
  stepLabelHasPrefix?: InputMaybe<Scalars['String']['input']>;
  stepLabelHasSuffix?: InputMaybe<Scalars['String']['input']>;
  stepLabelIn?: InputMaybe<Array<Scalars['String']['input']>>;
  stepLabelLT?: InputMaybe<Scalars['String']['input']>;
  stepLabelLTE?: InputMaybe<Scalars['String']['input']>;
  stepLabelNEQ?: InputMaybe<Scalars['String']['input']>;
  stepLabelNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** user_email field predicates */
  userEmail?: InputMaybe<Scalars['String']['input']>;
  userEmailContains?: InputMaybe<Scalars['String']['input']>;
  userEmailContainsFold?: InputMaybe<Scalars['String']['input']>;
  userEmailEqualFold?: InputMaybe<Scalars['String']['input']>;
  userEmailGT?: InputMaybe<Scalars['String']['input']>;
  userEmailGTE?: InputMaybe<Scalars['String']['input']>;
  userEmailHasPrefix?: InputMaybe<Scalars['String']['input']>;
  userEmailHasSuffix?: InputMaybe<Scalars['String']['input']>;
  userEmailIn?: InputMaybe<Array<Scalars['String']['input']>>;
  userEmailIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  userEmailLT?: InputMaybe<Scalars['String']['input']>;
  userEmailLTE?: InputMaybe<Scalars['String']['input']>;
  userEmailNEQ?: InputMaybe<Scalars['String']['input']>;
  userEmailNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  userEmailNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** user_ldap field predicates */
  userLdap?: InputMaybe<Scalars['String']['input']>;
  userLdapContains?: InputMaybe<Scalars['String']['input']>;
  userLdapContainsFold?: InputMaybe<Scalars['String']['input']>;
  userLdapEqualFold?: InputMaybe<Scalars['String']['input']>;
  userLdapGT?: InputMaybe<Scalars['String']['input']>;
  userLdapGTE?: InputMaybe<Scalars['String']['input']>;
  userLdapHasPrefix?: InputMaybe<Scalars['String']['input']>;
  userLdapHasSuffix?: InputMaybe<Scalars['String']['input']>;
  userLdapIn?: InputMaybe<Array<Scalars['String']['input']>>;
  userLdapIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  userLdapLT?: InputMaybe<Scalars['String']['input']>;
  userLdapLTE?: InputMaybe<Scalars['String']['input']>;
  userLdapNEQ?: InputMaybe<Scalars['String']['input']>;
  userLdapNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  userLdapNotNil?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Blob = Node & {
  __typename?: 'Blob';
  archiveURL?: Maybe<Scalars['String']['output']>;
  archivingStatus: BlobArchivingStatus;
  id: Scalars['ID']['output'];
  reason?: Maybe<Scalars['String']['output']>;
  sizeBytes?: Maybe<Scalars['Int']['output']>;
  uri: Scalars['String']['output'];
};

/** BlobArchivingStatus is enum for the field archiving_status */
export enum BlobArchivingStatus {
  Archiving = 'ARCHIVING',
  Failed = 'FAILED',
  Queued = 'QUEUED',
  Success = 'SUCCESS'
}

export type BlobReference = {
  __typename?: 'BlobReference';
  availabilityStatus: ActionOutputStatus;
  downloadURL: Scalars['String']['output'];
  name: Scalars['String']['output'];
  sizeInBytes?: Maybe<Scalars['Int']['output']>;
};

/**
 * BlobWhereInput is used for filtering Blob objects.
 * Input was generated by ent.
 */
export type BlobWhereInput = {
  and?: InputMaybe<Array<BlobWhereInput>>;
  /** archive_url field predicates */
  archiveURL?: InputMaybe<Scalars['String']['input']>;
  archiveURLContains?: InputMaybe<Scalars['String']['input']>;
  archiveURLContainsFold?: InputMaybe<Scalars['String']['input']>;
  archiveURLEqualFold?: InputMaybe<Scalars['String']['input']>;
  archiveURLGT?: InputMaybe<Scalars['String']['input']>;
  archiveURLGTE?: InputMaybe<Scalars['String']['input']>;
  archiveURLHasPrefix?: InputMaybe<Scalars['String']['input']>;
  archiveURLHasSuffix?: InputMaybe<Scalars['String']['input']>;
  archiveURLIn?: InputMaybe<Array<Scalars['String']['input']>>;
  archiveURLIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  archiveURLLT?: InputMaybe<Scalars['String']['input']>;
  archiveURLLTE?: InputMaybe<Scalars['String']['input']>;
  archiveURLNEQ?: InputMaybe<Scalars['String']['input']>;
  archiveURLNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  archiveURLNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** archiving_status field predicates */
  archivingStatus?: InputMaybe<BlobArchivingStatus>;
  archivingStatusIn?: InputMaybe<Array<BlobArchivingStatus>>;
  archivingStatusNEQ?: InputMaybe<BlobArchivingStatus>;
  archivingStatusNotIn?: InputMaybe<Array<BlobArchivingStatus>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<BlobWhereInput>;
  or?: InputMaybe<Array<BlobWhereInput>>;
  /** reason field predicates */
  reason?: InputMaybe<Scalars['String']['input']>;
  reasonContains?: InputMaybe<Scalars['String']['input']>;
  reasonContainsFold?: InputMaybe<Scalars['String']['input']>;
  reasonEqualFold?: InputMaybe<Scalars['String']['input']>;
  reasonGT?: InputMaybe<Scalars['String']['input']>;
  reasonGTE?: InputMaybe<Scalars['String']['input']>;
  reasonHasPrefix?: InputMaybe<Scalars['String']['input']>;
  reasonHasSuffix?: InputMaybe<Scalars['String']['input']>;
  reasonIn?: InputMaybe<Array<Scalars['String']['input']>>;
  reasonIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  reasonLT?: InputMaybe<Scalars['String']['input']>;
  reasonLTE?: InputMaybe<Scalars['String']['input']>;
  reasonNEQ?: InputMaybe<Scalars['String']['input']>;
  reasonNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  reasonNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** size_bytes field predicates */
  sizeBytes?: InputMaybe<Scalars['Int']['input']>;
  sizeBytesGT?: InputMaybe<Scalars['Int']['input']>;
  sizeBytesGTE?: InputMaybe<Scalars['Int']['input']>;
  sizeBytesIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  sizeBytesIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  sizeBytesLT?: InputMaybe<Scalars['Int']['input']>;
  sizeBytesLTE?: InputMaybe<Scalars['Int']['input']>;
  sizeBytesNEQ?: InputMaybe<Scalars['Int']['input']>;
  sizeBytesNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  sizeBytesNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** uri field predicates */
  uri?: InputMaybe<Scalars['String']['input']>;
  uriContains?: InputMaybe<Scalars['String']['input']>;
  uriContainsFold?: InputMaybe<Scalars['String']['input']>;
  uriEqualFold?: InputMaybe<Scalars['String']['input']>;
  uriGT?: InputMaybe<Scalars['String']['input']>;
  uriGTE?: InputMaybe<Scalars['String']['input']>;
  uriHasPrefix?: InputMaybe<Scalars['String']['input']>;
  uriHasSuffix?: InputMaybe<Scalars['String']['input']>;
  uriIn?: InputMaybe<Array<Scalars['String']['input']>>;
  uriLT?: InputMaybe<Scalars['String']['input']>;
  uriLTE?: InputMaybe<Scalars['String']['input']>;
  uriNEQ?: InputMaybe<Scalars['String']['input']>;
  uriNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type Build = Node & {
  __typename?: 'Build';
  buildURL: Scalars['String']['output'];
  buildUUID: Scalars['UUID']['output'];
  env: Array<EnvVar>;
  id: Scalars['ID']['output'];
  invocations?: Maybe<Array<BazelInvocation>>;
};

/** A connection to a list of items. */
export type BuildConnection = {
  __typename?: 'BuildConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BuildEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type BuildEdge = {
  __typename?: 'BuildEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Build>;
};

export type BuildStep = {
  buildStepStatus: BuildStepStatus;
  id: Scalars['ID']['output'];
  stepLabel: Scalars['String']['output'];
};

export enum BuildStepStatus {
  Cancelled = 'Cancelled',
  Failed = 'Failed',
  Successful = 'Successful',
  Unknown = 'Unknown'
}

/**
 * BuildWhereInput is used for filtering Build objects.
 * Input was generated by ent.
 */
export type BuildWhereInput = {
  and?: InputMaybe<Array<BuildWhereInput>>;
  /** build_url field predicates */
  buildURL?: InputMaybe<Scalars['String']['input']>;
  buildURLContains?: InputMaybe<Scalars['String']['input']>;
  buildURLContainsFold?: InputMaybe<Scalars['String']['input']>;
  buildURLEqualFold?: InputMaybe<Scalars['String']['input']>;
  buildURLGT?: InputMaybe<Scalars['String']['input']>;
  buildURLGTE?: InputMaybe<Scalars['String']['input']>;
  buildURLHasPrefix?: InputMaybe<Scalars['String']['input']>;
  buildURLHasSuffix?: InputMaybe<Scalars['String']['input']>;
  buildURLIn?: InputMaybe<Array<Scalars['String']['input']>>;
  buildURLLT?: InputMaybe<Scalars['String']['input']>;
  buildURLLTE?: InputMaybe<Scalars['String']['input']>;
  buildURLNEQ?: InputMaybe<Scalars['String']['input']>;
  buildURLNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** build_uuid field predicates */
  buildUUID?: InputMaybe<Scalars['UUID']['input']>;
  buildUUIDGT?: InputMaybe<Scalars['UUID']['input']>;
  buildUUIDGTE?: InputMaybe<Scalars['UUID']['input']>;
  buildUUIDIn?: InputMaybe<Array<Scalars['UUID']['input']>>;
  buildUUIDLT?: InputMaybe<Scalars['UUID']['input']>;
  buildUUIDLTE?: InputMaybe<Scalars['UUID']['input']>;
  buildUUIDNEQ?: InputMaybe<Scalars['UUID']['input']>;
  buildUUIDNotIn?: InputMaybe<Array<Scalars['UUID']['input']>>;
  /** invocations edge predicates */
  hasInvocations?: InputMaybe<Scalars['Boolean']['input']>;
  hasInvocationsWith?: InputMaybe<Array<BazelInvocationWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<BuildWhereInput>;
  or?: InputMaybe<Array<BuildWhereInput>>;
};

export type EnvVar = {
  __typename?: 'EnvVar';
  key: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type EventFile = Node & {
  __typename?: 'EventFile';
  bazelInvocation?: Maybe<BazelInvocation>;
  id: Scalars['ID']['output'];
  mimeType: Scalars['String']['output'];
  modTime: Scalars['Time']['output'];
  protocol: Scalars['String']['output'];
  reason?: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

/**
 * EventFileWhereInput is used for filtering EventFile objects.
 * Input was generated by ent.
 */
export type EventFileWhereInput = {
  and?: InputMaybe<Array<EventFileWhereInput>>;
  /** bazel_invocation edge predicates */
  hasBazelInvocation?: InputMaybe<Scalars['Boolean']['input']>;
  hasBazelInvocationWith?: InputMaybe<Array<BazelInvocationWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** mime_type field predicates */
  mimeType?: InputMaybe<Scalars['String']['input']>;
  mimeTypeContains?: InputMaybe<Scalars['String']['input']>;
  mimeTypeContainsFold?: InputMaybe<Scalars['String']['input']>;
  mimeTypeEqualFold?: InputMaybe<Scalars['String']['input']>;
  mimeTypeGT?: InputMaybe<Scalars['String']['input']>;
  mimeTypeGTE?: InputMaybe<Scalars['String']['input']>;
  mimeTypeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  mimeTypeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  mimeTypeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  mimeTypeLT?: InputMaybe<Scalars['String']['input']>;
  mimeTypeLTE?: InputMaybe<Scalars['String']['input']>;
  mimeTypeNEQ?: InputMaybe<Scalars['String']['input']>;
  mimeTypeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** mod_time field predicates */
  modTime?: InputMaybe<Scalars['Time']['input']>;
  modTimeGT?: InputMaybe<Scalars['Time']['input']>;
  modTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  modTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  modTimeLT?: InputMaybe<Scalars['Time']['input']>;
  modTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  modTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  modTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  not?: InputMaybe<EventFileWhereInput>;
  or?: InputMaybe<Array<EventFileWhereInput>>;
  /** protocol field predicates */
  protocol?: InputMaybe<Scalars['String']['input']>;
  protocolContains?: InputMaybe<Scalars['String']['input']>;
  protocolContainsFold?: InputMaybe<Scalars['String']['input']>;
  protocolEqualFold?: InputMaybe<Scalars['String']['input']>;
  protocolGT?: InputMaybe<Scalars['String']['input']>;
  protocolGTE?: InputMaybe<Scalars['String']['input']>;
  protocolHasPrefix?: InputMaybe<Scalars['String']['input']>;
  protocolHasSuffix?: InputMaybe<Scalars['String']['input']>;
  protocolIn?: InputMaybe<Array<Scalars['String']['input']>>;
  protocolLT?: InputMaybe<Scalars['String']['input']>;
  protocolLTE?: InputMaybe<Scalars['String']['input']>;
  protocolNEQ?: InputMaybe<Scalars['String']['input']>;
  protocolNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** reason field predicates */
  reason?: InputMaybe<Scalars['String']['input']>;
  reasonContains?: InputMaybe<Scalars['String']['input']>;
  reasonContainsFold?: InputMaybe<Scalars['String']['input']>;
  reasonEqualFold?: InputMaybe<Scalars['String']['input']>;
  reasonGT?: InputMaybe<Scalars['String']['input']>;
  reasonGTE?: InputMaybe<Scalars['String']['input']>;
  reasonHasPrefix?: InputMaybe<Scalars['String']['input']>;
  reasonHasSuffix?: InputMaybe<Scalars['String']['input']>;
  reasonIn?: InputMaybe<Array<Scalars['String']['input']>>;
  reasonIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  reasonLT?: InputMaybe<Scalars['String']['input']>;
  reasonLTE?: InputMaybe<Scalars['String']['input']>;
  reasonNEQ?: InputMaybe<Scalars['String']['input']>;
  reasonNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  reasonNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** status field predicates */
  status?: InputMaybe<Scalars['String']['input']>;
  statusContains?: InputMaybe<Scalars['String']['input']>;
  statusContainsFold?: InputMaybe<Scalars['String']['input']>;
  statusEqualFold?: InputMaybe<Scalars['String']['input']>;
  statusGT?: InputMaybe<Scalars['String']['input']>;
  statusGTE?: InputMaybe<Scalars['String']['input']>;
  statusHasPrefix?: InputMaybe<Scalars['String']['input']>;
  statusHasSuffix?: InputMaybe<Scalars['String']['input']>;
  statusIn?: InputMaybe<Array<Scalars['String']['input']>>;
  statusLT?: InputMaybe<Scalars['String']['input']>;
  statusLTE?: InputMaybe<Scalars['String']['input']>;
  statusNEQ?: InputMaybe<Scalars['String']['input']>;
  statusNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** url field predicates */
  url?: InputMaybe<Scalars['String']['input']>;
  urlContains?: InputMaybe<Scalars['String']['input']>;
  urlContainsFold?: InputMaybe<Scalars['String']['input']>;
  urlEqualFold?: InputMaybe<Scalars['String']['input']>;
  urlGT?: InputMaybe<Scalars['String']['input']>;
  urlGTE?: InputMaybe<Scalars['String']['input']>;
  urlHasPrefix?: InputMaybe<Scalars['String']['input']>;
  urlHasSuffix?: InputMaybe<Scalars['String']['input']>;
  urlIn?: InputMaybe<Array<Scalars['String']['input']>>;
  urlLT?: InputMaybe<Scalars['String']['input']>;
  urlLTE?: InputMaybe<Scalars['String']['input']>;
  urlNEQ?: InputMaybe<Scalars['String']['input']>;
  urlNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ExitCode = {
  __typename?: 'ExitCode';
  code: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type NamedFile = {
  __typename?: 'NamedFile';
  name: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

/**
 * An object with an ID.
 * Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
 */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
};

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

/**
 * Information about pagination in a connection.
 * https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
 */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']['output']>;
};

export type Problem = {
  id: Scalars['ID']['output'];
  label: Scalars['String']['output'];
};

export type ProgressProblem = Node & Problem & {
  __typename?: 'ProgressProblem';
  id: Scalars['ID']['output'];
  label: Scalars['String']['output'];
  output: Scalars['String']['output'];
};

export type Query = {
  __typename?: 'Query';
  bazelInvocation: BazelInvocation;
  findBazelInvocations: BazelInvocationConnection;
  findBuilds: BuildConnection;
  getBuild?: Maybe<Build>;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>;
};


export type QueryBazelInvocationArgs = {
  invocationId: Scalars['String']['input'];
};


export type QueryFindBazelInvocationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BazelInvocationWhereInput>;
};


export type QueryFindBuildsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BuildWhereInput>;
};


export type QueryGetBuildArgs = {
  buildURL?: InputMaybe<Scalars['String']['input']>;
  buildUUID?: InputMaybe<Scalars['UUID']['input']>;
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']['input']>;
};

export type TargetProblem = Node & Problem & {
  __typename?: 'TargetProblem';
  id: Scalars['ID']['output'];
  label: Scalars['String']['output'];
};

export type TestProblem = Node & Problem & {
  __typename?: 'TestProblem';
  id: Scalars['ID']['output'];
  label: Scalars['String']['output'];
  results: Array<TestResult>;
  status: Scalars['String']['output'];
};

export type TestResult = Node & {
  __typename?: 'TestResult';
  actionLogOutput: BlobReference;
  attempt: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  run: Scalars['Int']['output'];
  shard: Scalars['Int']['output'];
  status: Scalars['String']['output'];
  undeclaredTestOutputs?: Maybe<BlobReference>;
};

export type User = {
  __typename?: 'User';
  Email: Scalars['String']['output'];
  LDAP: Scalars['String']['output'];
  id: Scalars['ID']['output'];
};

export type LoadFullBazelInvocationDetailsQueryVariables = Exact<{
  invocationID: Scalars['String']['input'];
}>;


export type LoadFullBazelInvocationDetailsQuery = { __typename?: 'Query', bazelInvocation: (
    { __typename?: 'BazelInvocation' }
    & { ' $fragmentRefs'?: { 'FullBazelInvocationDetailsFragment': FullBazelInvocationDetailsFragment } }
  ) };

export type BazelInvocationInfoFragment = { __typename?: 'BazelInvocation', id: string, invocationID: any, startedAt: any, endedAt?: any | null, stepLabel: string, bazelCommand: { __typename?: 'BazelCommand', command: string, executable: string, id: string, residual: string, buildOptions: string }, build?: { __typename?: 'Build', id: string, buildUUID: any } | null, relatedFiles: Array<{ __typename?: 'NamedFile', name: string, url: string }>, user?: { __typename?: 'User', Email: string, LDAP: string } | null, state: { __typename?: 'BazelInvocationState', bepCompleted: boolean, buildEndTime: any, buildStartTime: any, id: string, exitCode?: { __typename?: 'ExitCode', code: number, id: string, name: string } | null } } & { ' $fragmentName'?: 'BazelInvocationInfoFragment' };

type ProblemInfo_ActionProblem_Fragment = { __typename: 'ActionProblem', id: string, label: string, type: string, stdout?: (
    { __typename?: 'BlobReference' }
    & { ' $fragmentRefs'?: { 'BlobReferenceInfoFragment': BlobReferenceInfoFragment } }
  ) | null, stderr?: (
    { __typename?: 'BlobReference' }
    & { ' $fragmentRefs'?: { 'BlobReferenceInfoFragment': BlobReferenceInfoFragment } }
  ) | null } & { ' $fragmentName'?: 'ProblemInfo_ActionProblem_Fragment' };

type ProblemInfo_ProgressProblem_Fragment = { __typename: 'ProgressProblem', id: string, output: string, label: string } & { ' $fragmentName'?: 'ProblemInfo_ProgressProblem_Fragment' };

type ProblemInfo_TargetProblem_Fragment = { __typename: 'TargetProblem', id: string, label: string } & { ' $fragmentName'?: 'ProblemInfo_TargetProblem_Fragment' };

type ProblemInfo_TestProblem_Fragment = { __typename: 'TestProblem', id: string, label: string, status: string, results: Array<{ __typename: 'TestResult', id: string, run: number, shard: number, attempt: number, status: string, actionLogOutput: (
      { __typename?: 'BlobReference' }
      & { ' $fragmentRefs'?: { 'BlobReferenceInfoFragment': BlobReferenceInfoFragment } }
    ), undeclaredTestOutputs?: (
      { __typename?: 'BlobReference' }
      & { ' $fragmentRefs'?: { 'BlobReferenceInfoFragment': BlobReferenceInfoFragment } }
    ) | null }> } & { ' $fragmentName'?: 'ProblemInfo_TestProblem_Fragment' };

export type ProblemInfoFragment = ProblemInfo_ActionProblem_Fragment | ProblemInfo_ProgressProblem_Fragment | ProblemInfo_TargetProblem_Fragment | ProblemInfo_TestProblem_Fragment;

export type BlobReferenceInfoFragment = { __typename?: 'BlobReference', availabilityStatus: ActionOutputStatus, name: string, sizeInBytes?: number | null, downloadURL: string } & { ' $fragmentName'?: 'BlobReferenceInfoFragment' };

export type FullBazelInvocationDetailsFragment = (
  { __typename?: 'BazelInvocation', problems: Array<(
    { __typename?: 'ActionProblem' }
    & { ' $fragmentRefs'?: { 'ProblemInfo_ActionProblem_Fragment': ProblemInfo_ActionProblem_Fragment } }
  ) | (
    { __typename?: 'ProgressProblem' }
    & { ' $fragmentRefs'?: { 'ProblemInfo_ProgressProblem_Fragment': ProblemInfo_ProgressProblem_Fragment } }
  ) | (
    { __typename?: 'TargetProblem' }
    & { ' $fragmentRefs'?: { 'ProblemInfo_TargetProblem_Fragment': ProblemInfo_TargetProblem_Fragment } }
  ) | (
    { __typename?: 'TestProblem' }
    & { ' $fragmentRefs'?: { 'ProblemInfo_TestProblem_Fragment': ProblemInfo_TestProblem_Fragment } }
  )> }
  & { ' $fragmentRefs'?: { 'BazelInvocationInfoFragment': BazelInvocationInfoFragment } }
) & { ' $fragmentName'?: 'FullBazelInvocationDetailsFragment' };

export type GetActionProblemQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetActionProblemQuery = { __typename?: 'Query', node?: { __typename?: 'ActionProblem', label: string, id: string, stdout?: (
      { __typename?: 'BlobReference' }
      & { ' $fragmentRefs'?: { 'BlobReferenceInfoFragment': BlobReferenceInfoFragment } }
    ) | null, stderr?: (
      { __typename?: 'BlobReference' }
      & { ' $fragmentRefs'?: { 'BlobReferenceInfoFragment': BlobReferenceInfoFragment } }
    ) | null } | { __typename?: 'BazelInvocation', id: string } | { __typename?: 'BazelInvocationProblem', id: string } | { __typename?: 'Blob', id: string } | { __typename?: 'Build', id: string } | { __typename?: 'EventFile', id: string } | { __typename?: 'ProgressProblem', id: string } | { __typename?: 'TargetProblem', id: string } | { __typename?: 'TestProblem', id: string } | { __typename?: 'TestResult', id: string } | null };

export type TestResultInfoFragment = { __typename?: 'TestResult', attempt: number, run: number, shard: number, status: string, actionLogOutput: (
    { __typename?: 'BlobReference' }
    & { ' $fragmentRefs'?: { 'BlobReferenceInfoFragment': BlobReferenceInfoFragment } }
  ), undeclaredTestOutputs?: (
    { __typename?: 'BlobReference' }
    & { ' $fragmentRefs'?: { 'BlobReferenceInfoFragment': BlobReferenceInfoFragment } }
  ) | null } & { ' $fragmentName'?: 'TestResultInfoFragment' };

export type FindBuildByUuidQueryVariables = Exact<{
  url?: InputMaybe<Scalars['String']['input']>;
  uuid?: InputMaybe<Scalars['UUID']['input']>;
}>;


export type FindBuildByUuidQuery = { __typename?: 'Query', getBuild?: { __typename?: 'Build', id: string, buildURL: string, buildUUID: any, invocations?: Array<(
      { __typename?: 'BazelInvocation' }
      & { ' $fragmentRefs'?: { 'FullBazelInvocationDetailsFragment': FullBazelInvocationDetailsFragment } }
    )> | null, env: Array<{ __typename?: 'EnvVar', key: string, value: string }> } | null };

export type FindBazelInvocationsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  where?: InputMaybe<BazelInvocationWhereInput>;
}>;


export type FindBazelInvocationsQuery = { __typename?: 'Query', findBazelInvocations: { __typename?: 'BazelInvocationConnection', edges?: Array<{ __typename?: 'BazelInvocationEdge', node?: (
        { __typename?: 'BazelInvocation' }
        & { ' $fragmentRefs'?: { 'BazelInvocationNodeFragment': BazelInvocationNodeFragment } }
      ) | null } | null> | null } };

export type BazelInvocationNodeFragment = { __typename?: 'BazelInvocation', id: string, invocationID: any, startedAt: any, endedAt?: any | null, user?: { __typename?: 'User', Email: string, LDAP: string } | null, state: { __typename?: 'BazelInvocationState', bepCompleted: boolean, exitCode?: { __typename?: 'ExitCode', code: number, name: string } | null }, build?: { __typename?: 'Build', buildUUID: any } | null } & { ' $fragmentName'?: 'BazelInvocationNodeFragment' };

export type FindBuildsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  where?: InputMaybe<BuildWhereInput>;
}>;


export type FindBuildsQuery = { __typename?: 'Query', findBuilds: { __typename?: 'BuildConnection', edges?: Array<{ __typename?: 'BuildEdge', node?: (
        { __typename?: 'Build' }
        & { ' $fragmentRefs'?: { 'BuildNodeFragment': BuildNodeFragment } }
      ) | null } | null> | null } };

export type BuildNodeFragment = { __typename?: 'Build', id: string, buildUUID: any, buildURL: string } & { ' $fragmentName'?: 'BuildNodeFragment' };

export const BlobReferenceInfoFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlobReferenceInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BlobReference"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"availabilityStatus"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"sizeInBytes"}},{"kind":"Field","name":{"kind":"Name","value":"downloadURL"}}]}}]} as unknown as DocumentNode<BlobReferenceInfoFragment, unknown>;
export const ProblemInfoFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProblemInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Problem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ActionProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"stdout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}},{"kind":"Field","name":{"kind":"Name","value":"stderr"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TestProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"results"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"run"}},{"kind":"Field","name":{"kind":"Name","value":"shard"}},{"kind":"Field","name":{"kind":"Name","value":"attempt"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"actionLogOutput"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}},{"kind":"Field","name":{"kind":"Name","value":"undeclaredTestOutputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TargetProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProgressProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"output"}},{"kind":"Field","name":{"kind":"Name","value":"label"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlobReferenceInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BlobReference"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"availabilityStatus"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"sizeInBytes"}},{"kind":"Field","name":{"kind":"Name","value":"downloadURL"}}]}}]} as unknown as DocumentNode<ProblemInfoFragment, unknown>;
export const BazelInvocationInfoFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BazelInvocationInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BazelInvocation"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bazelCommand"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"command"}},{"kind":"Field","name":{"kind":"Name","value":"executable"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"buildOptions"},"name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"residual"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"invocationID"}},{"kind":"Field","name":{"kind":"Name","value":"build"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"buildUUID"}}]}},{"kind":"Field","name":{"kind":"Name","value":"relatedFiles"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Email"}},{"kind":"Field","name":{"kind":"Name","value":"LDAP"}}]}},{"kind":"Field","name":{"kind":"Name","value":"startedAt"}},{"kind":"Field","name":{"kind":"Name","value":"endedAt"}},{"kind":"Field","name":{"kind":"Name","value":"state"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bepCompleted"}},{"kind":"Field","name":{"kind":"Name","value":"buildEndTime"}},{"kind":"Field","name":{"kind":"Name","value":"buildStartTime"}},{"kind":"Field","name":{"kind":"Name","value":"exitCode"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"stepLabel"}}]}}]} as unknown as DocumentNode<BazelInvocationInfoFragment, unknown>;
export const FullBazelInvocationDetailsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"FullBazelInvocationDetails"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BazelInvocation"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"problems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProblemInfo"}}]}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"BazelInvocationInfo"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlobReferenceInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BlobReference"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"availabilityStatus"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"sizeInBytes"}},{"kind":"Field","name":{"kind":"Name","value":"downloadURL"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProblemInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Problem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ActionProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"stdout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}},{"kind":"Field","name":{"kind":"Name","value":"stderr"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TestProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"results"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"run"}},{"kind":"Field","name":{"kind":"Name","value":"shard"}},{"kind":"Field","name":{"kind":"Name","value":"attempt"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"actionLogOutput"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}},{"kind":"Field","name":{"kind":"Name","value":"undeclaredTestOutputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TargetProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProgressProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"output"}},{"kind":"Field","name":{"kind":"Name","value":"label"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BazelInvocationInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BazelInvocation"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bazelCommand"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"command"}},{"kind":"Field","name":{"kind":"Name","value":"executable"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"buildOptions"},"name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"residual"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"invocationID"}},{"kind":"Field","name":{"kind":"Name","value":"build"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"buildUUID"}}]}},{"kind":"Field","name":{"kind":"Name","value":"relatedFiles"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Email"}},{"kind":"Field","name":{"kind":"Name","value":"LDAP"}}]}},{"kind":"Field","name":{"kind":"Name","value":"startedAt"}},{"kind":"Field","name":{"kind":"Name","value":"endedAt"}},{"kind":"Field","name":{"kind":"Name","value":"state"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bepCompleted"}},{"kind":"Field","name":{"kind":"Name","value":"buildEndTime"}},{"kind":"Field","name":{"kind":"Name","value":"buildStartTime"}},{"kind":"Field","name":{"kind":"Name","value":"exitCode"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"stepLabel"}}]}}]} as unknown as DocumentNode<FullBazelInvocationDetailsFragment, unknown>;
export const TestResultInfoFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TestResultInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TestResult"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"actionLogOutput"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}},{"kind":"Field","name":{"kind":"Name","value":"attempt"}},{"kind":"Field","name":{"kind":"Name","value":"run"}},{"kind":"Field","name":{"kind":"Name","value":"shard"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"undeclaredTestOutputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlobReferenceInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BlobReference"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"availabilityStatus"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"sizeInBytes"}},{"kind":"Field","name":{"kind":"Name","value":"downloadURL"}}]}}]} as unknown as DocumentNode<TestResultInfoFragment, unknown>;
export const BazelInvocationNodeFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BazelInvocationNode"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BazelInvocation"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"invocationID"}},{"kind":"Field","name":{"kind":"Name","value":"startedAt"}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Email"}},{"kind":"Field","name":{"kind":"Name","value":"LDAP"}}]}},{"kind":"Field","name":{"kind":"Name","value":"endedAt"}},{"kind":"Field","name":{"kind":"Name","value":"state"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bepCompleted"}},{"kind":"Field","name":{"kind":"Name","value":"exitCode"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"build"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"buildUUID"}}]}}]}}]} as unknown as DocumentNode<BazelInvocationNodeFragment, unknown>;
export const BuildNodeFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BuildNode"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Build"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"buildUUID"}},{"kind":"Field","name":{"kind":"Name","value":"buildURL"}}]}}]} as unknown as DocumentNode<BuildNodeFragment, unknown>;
export const LoadFullBazelInvocationDetailsDocument = {"__meta__":{"hash":"0972be40a004a506c71137035e0574e842e5a6e6"},"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"LoadFullBazelInvocationDetails"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"invocationID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bazelInvocation"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"invocationId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"invocationID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"FullBazelInvocationDetails"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlobReferenceInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BlobReference"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"availabilityStatus"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"sizeInBytes"}},{"kind":"Field","name":{"kind":"Name","value":"downloadURL"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProblemInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Problem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ActionProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"stdout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}},{"kind":"Field","name":{"kind":"Name","value":"stderr"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TestProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"results"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"run"}},{"kind":"Field","name":{"kind":"Name","value":"shard"}},{"kind":"Field","name":{"kind":"Name","value":"attempt"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"actionLogOutput"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}},{"kind":"Field","name":{"kind":"Name","value":"undeclaredTestOutputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TargetProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProgressProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"output"}},{"kind":"Field","name":{"kind":"Name","value":"label"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BazelInvocationInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BazelInvocation"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bazelCommand"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"command"}},{"kind":"Field","name":{"kind":"Name","value":"executable"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"buildOptions"},"name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"residual"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"invocationID"}},{"kind":"Field","name":{"kind":"Name","value":"build"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"buildUUID"}}]}},{"kind":"Field","name":{"kind":"Name","value":"relatedFiles"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Email"}},{"kind":"Field","name":{"kind":"Name","value":"LDAP"}}]}},{"kind":"Field","name":{"kind":"Name","value":"startedAt"}},{"kind":"Field","name":{"kind":"Name","value":"endedAt"}},{"kind":"Field","name":{"kind":"Name","value":"state"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bepCompleted"}},{"kind":"Field","name":{"kind":"Name","value":"buildEndTime"}},{"kind":"Field","name":{"kind":"Name","value":"buildStartTime"}},{"kind":"Field","name":{"kind":"Name","value":"exitCode"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"stepLabel"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"FullBazelInvocationDetails"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BazelInvocation"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"problems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProblemInfo"}}]}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"BazelInvocationInfo"}}]}}]} as unknown as DocumentNode<LoadFullBazelInvocationDetailsQuery, LoadFullBazelInvocationDetailsQueryVariables>;
export const GetActionProblemDocument = {"__meta__":{"hash":"3368384a6bed2b74e78f79b5dc6df1bdd1de7bcc"},"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetActionProblem"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ActionProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"stdout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}},{"kind":"Field","name":{"kind":"Name","value":"stderr"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlobReferenceInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BlobReference"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"availabilityStatus"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"sizeInBytes"}},{"kind":"Field","name":{"kind":"Name","value":"downloadURL"}}]}}]} as unknown as DocumentNode<GetActionProblemQuery, GetActionProblemQueryVariables>;
export const FindBuildByUuidDocument = {"__meta__":{"hash":"2cec8e9fe5b1ec82c4ceea0d9c91e4d17aab86e9"},"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"FindBuildByUUID"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"url"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"uuid"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getBuild"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"buildURL"},"value":{"kind":"Variable","name":{"kind":"Name","value":"url"}}},{"kind":"Argument","name":{"kind":"Name","value":"buildUUID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"uuid"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"buildURL"}},{"kind":"Field","name":{"kind":"Name","value":"buildUUID"}},{"kind":"Field","name":{"kind":"Name","value":"invocations"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"FullBazelInvocationDetails"}}]}},{"kind":"Field","name":{"kind":"Name","value":"env"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"value"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BlobReferenceInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BlobReference"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"availabilityStatus"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"sizeInBytes"}},{"kind":"Field","name":{"kind":"Name","value":"downloadURL"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProblemInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Problem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ActionProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"stdout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}},{"kind":"Field","name":{"kind":"Name","value":"stderr"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TestProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"results"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"run"}},{"kind":"Field","name":{"kind":"Name","value":"shard"}},{"kind":"Field","name":{"kind":"Name","value":"attempt"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"actionLogOutput"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}},{"kind":"Field","name":{"kind":"Name","value":"undeclaredTestOutputs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BlobReferenceInfo"}}]}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TargetProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProgressProblem"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"output"}},{"kind":"Field","name":{"kind":"Name","value":"label"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BazelInvocationInfo"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BazelInvocation"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bazelCommand"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"command"}},{"kind":"Field","name":{"kind":"Name","value":"executable"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"buildOptions"},"name":{"kind":"Name","value":"options"}},{"kind":"Field","name":{"kind":"Name","value":"residual"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"invocationID"}},{"kind":"Field","name":{"kind":"Name","value":"build"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"buildUUID"}}]}},{"kind":"Field","name":{"kind":"Name","value":"relatedFiles"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Email"}},{"kind":"Field","name":{"kind":"Name","value":"LDAP"}}]}},{"kind":"Field","name":{"kind":"Name","value":"startedAt"}},{"kind":"Field","name":{"kind":"Name","value":"endedAt"}},{"kind":"Field","name":{"kind":"Name","value":"state"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bepCompleted"}},{"kind":"Field","name":{"kind":"Name","value":"buildEndTime"}},{"kind":"Field","name":{"kind":"Name","value":"buildStartTime"}},{"kind":"Field","name":{"kind":"Name","value":"exitCode"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"stepLabel"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"FullBazelInvocationDetails"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BazelInvocation"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"problems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProblemInfo"}}]}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"BazelInvocationInfo"}}]}}]} as unknown as DocumentNode<FindBuildByUuidQuery, FindBuildByUuidQueryVariables>;
export const FindBazelInvocationsDocument = {"__meta__":{"hash":"7151b14bba5e7ea3e0f6e50882cc2f429591feb9"},"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"FindBazelInvocations"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"first"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"BazelInvocationWhereInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"findBazelInvocations"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"Variable","name":{"kind":"Name","value":"first"}}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BazelInvocationNode"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BazelInvocationNode"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"BazelInvocation"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"invocationID"}},{"kind":"Field","name":{"kind":"Name","value":"startedAt"}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Email"}},{"kind":"Field","name":{"kind":"Name","value":"LDAP"}}]}},{"kind":"Field","name":{"kind":"Name","value":"endedAt"}},{"kind":"Field","name":{"kind":"Name","value":"state"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"bepCompleted"}},{"kind":"Field","name":{"kind":"Name","value":"exitCode"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"code"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"build"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"buildUUID"}}]}}]}}]} as unknown as DocumentNode<FindBazelInvocationsQuery, FindBazelInvocationsQueryVariables>;
export const FindBuildsDocument = {"__meta__":{"hash":"8edb3e7557d6c22033afe132a5975af6d3ffb001"},"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"FindBuilds"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"first"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"BuildWhereInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"findBuilds"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"Variable","name":{"kind":"Name","value":"first"}}},{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"BuildNode"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"BuildNode"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Build"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"buildUUID"}},{"kind":"Field","name":{"kind":"Name","value":"buildURL"}}]}}]} as unknown as DocumentNode<FindBuildsQuery, FindBuildsQueryVariables>;