directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type BazelInvocation implements Node {
  id: ID!
  invocationID: UUID!
  startedAt: Time!
  endedAt: Time
  changeNumber: Int
  patchsetNumber: Int
  bepCompleted: Boolean
  stepLabel: String!
  userEmail: String
  userLdap: String
  eventFile: EventFile!
  build: Build
}
"""
A connection to a list of items.
"""
type BazelInvocationConnection {
  """
  A list of edges.
  """
  edges: [BazelInvocationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type BazelInvocationEdge {
  """
  The item at the end of the edge.
  """
  node: BazelInvocation
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type BazelInvocationProblem implements Node {
  id: ID!
  problemType: String!
  label: String!
  bazelInvocation: BazelInvocation
}
"""
BazelInvocationProblemWhereInput is used for filtering BazelInvocationProblem objects.
Input was generated by ent.
"""
input BazelInvocationProblemWhereInput {
  not: BazelInvocationProblemWhereInput
  and: [BazelInvocationProblemWhereInput!]
  or: [BazelInvocationProblemWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  problem_type field predicates
  """
  problemType: String
  problemTypeNEQ: String
  problemTypeIn: [String!]
  problemTypeNotIn: [String!]
  problemTypeGT: String
  problemTypeGTE: String
  problemTypeLT: String
  problemTypeLTE: String
  problemTypeContains: String
  problemTypeHasPrefix: String
  problemTypeHasSuffix: String
  problemTypeEqualFold: String
  problemTypeContainsFold: String
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  bazel_invocation edge predicates
  """
  hasBazelInvocation: Boolean
  hasBazelInvocationWith: [BazelInvocationWhereInput!]
}
"""
BazelInvocationWhereInput is used for filtering BazelInvocation objects.
Input was generated by ent.
"""
input BazelInvocationWhereInput {
  not: BazelInvocationWhereInput
  and: [BazelInvocationWhereInput!]
  or: [BazelInvocationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  invocation_id field predicates
  """
  invocationID: UUID
  invocationIDNEQ: UUID
  invocationIDIn: [UUID!]
  invocationIDNotIn: [UUID!]
  invocationIDGT: UUID
  invocationIDGTE: UUID
  invocationIDLT: UUID
  invocationIDLTE: UUID
  """
  started_at field predicates
  """
  startedAt: Time
  startedAtNEQ: Time
  startedAtIn: [Time!]
  startedAtNotIn: [Time!]
  startedAtGT: Time
  startedAtGTE: Time
  startedAtLT: Time
  startedAtLTE: Time
  """
  ended_at field predicates
  """
  endedAt: Time
  endedAtNEQ: Time
  endedAtIn: [Time!]
  endedAtNotIn: [Time!]
  endedAtGT: Time
  endedAtGTE: Time
  endedAtLT: Time
  endedAtLTE: Time
  endedAtIsNil: Boolean
  endedAtNotNil: Boolean
  """
  change_number field predicates
  """
  changeNumber: Int
  changeNumberNEQ: Int
  changeNumberIn: [Int!]
  changeNumberNotIn: [Int!]
  changeNumberGT: Int
  changeNumberGTE: Int
  changeNumberLT: Int
  changeNumberLTE: Int
  changeNumberIsNil: Boolean
  changeNumberNotNil: Boolean
  """
  patchset_number field predicates
  """
  patchsetNumber: Int
  patchsetNumberNEQ: Int
  patchsetNumberIn: [Int!]
  patchsetNumberNotIn: [Int!]
  patchsetNumberGT: Int
  patchsetNumberGTE: Int
  patchsetNumberLT: Int
  patchsetNumberLTE: Int
  patchsetNumberIsNil: Boolean
  patchsetNumberNotNil: Boolean
  """
  bep_completed field predicates
  """
  bepCompleted: Boolean
  bepCompletedNEQ: Boolean
  bepCompletedIsNil: Boolean
  bepCompletedNotNil: Boolean
  """
  step_label field predicates
  """
  stepLabel: String
  stepLabelNEQ: String
  stepLabelIn: [String!]
  stepLabelNotIn: [String!]
  stepLabelGT: String
  stepLabelGTE: String
  stepLabelLT: String
  stepLabelLTE: String
  stepLabelContains: String
  stepLabelHasPrefix: String
  stepLabelHasSuffix: String
  stepLabelEqualFold: String
  stepLabelContainsFold: String
  """
  user_email field predicates
  """
  userEmail: String
  userEmailNEQ: String
  userEmailIn: [String!]
  userEmailNotIn: [String!]
  userEmailGT: String
  userEmailGTE: String
  userEmailLT: String
  userEmailLTE: String
  userEmailContains: String
  userEmailHasPrefix: String
  userEmailHasSuffix: String
  userEmailIsNil: Boolean
  userEmailNotNil: Boolean
  userEmailEqualFold: String
  userEmailContainsFold: String
  """
  user_ldap field predicates
  """
  userLdap: String
  userLdapNEQ: String
  userLdapIn: [String!]
  userLdapNotIn: [String!]
  userLdapGT: String
  userLdapGTE: String
  userLdapLT: String
  userLdapLTE: String
  userLdapContains: String
  userLdapHasPrefix: String
  userLdapHasSuffix: String
  userLdapIsNil: Boolean
  userLdapNotNil: Boolean
  userLdapEqualFold: String
  userLdapContainsFold: String
  """
  event_file edge predicates
  """
  hasEventFile: Boolean
  hasEventFileWith: [EventFileWhereInput!]
  """
  build edge predicates
  """
  hasBuild: Boolean
  hasBuildWith: [BuildWhereInput!]
  """
  problems edge predicates
  """
  hasProblems: Boolean
  hasProblemsWith: [BazelInvocationProblemWhereInput!]
}
type Blob implements Node {
  id: ID!
  uri: String!
  sizeBytes: Int
  archivingStatus: BlobArchivingStatus!
  reason: String
  archiveURL: String
}
"""
BlobArchivingStatus is enum for the field archiving_status
"""
enum BlobArchivingStatus @goModel(model: "github.com/buildbarn/bb-portal/ent/gen/ent/blob.ArchivingStatus") {
  QUEUED
  ARCHIVING
  SUCCESS
  FAILED
}
"""
BlobWhereInput is used for filtering Blob objects.
Input was generated by ent.
"""
input BlobWhereInput {
  not: BlobWhereInput
  and: [BlobWhereInput!]
  or: [BlobWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  uri field predicates
  """
  uri: String
  uriNEQ: String
  uriIn: [String!]
  uriNotIn: [String!]
  uriGT: String
  uriGTE: String
  uriLT: String
  uriLTE: String
  uriContains: String
  uriHasPrefix: String
  uriHasSuffix: String
  uriEqualFold: String
  uriContainsFold: String
  """
  size_bytes field predicates
  """
  sizeBytes: Int
  sizeBytesNEQ: Int
  sizeBytesIn: [Int!]
  sizeBytesNotIn: [Int!]
  sizeBytesGT: Int
  sizeBytesGTE: Int
  sizeBytesLT: Int
  sizeBytesLTE: Int
  sizeBytesIsNil: Boolean
  sizeBytesNotNil: Boolean
  """
  archiving_status field predicates
  """
  archivingStatus: BlobArchivingStatus
  archivingStatusNEQ: BlobArchivingStatus
  archivingStatusIn: [BlobArchivingStatus!]
  archivingStatusNotIn: [BlobArchivingStatus!]
  """
  reason field predicates
  """
  reason: String
  reasonNEQ: String
  reasonIn: [String!]
  reasonNotIn: [String!]
  reasonGT: String
  reasonGTE: String
  reasonLT: String
  reasonLTE: String
  reasonContains: String
  reasonHasPrefix: String
  reasonHasSuffix: String
  reasonIsNil: Boolean
  reasonNotNil: Boolean
  reasonEqualFold: String
  reasonContainsFold: String
  """
  archive_url field predicates
  """
  archiveURL: String
  archiveURLNEQ: String
  archiveURLIn: [String!]
  archiveURLNotIn: [String!]
  archiveURLGT: String
  archiveURLGTE: String
  archiveURLLT: String
  archiveURLLTE: String
  archiveURLContains: String
  archiveURLHasPrefix: String
  archiveURLHasSuffix: String
  archiveURLIsNil: Boolean
  archiveURLNotNil: Boolean
  archiveURLEqualFold: String
  archiveURLContainsFold: String
}
type Build implements Node {
  id: ID!
  buildURL: String!
  buildUUID: UUID!
  invocations: [BazelInvocation!]
}
"""
A connection to a list of items.
"""
type BuildConnection {
  """
  A list of edges.
  """
  edges: [BuildEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type BuildEdge {
  """
  The item at the end of the edge.
  """
  node: Build
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
BuildWhereInput is used for filtering Build objects.
Input was generated by ent.
"""
input BuildWhereInput {
  not: BuildWhereInput
  and: [BuildWhereInput!]
  or: [BuildWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  build_url field predicates
  """
  buildURL: String
  buildURLNEQ: String
  buildURLIn: [String!]
  buildURLNotIn: [String!]
  buildURLGT: String
  buildURLGTE: String
  buildURLLT: String
  buildURLLTE: String
  buildURLContains: String
  buildURLHasPrefix: String
  buildURLHasSuffix: String
  buildURLEqualFold: String
  buildURLContainsFold: String
  """
  build_uuid field predicates
  """
  buildUUID: UUID
  buildUUIDNEQ: UUID
  buildUUIDIn: [UUID!]
  buildUUIDNotIn: [UUID!]
  buildUUIDGT: UUID
  buildUUIDGTE: UUID
  buildUUIDLT: UUID
  buildUUIDLTE: UUID
  """
  invocations edge predicates
  """
  hasInvocations: Boolean
  hasInvocationsWith: [BazelInvocationWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type EventFile implements Node {
  id: ID!
  url: String!
  modTime: Time!
  protocol: String!
  mimeType: String!
  status: String!
  reason: String
  bazelInvocation: BazelInvocation
}
"""
EventFileWhereInput is used for filtering EventFile objects.
Input was generated by ent.
"""
input EventFileWhereInput {
  not: EventFileWhereInput
  and: [EventFileWhereInput!]
  or: [EventFileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """
  mod_time field predicates
  """
  modTime: Time
  modTimeNEQ: Time
  modTimeIn: [Time!]
  modTimeNotIn: [Time!]
  modTimeGT: Time
  modTimeGTE: Time
  modTimeLT: Time
  modTimeLTE: Time
  """
  protocol field predicates
  """
  protocol: String
  protocolNEQ: String
  protocolIn: [String!]
  protocolNotIn: [String!]
  protocolGT: String
  protocolGTE: String
  protocolLT: String
  protocolLTE: String
  protocolContains: String
  protocolHasPrefix: String
  protocolHasSuffix: String
  protocolEqualFold: String
  protocolContainsFold: String
  """
  mime_type field predicates
  """
  mimeType: String
  mimeTypeNEQ: String
  mimeTypeIn: [String!]
  mimeTypeNotIn: [String!]
  mimeTypeGT: String
  mimeTypeGTE: String
  mimeTypeLT: String
  mimeTypeLTE: String
  mimeTypeContains: String
  mimeTypeHasPrefix: String
  mimeTypeHasSuffix: String
  mimeTypeEqualFold: String
  mimeTypeContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusEqualFold: String
  statusContainsFold: String
  """
  reason field predicates
  """
  reason: String
  reasonNEQ: String
  reasonIn: [String!]
  reasonNotIn: [String!]
  reasonGT: String
  reasonGTE: String
  reasonLT: String
  reasonLTE: String
  reasonContains: String
  reasonHasPrefix: String
  reasonHasSuffix: String
  reasonIsNil: Boolean
  reasonNotNil: Boolean
  reasonEqualFold: String
  reasonContainsFold: String
  """
  bazel_invocation edge predicates
  """
  hasBazelInvocation: Boolean
  hasBazelInvocationWith: [BazelInvocationWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/buildbarn/bb-portal/ent/gen/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  findBazelInvocations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for BazelInvocations returned from the connection.
    """
    where: BazelInvocationWhereInput
  ): BazelInvocationConnection!
  findBuilds(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Builds returned from the connection.
    """
    where: BuildWhereInput
  ): BuildConnection!
}
"""
The builtin Time type
"""
scalar Time
