// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/buildbarn/bb-portal/ent/gen/ent"
	"github.com/buildbarn/bb-portal/ent/gen/ent/blob"
	"github.com/buildbarn/bb-portal/ent/gen/ent/missdetail"
	"github.com/buildbarn/bb-portal/internal/graphql/model"
	"github.com/buildbarn/bb-portal/pkg/uuidgql"
	"github.com/google/uuid"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	ActionCacheStatistics() ActionCacheStatisticsResolver
	ActionData() ActionDataResolver
	ActionProblem() ActionProblemResolver
	ActionSummary() ActionSummaryResolver
	ArtifactMetrics() ArtifactMetricsResolver
	BazelInvocation() BazelInvocationResolver
	BazelInvocationProblem() BazelInvocationProblemResolver
	Blob() BlobResolver
	BlobReference() BlobReferenceResolver
	Build() BuildResolver
	CumulativeMetrics() CumulativeMetricsResolver
	DynamicExecutionMetrics() DynamicExecutionMetricsResolver
	EventFile() EventFileResolver
	FilesMetric() FilesMetricResolver
	GarbageMetrics() GarbageMetricsResolver
	MemoryMetrics() MemoryMetricsResolver
	Metrics() MetricsResolver
	MissDetail() MissDetailResolver
	NetworkMetrics() NetworkMetricsResolver
	PackageLoadMetrics() PackageLoadMetricsResolver
	PackageMetrics() PackageMetricsResolver
	Query() QueryResolver
	RaceStatistics() RaceStatisticsResolver
	RunnerCount() RunnerCountResolver
	SystemNetworkStats() SystemNetworkStatsResolver
	TargetMetrics() TargetMetricsResolver
	TestResult() TestResultResolver
	TimingMetrics() TimingMetricsResolver
	ActionCacheStatisticsWhereInput() ActionCacheStatisticsWhereInputResolver
	ActionDataWhereInput() ActionDataWhereInputResolver
	ActionSummaryWhereInput() ActionSummaryWhereInputResolver
	ArtifactMetricsWhereInput() ArtifactMetricsWhereInputResolver
	BazelInvocationProblemWhereInput() BazelInvocationProblemWhereInputResolver
	BazelInvocationWhereInput() BazelInvocationWhereInputResolver
	BlobWhereInput() BlobWhereInputResolver
	BuildWhereInput() BuildWhereInputResolver
	CumulativeMetricsWhereInput() CumulativeMetricsWhereInputResolver
	DynamicExecutionMetricsWhereInput() DynamicExecutionMetricsWhereInputResolver
	EventFileWhereInput() EventFileWhereInputResolver
	FilesMetricWhereInput() FilesMetricWhereInputResolver
	GarbageMetricsWhereInput() GarbageMetricsWhereInputResolver
	MemoryMetricsWhereInput() MemoryMetricsWhereInputResolver
	MetricsWhereInput() MetricsWhereInputResolver
	MissDetailWhereInput() MissDetailWhereInputResolver
	NetworkMetricsWhereInput() NetworkMetricsWhereInputResolver
	PackageLoadMetricsWhereInput() PackageLoadMetricsWhereInputResolver
	PackageMetricsWhereInput() PackageMetricsWhereInputResolver
	RaceStatisticsWhereInput() RaceStatisticsWhereInputResolver
	RunnerCountWhereInput() RunnerCountWhereInputResolver
	SystemNetworkStatsWhereInput() SystemNetworkStatsWhereInputResolver
	TargetMetricsWhereInput() TargetMetricsWhereInputResolver
	TimingMetricsWhereInput() TimingMetricsWhereInputResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ActionCacheStatistics struct {
		ActionSummary func(childComplexity int) int
		Hits          func(childComplexity int) int
		ID            func(childComplexity int) int
		LoadTimeInMs  func(childComplexity int) int
		MissDetails   func(childComplexity int) int
		Misses        func(childComplexity int) int
		SaveTimeInMs  func(childComplexity int) int
		SizeInBytes   func(childComplexity int) int
	}

	ActionData struct {
		ActionSummary   func(childComplexity int) int
		ActionsCreated  func(childComplexity int) int
		ActionsExecuted func(childComplexity int) int
		FirstStartedMs  func(childComplexity int) int
		ID              func(childComplexity int) int
		LastEndedMs     func(childComplexity int) int
		Mnemonic        func(childComplexity int) int
		SystemTime      func(childComplexity int) int
		UserTime        func(childComplexity int) int
	}

	ActionProblem struct {
		ID     func(childComplexity int) int
		Label  func(childComplexity int) int
		Stderr func(childComplexity int) int
		Stdout func(childComplexity int) int
		Type   func(childComplexity int) int
	}

	ActionSummary struct {
		ActionCacheStatistics             func(childComplexity int) int
		ActionData                        func(childComplexity int) int
		ActionsCreated                    func(childComplexity int) int
		ActionsCreatedNotIncludingAspects func(childComplexity int) int
		ActionsExecuted                   func(childComplexity int) int
		ID                                func(childComplexity int) int
		Metrics                           func(childComplexity int) int
		RemoteCacheHits                   func(childComplexity int) int
		RunnerCount                       func(childComplexity int) int
	}

	ArtifactMetrics struct {
		ID                             func(childComplexity int) int
		Metrics                        func(childComplexity int) int
		OutputArtifactsFromActionCache func(childComplexity int) int
		OutputArtifactsSeen            func(childComplexity int) int
		SourceArtifactsRead            func(childComplexity int) int
		TopLevelArtifacts              func(childComplexity int) int
	}

	BazelCommand struct {
		Command    func(childComplexity int) int
		Executable func(childComplexity int) int
		ID         func(childComplexity int) int
		Options    func(childComplexity int) int
		Residual   func(childComplexity int) int
	}

	BazelInvocation struct {
		BazelCommand   func(childComplexity int) int
		BepCompleted   func(childComplexity int) int
		Build          func(childComplexity int) int
		BuildLogs      func(childComplexity int) int
		ChangeNumber   func(childComplexity int) int
		EndedAt        func(childComplexity int) int
		EventFile      func(childComplexity int) int
		ID             func(childComplexity int) int
		InvocationID   func(childComplexity int) int
		Metrics        func(childComplexity int) int
		PatchsetNumber func(childComplexity int) int
		Problems       func(childComplexity int) int
		RelatedFiles   func(childComplexity int) int
		StartedAt      func(childComplexity int) int
		State          func(childComplexity int) int
		StepLabel      func(childComplexity int) int
		User           func(childComplexity int) int
		UserEmail      func(childComplexity int) int
		UserLdap       func(childComplexity int) int
	}

	BazelInvocationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	BazelInvocationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	BazelInvocationProblem struct {
		BazelInvocation func(childComplexity int) int
		ID              func(childComplexity int) int
		Label           func(childComplexity int) int
		ProblemType     func(childComplexity int) int
	}

	BazelInvocationState struct {
		BepCompleted   func(childComplexity int) int
		BuildEndTime   func(childComplexity int) int
		BuildStartTime func(childComplexity int) int
		ExitCode       func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	Blob struct {
		ArchiveURL      func(childComplexity int) int
		ArchivingStatus func(childComplexity int) int
		ID              func(childComplexity int) int
		Reason          func(childComplexity int) int
		SizeBytes       func(childComplexity int) int
		URI             func(childComplexity int) int
	}

	BlobReference struct {
		AvailabilityStatus func(childComplexity int) int
		DownloadURL        func(childComplexity int) int
		Name               func(childComplexity int) int
		SizeInBytes        func(childComplexity int) int
	}

	Build struct {
		BuildURL    func(childComplexity int) int
		BuildUUID   func(childComplexity int) int
		Env         func(childComplexity int) int
		ID          func(childComplexity int) int
		Invocations func(childComplexity int) int
	}

	BuildConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	BuildEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CumulativeMetrics struct {
		ID          func(childComplexity int) int
		Metrics     func(childComplexity int) int
		NumAnalyses func(childComplexity int) int
		NumBuilds   func(childComplexity int) int
	}

	DynamicExecutionMetrics struct {
		ID             func(childComplexity int) int
		Metrics        func(childComplexity int) int
		RaceStatistics func(childComplexity int) int
	}

	EnvVar struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	EventFile struct {
		BazelInvocation func(childComplexity int) int
		ID              func(childComplexity int) int
		MimeType        func(childComplexity int) int
		ModTime         func(childComplexity int) int
		Protocol        func(childComplexity int) int
		Reason          func(childComplexity int) int
		Status          func(childComplexity int) int
		URL             func(childComplexity int) int
	}

	ExitCode struct {
		Code func(childComplexity int) int
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	FilesMetric struct {
		ArtifactMetrics func(childComplexity int) int
		Count           func(childComplexity int) int
		ID              func(childComplexity int) int
		SizeInBytes     func(childComplexity int) int
	}

	GarbageMetrics struct {
		GarbageCollected func(childComplexity int) int
		ID               func(childComplexity int) int
		MemoryMetrics    func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	MemoryMetrics struct {
		GarbageMetrics                 func(childComplexity int) int
		ID                             func(childComplexity int) int
		Metrics                        func(childComplexity int) int
		PeakPostGcHeapSize             func(childComplexity int) int
		PeakPostGcTenuredSpaceHeapSize func(childComplexity int) int
		UsedHeapSizePostBuild          func(childComplexity int) int
	}

	Metrics struct {
		ActionSummary           func(childComplexity int) int
		ArtifactMetrics         func(childComplexity int) int
		BazelInvocation         func(childComplexity int) int
		CumulativeMetrics       func(childComplexity int) int
		DynamicExecutionMetrics func(childComplexity int) int
		ID                      func(childComplexity int) int
		MemoryMetrics           func(childComplexity int) int
		NetworkMetrics          func(childComplexity int) int
		PackageMetrics          func(childComplexity int) int
		TargetMetrics           func(childComplexity int) int
		TimingMetrics           func(childComplexity int) int
	}

	MetricsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MetricsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MissDetail struct {
		ActionCacheStatistics func(childComplexity int) int
		Count                 func(childComplexity int) int
		ID                    func(childComplexity int) int
		Reason                func(childComplexity int) int
	}

	NamedFile struct {
		Name func(childComplexity int) int
		URL  func(childComplexity int) int
	}

	NetworkMetrics struct {
		ID                 func(childComplexity int) int
		Metrics            func(childComplexity int) int
		SystemNetworkStats func(childComplexity int) int
	}

	PackageLoadMetrics struct {
		ComputationSteps   func(childComplexity int) int
		ID                 func(childComplexity int) int
		LoadDuration       func(childComplexity int) int
		Name               func(childComplexity int) int
		NumTargets         func(childComplexity int) int
		NumTransitiveLoads func(childComplexity int) int
		PackageMetrics     func(childComplexity int) int
		PackageOverhead    func(childComplexity int) int
	}

	PackageMetrics struct {
		ID                 func(childComplexity int) int
		Metrics            func(childComplexity int) int
		PackageLoadMetrics func(childComplexity int) int
		PackagesLoaded     func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	ProgressProblem struct {
		ID     func(childComplexity int) int
		Label  func(childComplexity int) int
		Output func(childComplexity int) int
	}

	Query struct {
		BazelInvocation      func(childComplexity int, invocationID string) int
		FindBazelInvocations func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.BazelInvocationWhereInput) int
		FindBuilds           func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.BuildWhereInput) int
		FindMetrics          func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.MetricsWhereInput) int
		GetBuild             func(childComplexity int, buildURL *string, buildUUID *uuid.UUID) int
		Node                 func(childComplexity int, id string) int
		Nodes                func(childComplexity int, ids []string) int
	}

	RaceStatistics struct {
		DynamicExecutionMetrics func(childComplexity int) int
		ID                      func(childComplexity int) int
		LocalRunner             func(childComplexity int) int
		LocalWins               func(childComplexity int) int
		Mnemonic                func(childComplexity int) int
		RemoteRunner            func(childComplexity int) int
		RenoteWins              func(childComplexity int) int
	}

	RunnerCount struct {
		ActionSummary   func(childComplexity int) int
		ActionsExecuted func(childComplexity int) int
		ExecKind        func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
	}

	SystemNetworkStats struct {
		BytesRecv             func(childComplexity int) int
		BytesSent             func(childComplexity int) int
		ID                    func(childComplexity int) int
		NetworkMetrics        func(childComplexity int) int
		PacketsRecv           func(childComplexity int) int
		PacketsSent           func(childComplexity int) int
		PeakBytesRecvPerSec   func(childComplexity int) int
		PeakBytesSentPerSec   func(childComplexity int) int
		PeakPacketsRecvPerSec func(childComplexity int) int
		PeakPacketsSentPerSec func(childComplexity int) int
	}

	TargetMetrics struct {
		ID                                   func(childComplexity int) int
		Metrics                              func(childComplexity int) int
		TargetsConfigured                    func(childComplexity int) int
		TargetsConfiguredNotIncludingAspects func(childComplexity int) int
		TargetsLoaded                        func(childComplexity int) int
	}

	TargetProblem struct {
		ID    func(childComplexity int) int
		Label func(childComplexity int) int
	}

	TestProblem struct {
		ID      func(childComplexity int) int
		Label   func(childComplexity int) int
		Results func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	TestResult struct {
		ActionLogOutput       func(childComplexity int) int
		Attempt               func(childComplexity int) int
		ID                    func(childComplexity int) int
		Run                   func(childComplexity int) int
		Shard                 func(childComplexity int) int
		Status                func(childComplexity int) int
		UndeclaredTestOutputs func(childComplexity int) int
	}

	TimingMetrics struct {
		ActionsExecutionStartInMs func(childComplexity int) int
		AnalysisPhaseTimeInMs     func(childComplexity int) int
		CPUTimeInMs               func(childComplexity int) int
		ExecutionPhaseTimeInMs    func(childComplexity int) int
		ID                        func(childComplexity int) int
		Metrics                   func(childComplexity int) int
		WallTimeInMs              func(childComplexity int) int
	}

	User struct {
		Email func(childComplexity int) int
		ID    func(childComplexity int) int
		Ldap  func(childComplexity int) int
	}
}

type ActionCacheStatisticsResolver interface {
	ID(ctx context.Context, obj *ent.ActionCacheStatistics) (string, error)
}
type ActionDataResolver interface {
	ID(ctx context.Context, obj *ent.ActionData) (string, error)

	SystemTime(ctx context.Context, obj *ent.ActionData) (*int, error)
	UserTime(ctx context.Context, obj *ent.ActionData) (*int, error)
}
type ActionProblemResolver interface {
	Stdout(ctx context.Context, obj *model.ActionProblem) (*model.BlobReference, error)
	Stderr(ctx context.Context, obj *model.ActionProblem) (*model.BlobReference, error)
}
type ActionSummaryResolver interface {
	ID(ctx context.Context, obj *ent.ActionSummary) (string, error)
}
type ArtifactMetricsResolver interface {
	ID(ctx context.Context, obj *ent.ArtifactMetrics) (string, error)
}
type BazelInvocationResolver interface {
	ID(ctx context.Context, obj *ent.BazelInvocation) (string, error)

	BazelCommand(ctx context.Context, obj *ent.BazelInvocation) (*model.BazelCommand, error)
	State(ctx context.Context, obj *ent.BazelInvocation) (*model.BazelInvocationState, error)
	User(ctx context.Context, obj *ent.BazelInvocation) (*model.User, error)
	RelatedFiles(ctx context.Context, obj *ent.BazelInvocation) ([]*model.NamedFile, error)
	Problems(ctx context.Context, obj *ent.BazelInvocation) ([]model.Problem, error)
}
type BazelInvocationProblemResolver interface {
	ID(ctx context.Context, obj *ent.BazelInvocationProblem) (string, error)
}
type BlobResolver interface {
	ID(ctx context.Context, obj *ent.Blob) (string, error)
}
type BlobReferenceResolver interface {
	DownloadURL(ctx context.Context, obj *model.BlobReference) (string, error)
	SizeInBytes(ctx context.Context, obj *model.BlobReference) (*int, error)
	AvailabilityStatus(ctx context.Context, obj *model.BlobReference) (model.ActionOutputStatus, error)
}
type BuildResolver interface {
	ID(ctx context.Context, obj *ent.Build) (string, error)

	Env(ctx context.Context, obj *ent.Build) ([]*model.EnvVar, error)
}
type CumulativeMetricsResolver interface {
	ID(ctx context.Context, obj *ent.CumulativeMetrics) (string, error)
}
type DynamicExecutionMetricsResolver interface {
	ID(ctx context.Context, obj *ent.DynamicExecutionMetrics) (string, error)
}
type EventFileResolver interface {
	ID(ctx context.Context, obj *ent.EventFile) (string, error)
}
type FilesMetricResolver interface {
	ID(ctx context.Context, obj *ent.FilesMetric) (string, error)
}
type GarbageMetricsResolver interface {
	ID(ctx context.Context, obj *ent.GarbageMetrics) (string, error)
}
type MemoryMetricsResolver interface {
	ID(ctx context.Context, obj *ent.MemoryMetrics) (string, error)
}
type MetricsResolver interface {
	ID(ctx context.Context, obj *ent.Metrics) (string, error)
}
type MissDetailResolver interface {
	ID(ctx context.Context, obj *ent.MissDetail) (string, error)
}
type NetworkMetricsResolver interface {
	ID(ctx context.Context, obj *ent.NetworkMetrics) (string, error)
}
type PackageLoadMetricsResolver interface {
	ID(ctx context.Context, obj *ent.PackageLoadMetrics) (string, error)

	LoadDuration(ctx context.Context, obj *ent.PackageLoadMetrics) (*int, error)
}
type PackageMetricsResolver interface {
	ID(ctx context.Context, obj *ent.PackageMetrics) (string, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id string) (ent.Noder, error)
	Nodes(ctx context.Context, ids []string) ([]ent.Noder, error)
	FindBazelInvocations(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.BazelInvocationWhereInput) (*ent.BazelInvocationConnection, error)
	FindBuilds(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.BuildWhereInput) (*ent.BuildConnection, error)
	FindMetrics(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.MetricsWhereInput) (*ent.MetricsConnection, error)
	BazelInvocation(ctx context.Context, invocationID string) (*ent.BazelInvocation, error)
	GetBuild(ctx context.Context, buildURL *string, buildUUID *uuid.UUID) (*ent.Build, error)
}
type RaceStatisticsResolver interface {
	ID(ctx context.Context, obj *ent.RaceStatistics) (string, error)
}
type RunnerCountResolver interface {
	ID(ctx context.Context, obj *ent.RunnerCount) (string, error)
}
type SystemNetworkStatsResolver interface {
	ID(ctx context.Context, obj *ent.SystemNetworkStats) (string, error)
}
type TargetMetricsResolver interface {
	ID(ctx context.Context, obj *ent.TargetMetrics) (string, error)
}
type TestResultResolver interface {
	ActionLogOutput(ctx context.Context, obj *model.TestResult) (*model.BlobReference, error)
	UndeclaredTestOutputs(ctx context.Context, obj *model.TestResult) (*model.BlobReference, error)
}
type TimingMetricsResolver interface {
	ID(ctx context.Context, obj *ent.TimingMetrics) (string, error)
}

type ActionCacheStatisticsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.ActionCacheStatisticsWhereInput, data *string) error
}
type ActionDataWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.ActionDataWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.ActionDataWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.ActionDataWhereInput, data *string) error

	SystemTime(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error
	SystemTimeNeq(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error
	SystemTimeIn(ctx context.Context, obj *ent.ActionDataWhereInput, data []int) error
	SystemTimeNotIn(ctx context.Context, obj *ent.ActionDataWhereInput, data []int) error
	SystemTimeGt(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error
	SystemTimeGte(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error
	SystemTimeLt(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error
	SystemTimeLte(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error

	UserTime(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error
	UserTimeNeq(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error
	UserTimeIn(ctx context.Context, obj *ent.ActionDataWhereInput, data []int) error
	UserTimeNotIn(ctx context.Context, obj *ent.ActionDataWhereInput, data []int) error
	UserTimeGt(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error
	UserTimeGte(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error
	UserTimeLt(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error
	UserTimeLte(ctx context.Context, obj *ent.ActionDataWhereInput, data *int) error
}
type ActionSummaryWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.ActionSummaryWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.ActionSummaryWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.ActionSummaryWhereInput, data *string) error
}
type ArtifactMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.ArtifactMetricsWhereInput, data *string) error
}
type BazelInvocationProblemWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.BazelInvocationProblemWhereInput, data *string) error
}
type BazelInvocationWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.BazelInvocationWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.BazelInvocationWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.BazelInvocationWhereInput, data *string) error
}
type BlobWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.BlobWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.BlobWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.BlobWhereInput, data *string) error
}
type BuildWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.BuildWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.BuildWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.BuildWhereInput, data *string) error
}
type CumulativeMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.CumulativeMetricsWhereInput, data *string) error
}
type DynamicExecutionMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.DynamicExecutionMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.DynamicExecutionMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.DynamicExecutionMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.DynamicExecutionMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.DynamicExecutionMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.DynamicExecutionMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.DynamicExecutionMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.DynamicExecutionMetricsWhereInput, data *string) error
}
type EventFileWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.EventFileWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.EventFileWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.EventFileWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.EventFileWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.EventFileWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.EventFileWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.EventFileWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.EventFileWhereInput, data *string) error
}
type FilesMetricWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.FilesMetricWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.FilesMetricWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.FilesMetricWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.FilesMetricWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.FilesMetricWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.FilesMetricWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.FilesMetricWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.FilesMetricWhereInput, data *string) error
}
type GarbageMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.GarbageMetricsWhereInput, data *string) error
}
type MemoryMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.MemoryMetricsWhereInput, data *string) error
}
type MetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.MetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.MetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.MetricsWhereInput, data *string) error
}
type MissDetailWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.MissDetailWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.MissDetailWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.MissDetailWhereInput, data *string) error
}
type NetworkMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.NetworkMetricsWhereInput, data *string) error
}
type PackageLoadMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *string) error

	LoadDuration(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *int) error
	LoadDurationNeq(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *int) error
	LoadDurationIn(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data []int) error
	LoadDurationNotIn(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data []int) error
	LoadDurationGt(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *int) error
	LoadDurationGte(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *int) error
	LoadDurationLt(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *int) error
	LoadDurationLte(ctx context.Context, obj *ent.PackageLoadMetricsWhereInput, data *int) error
}
type PackageMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.PackageMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.PackageMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.PackageMetricsWhereInput, data *string) error
}
type RaceStatisticsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.RaceStatisticsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.RaceStatisticsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.RaceStatisticsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.RaceStatisticsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.RaceStatisticsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.RaceStatisticsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.RaceStatisticsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.RaceStatisticsWhereInput, data *string) error
}
type RunnerCountWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.RunnerCountWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.RunnerCountWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.RunnerCountWhereInput, data *string) error
}
type SystemNetworkStatsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.SystemNetworkStatsWhereInput, data *string) error
}
type TargetMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.TargetMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.TargetMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.TargetMetricsWhereInput, data *string) error
}
type TimingMetricsWhereInputResolver interface {
	ID(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
	IDNeq(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
	IDIn(ctx context.Context, obj *ent.TimingMetricsWhereInput, data []string) error
	IDNotIn(ctx context.Context, obj *ent.TimingMetricsWhereInput, data []string) error
	IDGt(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
	IDGte(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
	IDLt(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
	IDLte(ctx context.Context, obj *ent.TimingMetricsWhereInput, data *string) error
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "ActionCacheStatistics.actionSummary":
		if e.complexity.ActionCacheStatistics.ActionSummary == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.ActionSummary(childComplexity), true

	case "ActionCacheStatistics.hits":
		if e.complexity.ActionCacheStatistics.Hits == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.Hits(childComplexity), true

	case "ActionCacheStatistics.id":
		if e.complexity.ActionCacheStatistics.ID == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.ID(childComplexity), true

	case "ActionCacheStatistics.loadTimeInMs":
		if e.complexity.ActionCacheStatistics.LoadTimeInMs == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.LoadTimeInMs(childComplexity), true

	case "ActionCacheStatistics.missDetails":
		if e.complexity.ActionCacheStatistics.MissDetails == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.MissDetails(childComplexity), true

	case "ActionCacheStatistics.misses":
		if e.complexity.ActionCacheStatistics.Misses == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.Misses(childComplexity), true

	case "ActionCacheStatistics.saveTimeInMs":
		if e.complexity.ActionCacheStatistics.SaveTimeInMs == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.SaveTimeInMs(childComplexity), true

	case "ActionCacheStatistics.sizeInBytes":
		if e.complexity.ActionCacheStatistics.SizeInBytes == nil {
			break
		}

		return e.complexity.ActionCacheStatistics.SizeInBytes(childComplexity), true

	case "ActionData.actionSummary":
		if e.complexity.ActionData.ActionSummary == nil {
			break
		}

		return e.complexity.ActionData.ActionSummary(childComplexity), true

	case "ActionData.actionsCreated":
		if e.complexity.ActionData.ActionsCreated == nil {
			break
		}

		return e.complexity.ActionData.ActionsCreated(childComplexity), true

	case "ActionData.actionsExecuted":
		if e.complexity.ActionData.ActionsExecuted == nil {
			break
		}

		return e.complexity.ActionData.ActionsExecuted(childComplexity), true

	case "ActionData.firstStartedMs":
		if e.complexity.ActionData.FirstStartedMs == nil {
			break
		}

		return e.complexity.ActionData.FirstStartedMs(childComplexity), true

	case "ActionData.id":
		if e.complexity.ActionData.ID == nil {
			break
		}

		return e.complexity.ActionData.ID(childComplexity), true

	case "ActionData.lastEndedMs":
		if e.complexity.ActionData.LastEndedMs == nil {
			break
		}

		return e.complexity.ActionData.LastEndedMs(childComplexity), true

	case "ActionData.mnemonic":
		if e.complexity.ActionData.Mnemonic == nil {
			break
		}

		return e.complexity.ActionData.Mnemonic(childComplexity), true

	case "ActionData.systemTime":
		if e.complexity.ActionData.SystemTime == nil {
			break
		}

		return e.complexity.ActionData.SystemTime(childComplexity), true

	case "ActionData.userTime":
		if e.complexity.ActionData.UserTime == nil {
			break
		}

		return e.complexity.ActionData.UserTime(childComplexity), true

	case "ActionProblem.id":
		if e.complexity.ActionProblem.ID == nil {
			break
		}

		return e.complexity.ActionProblem.ID(childComplexity), true

	case "ActionProblem.label":
		if e.complexity.ActionProblem.Label == nil {
			break
		}

		return e.complexity.ActionProblem.Label(childComplexity), true

	case "ActionProblem.stderr":
		if e.complexity.ActionProblem.Stderr == nil {
			break
		}

		return e.complexity.ActionProblem.Stderr(childComplexity), true

	case "ActionProblem.stdout":
		if e.complexity.ActionProblem.Stdout == nil {
			break
		}

		return e.complexity.ActionProblem.Stdout(childComplexity), true

	case "ActionProblem.type":
		if e.complexity.ActionProblem.Type == nil {
			break
		}

		return e.complexity.ActionProblem.Type(childComplexity), true

	case "ActionSummary.actionCacheStatistics":
		if e.complexity.ActionSummary.ActionCacheStatistics == nil {
			break
		}

		return e.complexity.ActionSummary.ActionCacheStatistics(childComplexity), true

	case "ActionSummary.actionData":
		if e.complexity.ActionSummary.ActionData == nil {
			break
		}

		return e.complexity.ActionSummary.ActionData(childComplexity), true

	case "ActionSummary.actionsCreated":
		if e.complexity.ActionSummary.ActionsCreated == nil {
			break
		}

		return e.complexity.ActionSummary.ActionsCreated(childComplexity), true

	case "ActionSummary.actionsCreatedNotIncludingAspects":
		if e.complexity.ActionSummary.ActionsCreatedNotIncludingAspects == nil {
			break
		}

		return e.complexity.ActionSummary.ActionsCreatedNotIncludingAspects(childComplexity), true

	case "ActionSummary.actionsExecuted":
		if e.complexity.ActionSummary.ActionsExecuted == nil {
			break
		}

		return e.complexity.ActionSummary.ActionsExecuted(childComplexity), true

	case "ActionSummary.id":
		if e.complexity.ActionSummary.ID == nil {
			break
		}

		return e.complexity.ActionSummary.ID(childComplexity), true

	case "ActionSummary.metrics":
		if e.complexity.ActionSummary.Metrics == nil {
			break
		}

		return e.complexity.ActionSummary.Metrics(childComplexity), true

	case "ActionSummary.remoteCacheHits":
		if e.complexity.ActionSummary.RemoteCacheHits == nil {
			break
		}

		return e.complexity.ActionSummary.RemoteCacheHits(childComplexity), true

	case "ActionSummary.runnerCount":
		if e.complexity.ActionSummary.RunnerCount == nil {
			break
		}

		return e.complexity.ActionSummary.RunnerCount(childComplexity), true

	case "ArtifactMetrics.id":
		if e.complexity.ArtifactMetrics.ID == nil {
			break
		}

		return e.complexity.ArtifactMetrics.ID(childComplexity), true

	case "ArtifactMetrics.metrics":
		if e.complexity.ArtifactMetrics.Metrics == nil {
			break
		}

		return e.complexity.ArtifactMetrics.Metrics(childComplexity), true

	case "ArtifactMetrics.outputArtifactsFromActionCache":
		if e.complexity.ArtifactMetrics.OutputArtifactsFromActionCache == nil {
			break
		}

		return e.complexity.ArtifactMetrics.OutputArtifactsFromActionCache(childComplexity), true

	case "ArtifactMetrics.outputArtifactsSeen":
		if e.complexity.ArtifactMetrics.OutputArtifactsSeen == nil {
			break
		}

		return e.complexity.ArtifactMetrics.OutputArtifactsSeen(childComplexity), true

	case "ArtifactMetrics.sourceArtifactsRead":
		if e.complexity.ArtifactMetrics.SourceArtifactsRead == nil {
			break
		}

		return e.complexity.ArtifactMetrics.SourceArtifactsRead(childComplexity), true

	case "ArtifactMetrics.topLevelArtifacts":
		if e.complexity.ArtifactMetrics.TopLevelArtifacts == nil {
			break
		}

		return e.complexity.ArtifactMetrics.TopLevelArtifacts(childComplexity), true

	case "BazelCommand.command":
		if e.complexity.BazelCommand.Command == nil {
			break
		}

		return e.complexity.BazelCommand.Command(childComplexity), true

	case "BazelCommand.executable":
		if e.complexity.BazelCommand.Executable == nil {
			break
		}

		return e.complexity.BazelCommand.Executable(childComplexity), true

	case "BazelCommand.id":
		if e.complexity.BazelCommand.ID == nil {
			break
		}

		return e.complexity.BazelCommand.ID(childComplexity), true

	case "BazelCommand.options":
		if e.complexity.BazelCommand.Options == nil {
			break
		}

		return e.complexity.BazelCommand.Options(childComplexity), true

	case "BazelCommand.residual":
		if e.complexity.BazelCommand.Residual == nil {
			break
		}

		return e.complexity.BazelCommand.Residual(childComplexity), true

	case "BazelInvocation.bazelCommand":
		if e.complexity.BazelInvocation.BazelCommand == nil {
			break
		}

		return e.complexity.BazelInvocation.BazelCommand(childComplexity), true

	case "BazelInvocation.bepCompleted":
		if e.complexity.BazelInvocation.BepCompleted == nil {
			break
		}

		return e.complexity.BazelInvocation.BepCompleted(childComplexity), true

	case "BazelInvocation.build":
		if e.complexity.BazelInvocation.Build == nil {
			break
		}

		return e.complexity.BazelInvocation.Build(childComplexity), true

	case "BazelInvocation.buildLogs":
		if e.complexity.BazelInvocation.BuildLogs == nil {
			break
		}

		return e.complexity.BazelInvocation.BuildLogs(childComplexity), true

	case "BazelInvocation.changeNumber":
		if e.complexity.BazelInvocation.ChangeNumber == nil {
			break
		}

		return e.complexity.BazelInvocation.ChangeNumber(childComplexity), true

	case "BazelInvocation.endedAt":
		if e.complexity.BazelInvocation.EndedAt == nil {
			break
		}

		return e.complexity.BazelInvocation.EndedAt(childComplexity), true

	case "BazelInvocation.eventFile":
		if e.complexity.BazelInvocation.EventFile == nil {
			break
		}

		return e.complexity.BazelInvocation.EventFile(childComplexity), true

	case "BazelInvocation.id":
		if e.complexity.BazelInvocation.ID == nil {
			break
		}

		return e.complexity.BazelInvocation.ID(childComplexity), true

	case "BazelInvocation.invocationID":
		if e.complexity.BazelInvocation.InvocationID == nil {
			break
		}

		return e.complexity.BazelInvocation.InvocationID(childComplexity), true

	case "BazelInvocation.metrics":
		if e.complexity.BazelInvocation.Metrics == nil {
			break
		}

		return e.complexity.BazelInvocation.Metrics(childComplexity), true

	case "BazelInvocation.patchsetNumber":
		if e.complexity.BazelInvocation.PatchsetNumber == nil {
			break
		}

		return e.complexity.BazelInvocation.PatchsetNumber(childComplexity), true

	case "BazelInvocation.problems":
		if e.complexity.BazelInvocation.Problems == nil {
			break
		}

		return e.complexity.BazelInvocation.Problems(childComplexity), true

	case "BazelInvocation.relatedFiles":
		if e.complexity.BazelInvocation.RelatedFiles == nil {
			break
		}

		return e.complexity.BazelInvocation.RelatedFiles(childComplexity), true

	case "BazelInvocation.startedAt":
		if e.complexity.BazelInvocation.StartedAt == nil {
			break
		}

		return e.complexity.BazelInvocation.StartedAt(childComplexity), true

	case "BazelInvocation.state":
		if e.complexity.BazelInvocation.State == nil {
			break
		}

		return e.complexity.BazelInvocation.State(childComplexity), true

	case "BazelInvocation.stepLabel":
		if e.complexity.BazelInvocation.StepLabel == nil {
			break
		}

		return e.complexity.BazelInvocation.StepLabel(childComplexity), true

	case "BazelInvocation.user":
		if e.complexity.BazelInvocation.User == nil {
			break
		}

		return e.complexity.BazelInvocation.User(childComplexity), true

	case "BazelInvocation.userEmail":
		if e.complexity.BazelInvocation.UserEmail == nil {
			break
		}

		return e.complexity.BazelInvocation.UserEmail(childComplexity), true

	case "BazelInvocation.userLdap":
		if e.complexity.BazelInvocation.UserLdap == nil {
			break
		}

		return e.complexity.BazelInvocation.UserLdap(childComplexity), true

	case "BazelInvocationConnection.edges":
		if e.complexity.BazelInvocationConnection.Edges == nil {
			break
		}

		return e.complexity.BazelInvocationConnection.Edges(childComplexity), true

	case "BazelInvocationConnection.pageInfo":
		if e.complexity.BazelInvocationConnection.PageInfo == nil {
			break
		}

		return e.complexity.BazelInvocationConnection.PageInfo(childComplexity), true

	case "BazelInvocationConnection.totalCount":
		if e.complexity.BazelInvocationConnection.TotalCount == nil {
			break
		}

		return e.complexity.BazelInvocationConnection.TotalCount(childComplexity), true

	case "BazelInvocationEdge.cursor":
		if e.complexity.BazelInvocationEdge.Cursor == nil {
			break
		}

		return e.complexity.BazelInvocationEdge.Cursor(childComplexity), true

	case "BazelInvocationEdge.node":
		if e.complexity.BazelInvocationEdge.Node == nil {
			break
		}

		return e.complexity.BazelInvocationEdge.Node(childComplexity), true

	case "BazelInvocationProblem.bazelInvocation":
		if e.complexity.BazelInvocationProblem.BazelInvocation == nil {
			break
		}

		return e.complexity.BazelInvocationProblem.BazelInvocation(childComplexity), true

	case "BazelInvocationProblem.id":
		if e.complexity.BazelInvocationProblem.ID == nil {
			break
		}

		return e.complexity.BazelInvocationProblem.ID(childComplexity), true

	case "BazelInvocationProblem.label":
		if e.complexity.BazelInvocationProblem.Label == nil {
			break
		}

		return e.complexity.BazelInvocationProblem.Label(childComplexity), true

	case "BazelInvocationProblem.problemType":
		if e.complexity.BazelInvocationProblem.ProblemType == nil {
			break
		}

		return e.complexity.BazelInvocationProblem.ProblemType(childComplexity), true

	case "BazelInvocationState.bepCompleted":
		if e.complexity.BazelInvocationState.BepCompleted == nil {
			break
		}

		return e.complexity.BazelInvocationState.BepCompleted(childComplexity), true

	case "BazelInvocationState.buildEndTime":
		if e.complexity.BazelInvocationState.BuildEndTime == nil {
			break
		}

		return e.complexity.BazelInvocationState.BuildEndTime(childComplexity), true

	case "BazelInvocationState.buildStartTime":
		if e.complexity.BazelInvocationState.BuildStartTime == nil {
			break
		}

		return e.complexity.BazelInvocationState.BuildStartTime(childComplexity), true

	case "BazelInvocationState.exitCode":
		if e.complexity.BazelInvocationState.ExitCode == nil {
			break
		}

		return e.complexity.BazelInvocationState.ExitCode(childComplexity), true

	case "BazelInvocationState.id":
		if e.complexity.BazelInvocationState.ID == nil {
			break
		}

		return e.complexity.BazelInvocationState.ID(childComplexity), true

	case "Blob.archiveURL":
		if e.complexity.Blob.ArchiveURL == nil {
			break
		}

		return e.complexity.Blob.ArchiveURL(childComplexity), true

	case "Blob.archivingStatus":
		if e.complexity.Blob.ArchivingStatus == nil {
			break
		}

		return e.complexity.Blob.ArchivingStatus(childComplexity), true

	case "Blob.id":
		if e.complexity.Blob.ID == nil {
			break
		}

		return e.complexity.Blob.ID(childComplexity), true

	case "Blob.reason":
		if e.complexity.Blob.Reason == nil {
			break
		}

		return e.complexity.Blob.Reason(childComplexity), true

	case "Blob.sizeBytes":
		if e.complexity.Blob.SizeBytes == nil {
			break
		}

		return e.complexity.Blob.SizeBytes(childComplexity), true

	case "Blob.uri":
		if e.complexity.Blob.URI == nil {
			break
		}

		return e.complexity.Blob.URI(childComplexity), true

	case "BlobReference.availabilityStatus":
		if e.complexity.BlobReference.AvailabilityStatus == nil {
			break
		}

		return e.complexity.BlobReference.AvailabilityStatus(childComplexity), true

	case "BlobReference.downloadURL":
		if e.complexity.BlobReference.DownloadURL == nil {
			break
		}

		return e.complexity.BlobReference.DownloadURL(childComplexity), true

	case "BlobReference.name":
		if e.complexity.BlobReference.Name == nil {
			break
		}

		return e.complexity.BlobReference.Name(childComplexity), true

	case "BlobReference.sizeInBytes":
		if e.complexity.BlobReference.SizeInBytes == nil {
			break
		}

		return e.complexity.BlobReference.SizeInBytes(childComplexity), true

	case "Build.buildURL":
		if e.complexity.Build.BuildURL == nil {
			break
		}

		return e.complexity.Build.BuildURL(childComplexity), true

	case "Build.buildUUID":
		if e.complexity.Build.BuildUUID == nil {
			break
		}

		return e.complexity.Build.BuildUUID(childComplexity), true

	case "Build.env":
		if e.complexity.Build.Env == nil {
			break
		}

		return e.complexity.Build.Env(childComplexity), true

	case "Build.id":
		if e.complexity.Build.ID == nil {
			break
		}

		return e.complexity.Build.ID(childComplexity), true

	case "Build.invocations":
		if e.complexity.Build.Invocations == nil {
			break
		}

		return e.complexity.Build.Invocations(childComplexity), true

	case "BuildConnection.edges":
		if e.complexity.BuildConnection.Edges == nil {
			break
		}

		return e.complexity.BuildConnection.Edges(childComplexity), true

	case "BuildConnection.pageInfo":
		if e.complexity.BuildConnection.PageInfo == nil {
			break
		}

		return e.complexity.BuildConnection.PageInfo(childComplexity), true

	case "BuildConnection.totalCount":
		if e.complexity.BuildConnection.TotalCount == nil {
			break
		}

		return e.complexity.BuildConnection.TotalCount(childComplexity), true

	case "BuildEdge.cursor":
		if e.complexity.BuildEdge.Cursor == nil {
			break
		}

		return e.complexity.BuildEdge.Cursor(childComplexity), true

	case "BuildEdge.node":
		if e.complexity.BuildEdge.Node == nil {
			break
		}

		return e.complexity.BuildEdge.Node(childComplexity), true

	case "CumulativeMetrics.id":
		if e.complexity.CumulativeMetrics.ID == nil {
			break
		}

		return e.complexity.CumulativeMetrics.ID(childComplexity), true

	case "CumulativeMetrics.metrics":
		if e.complexity.CumulativeMetrics.Metrics == nil {
			break
		}

		return e.complexity.CumulativeMetrics.Metrics(childComplexity), true

	case "CumulativeMetrics.numAnalyses":
		if e.complexity.CumulativeMetrics.NumAnalyses == nil {
			break
		}

		return e.complexity.CumulativeMetrics.NumAnalyses(childComplexity), true

	case "CumulativeMetrics.numBuilds":
		if e.complexity.CumulativeMetrics.NumBuilds == nil {
			break
		}

		return e.complexity.CumulativeMetrics.NumBuilds(childComplexity), true

	case "DynamicExecutionMetrics.id":
		if e.complexity.DynamicExecutionMetrics.ID == nil {
			break
		}

		return e.complexity.DynamicExecutionMetrics.ID(childComplexity), true

	case "DynamicExecutionMetrics.metrics":
		if e.complexity.DynamicExecutionMetrics.Metrics == nil {
			break
		}

		return e.complexity.DynamicExecutionMetrics.Metrics(childComplexity), true

	case "DynamicExecutionMetrics.raceStatistics":
		if e.complexity.DynamicExecutionMetrics.RaceStatistics == nil {
			break
		}

		return e.complexity.DynamicExecutionMetrics.RaceStatistics(childComplexity), true

	case "EnvVar.key":
		if e.complexity.EnvVar.Key == nil {
			break
		}

		return e.complexity.EnvVar.Key(childComplexity), true

	case "EnvVar.value":
		if e.complexity.EnvVar.Value == nil {
			break
		}

		return e.complexity.EnvVar.Value(childComplexity), true

	case "EventFile.bazelInvocation":
		if e.complexity.EventFile.BazelInvocation == nil {
			break
		}

		return e.complexity.EventFile.BazelInvocation(childComplexity), true

	case "EventFile.id":
		if e.complexity.EventFile.ID == nil {
			break
		}

		return e.complexity.EventFile.ID(childComplexity), true

	case "EventFile.mimeType":
		if e.complexity.EventFile.MimeType == nil {
			break
		}

		return e.complexity.EventFile.MimeType(childComplexity), true

	case "EventFile.modTime":
		if e.complexity.EventFile.ModTime == nil {
			break
		}

		return e.complexity.EventFile.ModTime(childComplexity), true

	case "EventFile.protocol":
		if e.complexity.EventFile.Protocol == nil {
			break
		}

		return e.complexity.EventFile.Protocol(childComplexity), true

	case "EventFile.reason":
		if e.complexity.EventFile.Reason == nil {
			break
		}

		return e.complexity.EventFile.Reason(childComplexity), true

	case "EventFile.status":
		if e.complexity.EventFile.Status == nil {
			break
		}

		return e.complexity.EventFile.Status(childComplexity), true

	case "EventFile.url":
		if e.complexity.EventFile.URL == nil {
			break
		}

		return e.complexity.EventFile.URL(childComplexity), true

	case "ExitCode.code":
		if e.complexity.ExitCode.Code == nil {
			break
		}

		return e.complexity.ExitCode.Code(childComplexity), true

	case "ExitCode.id":
		if e.complexity.ExitCode.ID == nil {
			break
		}

		return e.complexity.ExitCode.ID(childComplexity), true

	case "ExitCode.name":
		if e.complexity.ExitCode.Name == nil {
			break
		}

		return e.complexity.ExitCode.Name(childComplexity), true

	case "FilesMetric.artifactMetrics":
		if e.complexity.FilesMetric.ArtifactMetrics == nil {
			break
		}

		return e.complexity.FilesMetric.ArtifactMetrics(childComplexity), true

	case "FilesMetric.count":
		if e.complexity.FilesMetric.Count == nil {
			break
		}

		return e.complexity.FilesMetric.Count(childComplexity), true

	case "FilesMetric.id":
		if e.complexity.FilesMetric.ID == nil {
			break
		}

		return e.complexity.FilesMetric.ID(childComplexity), true

	case "FilesMetric.sizeInBytes":
		if e.complexity.FilesMetric.SizeInBytes == nil {
			break
		}

		return e.complexity.FilesMetric.SizeInBytes(childComplexity), true

	case "GarbageMetrics.garbageCollected":
		if e.complexity.GarbageMetrics.GarbageCollected == nil {
			break
		}

		return e.complexity.GarbageMetrics.GarbageCollected(childComplexity), true

	case "GarbageMetrics.id":
		if e.complexity.GarbageMetrics.ID == nil {
			break
		}

		return e.complexity.GarbageMetrics.ID(childComplexity), true

	case "GarbageMetrics.memoryMetrics":
		if e.complexity.GarbageMetrics.MemoryMetrics == nil {
			break
		}

		return e.complexity.GarbageMetrics.MemoryMetrics(childComplexity), true

	case "GarbageMetrics.type":
		if e.complexity.GarbageMetrics.Type == nil {
			break
		}

		return e.complexity.GarbageMetrics.Type(childComplexity), true

	case "MemoryMetrics.garbageMetrics":
		if e.complexity.MemoryMetrics.GarbageMetrics == nil {
			break
		}

		return e.complexity.MemoryMetrics.GarbageMetrics(childComplexity), true

	case "MemoryMetrics.id":
		if e.complexity.MemoryMetrics.ID == nil {
			break
		}

		return e.complexity.MemoryMetrics.ID(childComplexity), true

	case "MemoryMetrics.metrics":
		if e.complexity.MemoryMetrics.Metrics == nil {
			break
		}

		return e.complexity.MemoryMetrics.Metrics(childComplexity), true

	case "MemoryMetrics.peakPostGcHeapSize":
		if e.complexity.MemoryMetrics.PeakPostGcHeapSize == nil {
			break
		}

		return e.complexity.MemoryMetrics.PeakPostGcHeapSize(childComplexity), true

	case "MemoryMetrics.peakPostGcTenuredSpaceHeapSize":
		if e.complexity.MemoryMetrics.PeakPostGcTenuredSpaceHeapSize == nil {
			break
		}

		return e.complexity.MemoryMetrics.PeakPostGcTenuredSpaceHeapSize(childComplexity), true

	case "MemoryMetrics.usedHeapSizePostBuild":
		if e.complexity.MemoryMetrics.UsedHeapSizePostBuild == nil {
			break
		}

		return e.complexity.MemoryMetrics.UsedHeapSizePostBuild(childComplexity), true

	case "Metrics.actionSummary":
		if e.complexity.Metrics.ActionSummary == nil {
			break
		}

		return e.complexity.Metrics.ActionSummary(childComplexity), true

	case "Metrics.artifactMetrics":
		if e.complexity.Metrics.ArtifactMetrics == nil {
			break
		}

		return e.complexity.Metrics.ArtifactMetrics(childComplexity), true

	case "Metrics.bazelInvocation":
		if e.complexity.Metrics.BazelInvocation == nil {
			break
		}

		return e.complexity.Metrics.BazelInvocation(childComplexity), true

	case "Metrics.cumulativeMetrics":
		if e.complexity.Metrics.CumulativeMetrics == nil {
			break
		}

		return e.complexity.Metrics.CumulativeMetrics(childComplexity), true

	case "Metrics.dynamicExecutionMetrics":
		if e.complexity.Metrics.DynamicExecutionMetrics == nil {
			break
		}

		return e.complexity.Metrics.DynamicExecutionMetrics(childComplexity), true

	case "Metrics.id":
		if e.complexity.Metrics.ID == nil {
			break
		}

		return e.complexity.Metrics.ID(childComplexity), true

	case "Metrics.memoryMetrics":
		if e.complexity.Metrics.MemoryMetrics == nil {
			break
		}

		return e.complexity.Metrics.MemoryMetrics(childComplexity), true

	case "Metrics.networkMetrics":
		if e.complexity.Metrics.NetworkMetrics == nil {
			break
		}

		return e.complexity.Metrics.NetworkMetrics(childComplexity), true

	case "Metrics.packageMetrics":
		if e.complexity.Metrics.PackageMetrics == nil {
			break
		}

		return e.complexity.Metrics.PackageMetrics(childComplexity), true

	case "Metrics.targetMetrics":
		if e.complexity.Metrics.TargetMetrics == nil {
			break
		}

		return e.complexity.Metrics.TargetMetrics(childComplexity), true

	case "Metrics.timingMetrics":
		if e.complexity.Metrics.TimingMetrics == nil {
			break
		}

		return e.complexity.Metrics.TimingMetrics(childComplexity), true

	case "MetricsConnection.edges":
		if e.complexity.MetricsConnection.Edges == nil {
			break
		}

		return e.complexity.MetricsConnection.Edges(childComplexity), true

	case "MetricsConnection.pageInfo":
		if e.complexity.MetricsConnection.PageInfo == nil {
			break
		}

		return e.complexity.MetricsConnection.PageInfo(childComplexity), true

	case "MetricsConnection.totalCount":
		if e.complexity.MetricsConnection.TotalCount == nil {
			break
		}

		return e.complexity.MetricsConnection.TotalCount(childComplexity), true

	case "MetricsEdge.cursor":
		if e.complexity.MetricsEdge.Cursor == nil {
			break
		}

		return e.complexity.MetricsEdge.Cursor(childComplexity), true

	case "MetricsEdge.node":
		if e.complexity.MetricsEdge.Node == nil {
			break
		}

		return e.complexity.MetricsEdge.Node(childComplexity), true

	case "MissDetail.actionCacheStatistics":
		if e.complexity.MissDetail.ActionCacheStatistics == nil {
			break
		}

		return e.complexity.MissDetail.ActionCacheStatistics(childComplexity), true

	case "MissDetail.count":
		if e.complexity.MissDetail.Count == nil {
			break
		}

		return e.complexity.MissDetail.Count(childComplexity), true

	case "MissDetail.id":
		if e.complexity.MissDetail.ID == nil {
			break
		}

		return e.complexity.MissDetail.ID(childComplexity), true

	case "MissDetail.reason":
		if e.complexity.MissDetail.Reason == nil {
			break
		}

		return e.complexity.MissDetail.Reason(childComplexity), true

	case "NamedFile.name":
		if e.complexity.NamedFile.Name == nil {
			break
		}

		return e.complexity.NamedFile.Name(childComplexity), true

	case "NamedFile.url":
		if e.complexity.NamedFile.URL == nil {
			break
		}

		return e.complexity.NamedFile.URL(childComplexity), true

	case "NetworkMetrics.id":
		if e.complexity.NetworkMetrics.ID == nil {
			break
		}

		return e.complexity.NetworkMetrics.ID(childComplexity), true

	case "NetworkMetrics.metrics":
		if e.complexity.NetworkMetrics.Metrics == nil {
			break
		}

		return e.complexity.NetworkMetrics.Metrics(childComplexity), true

	case "NetworkMetrics.systemNetworkStats":
		if e.complexity.NetworkMetrics.SystemNetworkStats == nil {
			break
		}

		return e.complexity.NetworkMetrics.SystemNetworkStats(childComplexity), true

	case "PackageLoadMetrics.computationSteps":
		if e.complexity.PackageLoadMetrics.ComputationSteps == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.ComputationSteps(childComplexity), true

	case "PackageLoadMetrics.id":
		if e.complexity.PackageLoadMetrics.ID == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.ID(childComplexity), true

	case "PackageLoadMetrics.loadDuration":
		if e.complexity.PackageLoadMetrics.LoadDuration == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.LoadDuration(childComplexity), true

	case "PackageLoadMetrics.name":
		if e.complexity.PackageLoadMetrics.Name == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.Name(childComplexity), true

	case "PackageLoadMetrics.numTargets":
		if e.complexity.PackageLoadMetrics.NumTargets == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.NumTargets(childComplexity), true

	case "PackageLoadMetrics.numTransitiveLoads":
		if e.complexity.PackageLoadMetrics.NumTransitiveLoads == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.NumTransitiveLoads(childComplexity), true

	case "PackageLoadMetrics.packageMetrics":
		if e.complexity.PackageLoadMetrics.PackageMetrics == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.PackageMetrics(childComplexity), true

	case "PackageLoadMetrics.packageOverhead":
		if e.complexity.PackageLoadMetrics.PackageOverhead == nil {
			break
		}

		return e.complexity.PackageLoadMetrics.PackageOverhead(childComplexity), true

	case "PackageMetrics.id":
		if e.complexity.PackageMetrics.ID == nil {
			break
		}

		return e.complexity.PackageMetrics.ID(childComplexity), true

	case "PackageMetrics.metrics":
		if e.complexity.PackageMetrics.Metrics == nil {
			break
		}

		return e.complexity.PackageMetrics.Metrics(childComplexity), true

	case "PackageMetrics.packageLoadMetrics":
		if e.complexity.PackageMetrics.PackageLoadMetrics == nil {
			break
		}

		return e.complexity.PackageMetrics.PackageLoadMetrics(childComplexity), true

	case "PackageMetrics.packagesLoaded":
		if e.complexity.PackageMetrics.PackagesLoaded == nil {
			break
		}

		return e.complexity.PackageMetrics.PackagesLoaded(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "ProgressProblem.id":
		if e.complexity.ProgressProblem.ID == nil {
			break
		}

		return e.complexity.ProgressProblem.ID(childComplexity), true

	case "ProgressProblem.label":
		if e.complexity.ProgressProblem.Label == nil {
			break
		}

		return e.complexity.ProgressProblem.Label(childComplexity), true

	case "ProgressProblem.output":
		if e.complexity.ProgressProblem.Output == nil {
			break
		}

		return e.complexity.ProgressProblem.Output(childComplexity), true

	case "Query.bazelInvocation":
		if e.complexity.Query.BazelInvocation == nil {
			break
		}

		args, err := ec.field_Query_bazelInvocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BazelInvocation(childComplexity, args["invocationId"].(string)), true

	case "Query.findBazelInvocations":
		if e.complexity.Query.FindBazelInvocations == nil {
			break
		}

		args, err := ec.field_Query_findBazelInvocations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindBazelInvocations(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["where"].(*ent.BazelInvocationWhereInput)), true

	case "Query.findBuilds":
		if e.complexity.Query.FindBuilds == nil {
			break
		}

		args, err := ec.field_Query_findBuilds_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindBuilds(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["where"].(*ent.BuildWhereInput)), true

	case "Query.findMetrics":
		if e.complexity.Query.FindMetrics == nil {
			break
		}

		args, err := ec.field_Query_findMetrics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindMetrics(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["where"].(*ent.MetricsWhereInput)), true

	case "Query.getBuild":
		if e.complexity.Query.GetBuild == nil {
			break
		}

		args, err := ec.field_Query_getBuild_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBuild(childComplexity, args["buildURL"].(*string), args["buildUUID"].(*uuid.UUID)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true

	case "RaceStatistics.dynamicExecutionMetrics":
		if e.complexity.RaceStatistics.DynamicExecutionMetrics == nil {
			break
		}

		return e.complexity.RaceStatistics.DynamicExecutionMetrics(childComplexity), true

	case "RaceStatistics.id":
		if e.complexity.RaceStatistics.ID == nil {
			break
		}

		return e.complexity.RaceStatistics.ID(childComplexity), true

	case "RaceStatistics.localRunner":
		if e.complexity.RaceStatistics.LocalRunner == nil {
			break
		}

		return e.complexity.RaceStatistics.LocalRunner(childComplexity), true

	case "RaceStatistics.localWins":
		if e.complexity.RaceStatistics.LocalWins == nil {
			break
		}

		return e.complexity.RaceStatistics.LocalWins(childComplexity), true

	case "RaceStatistics.mnemonic":
		if e.complexity.RaceStatistics.Mnemonic == nil {
			break
		}

		return e.complexity.RaceStatistics.Mnemonic(childComplexity), true

	case "RaceStatistics.remoteRunner":
		if e.complexity.RaceStatistics.RemoteRunner == nil {
			break
		}

		return e.complexity.RaceStatistics.RemoteRunner(childComplexity), true

	case "RaceStatistics.renoteWins":
		if e.complexity.RaceStatistics.RenoteWins == nil {
			break
		}

		return e.complexity.RaceStatistics.RenoteWins(childComplexity), true

	case "RunnerCount.actionSummary":
		if e.complexity.RunnerCount.ActionSummary == nil {
			break
		}

		return e.complexity.RunnerCount.ActionSummary(childComplexity), true

	case "RunnerCount.actionsExecuted":
		if e.complexity.RunnerCount.ActionsExecuted == nil {
			break
		}

		return e.complexity.RunnerCount.ActionsExecuted(childComplexity), true

	case "RunnerCount.execKind":
		if e.complexity.RunnerCount.ExecKind == nil {
			break
		}

		return e.complexity.RunnerCount.ExecKind(childComplexity), true

	case "RunnerCount.id":
		if e.complexity.RunnerCount.ID == nil {
			break
		}

		return e.complexity.RunnerCount.ID(childComplexity), true

	case "RunnerCount.name":
		if e.complexity.RunnerCount.Name == nil {
			break
		}

		return e.complexity.RunnerCount.Name(childComplexity), true

	case "SystemNetworkStats.bytesRecv":
		if e.complexity.SystemNetworkStats.BytesRecv == nil {
			break
		}

		return e.complexity.SystemNetworkStats.BytesRecv(childComplexity), true

	case "SystemNetworkStats.bytesSent":
		if e.complexity.SystemNetworkStats.BytesSent == nil {
			break
		}

		return e.complexity.SystemNetworkStats.BytesSent(childComplexity), true

	case "SystemNetworkStats.id":
		if e.complexity.SystemNetworkStats.ID == nil {
			break
		}

		return e.complexity.SystemNetworkStats.ID(childComplexity), true

	case "SystemNetworkStats.networkMetrics":
		if e.complexity.SystemNetworkStats.NetworkMetrics == nil {
			break
		}

		return e.complexity.SystemNetworkStats.NetworkMetrics(childComplexity), true

	case "SystemNetworkStats.packetsRecv":
		if e.complexity.SystemNetworkStats.PacketsRecv == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PacketsRecv(childComplexity), true

	case "SystemNetworkStats.packetsSent":
		if e.complexity.SystemNetworkStats.PacketsSent == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PacketsSent(childComplexity), true

	case "SystemNetworkStats.peakBytesRecvPerSec":
		if e.complexity.SystemNetworkStats.PeakBytesRecvPerSec == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PeakBytesRecvPerSec(childComplexity), true

	case "SystemNetworkStats.peakBytesSentPerSec":
		if e.complexity.SystemNetworkStats.PeakBytesSentPerSec == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PeakBytesSentPerSec(childComplexity), true

	case "SystemNetworkStats.peakPacketsRecvPerSec":
		if e.complexity.SystemNetworkStats.PeakPacketsRecvPerSec == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PeakPacketsRecvPerSec(childComplexity), true

	case "SystemNetworkStats.peakPacketsSentPerSec":
		if e.complexity.SystemNetworkStats.PeakPacketsSentPerSec == nil {
			break
		}

		return e.complexity.SystemNetworkStats.PeakPacketsSentPerSec(childComplexity), true

	case "TargetMetrics.id":
		if e.complexity.TargetMetrics.ID == nil {
			break
		}

		return e.complexity.TargetMetrics.ID(childComplexity), true

	case "TargetMetrics.metrics":
		if e.complexity.TargetMetrics.Metrics == nil {
			break
		}

		return e.complexity.TargetMetrics.Metrics(childComplexity), true

	case "TargetMetrics.targetsConfigured":
		if e.complexity.TargetMetrics.TargetsConfigured == nil {
			break
		}

		return e.complexity.TargetMetrics.TargetsConfigured(childComplexity), true

	case "TargetMetrics.targetsConfiguredNotIncludingAspects":
		if e.complexity.TargetMetrics.TargetsConfiguredNotIncludingAspects == nil {
			break
		}

		return e.complexity.TargetMetrics.TargetsConfiguredNotIncludingAspects(childComplexity), true

	case "TargetMetrics.targetsLoaded":
		if e.complexity.TargetMetrics.TargetsLoaded == nil {
			break
		}

		return e.complexity.TargetMetrics.TargetsLoaded(childComplexity), true

	case "TargetProblem.id":
		if e.complexity.TargetProblem.ID == nil {
			break
		}

		return e.complexity.TargetProblem.ID(childComplexity), true

	case "TargetProblem.label":
		if e.complexity.TargetProblem.Label == nil {
			break
		}

		return e.complexity.TargetProblem.Label(childComplexity), true

	case "TestProblem.id":
		if e.complexity.TestProblem.ID == nil {
			break
		}

		return e.complexity.TestProblem.ID(childComplexity), true

	case "TestProblem.label":
		if e.complexity.TestProblem.Label == nil {
			break
		}

		return e.complexity.TestProblem.Label(childComplexity), true

	case "TestProblem.results":
		if e.complexity.TestProblem.Results == nil {
			break
		}

		return e.complexity.TestProblem.Results(childComplexity), true

	case "TestProblem.status":
		if e.complexity.TestProblem.Status == nil {
			break
		}

		return e.complexity.TestProblem.Status(childComplexity), true

	case "TestResult.actionLogOutput":
		if e.complexity.TestResult.ActionLogOutput == nil {
			break
		}

		return e.complexity.TestResult.ActionLogOutput(childComplexity), true

	case "TestResult.attempt":
		if e.complexity.TestResult.Attempt == nil {
			break
		}

		return e.complexity.TestResult.Attempt(childComplexity), true

	case "TestResult.id":
		if e.complexity.TestResult.ID == nil {
			break
		}

		return e.complexity.TestResult.ID(childComplexity), true

	case "TestResult.run":
		if e.complexity.TestResult.Run == nil {
			break
		}

		return e.complexity.TestResult.Run(childComplexity), true

	case "TestResult.shard":
		if e.complexity.TestResult.Shard == nil {
			break
		}

		return e.complexity.TestResult.Shard(childComplexity), true

	case "TestResult.status":
		if e.complexity.TestResult.Status == nil {
			break
		}

		return e.complexity.TestResult.Status(childComplexity), true

	case "TestResult.undeclaredTestOutputs":
		if e.complexity.TestResult.UndeclaredTestOutputs == nil {
			break
		}

		return e.complexity.TestResult.UndeclaredTestOutputs(childComplexity), true

	case "TimingMetrics.actionsExecutionStartInMs":
		if e.complexity.TimingMetrics.ActionsExecutionStartInMs == nil {
			break
		}

		return e.complexity.TimingMetrics.ActionsExecutionStartInMs(childComplexity), true

	case "TimingMetrics.analysisPhaseTimeInMs":
		if e.complexity.TimingMetrics.AnalysisPhaseTimeInMs == nil {
			break
		}

		return e.complexity.TimingMetrics.AnalysisPhaseTimeInMs(childComplexity), true

	case "TimingMetrics.cpuTimeInMs":
		if e.complexity.TimingMetrics.CPUTimeInMs == nil {
			break
		}

		return e.complexity.TimingMetrics.CPUTimeInMs(childComplexity), true

	case "TimingMetrics.executionPhaseTimeInMs":
		if e.complexity.TimingMetrics.ExecutionPhaseTimeInMs == nil {
			break
		}

		return e.complexity.TimingMetrics.ExecutionPhaseTimeInMs(childComplexity), true

	case "TimingMetrics.id":
		if e.complexity.TimingMetrics.ID == nil {
			break
		}

		return e.complexity.TimingMetrics.ID(childComplexity), true

	case "TimingMetrics.metrics":
		if e.complexity.TimingMetrics.Metrics == nil {
			break
		}

		return e.complexity.TimingMetrics.Metrics(childComplexity), true

	case "TimingMetrics.wallTimeInMs":
		if e.complexity.TimingMetrics.WallTimeInMs == nil {
			break
		}

		return e.complexity.TimingMetrics.WallTimeInMs(childComplexity), true

	case "User.Email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.LDAP":
		if e.complexity.User.Ldap == nil {
			break
		}

		return e.complexity.User.Ldap(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputActionCacheStatisticsWhereInput,
		ec.unmarshalInputActionDataWhereInput,
		ec.unmarshalInputActionSummaryWhereInput,
		ec.unmarshalInputArtifactMetricsWhereInput,
		ec.unmarshalInputBazelInvocationProblemWhereInput,
		ec.unmarshalInputBazelInvocationWhereInput,
		ec.unmarshalInputBlobWhereInput,
		ec.unmarshalInputBuildWhereInput,
		ec.unmarshalInputCumulativeMetricsWhereInput,
		ec.unmarshalInputDynamicExecutionMetricsWhereInput,
		ec.unmarshalInputEventFileWhereInput,
		ec.unmarshalInputFilesMetricWhereInput,
		ec.unmarshalInputGarbageMetricsWhereInput,
		ec.unmarshalInputMemoryMetricsWhereInput,
		ec.unmarshalInputMetricsWhereInput,
		ec.unmarshalInputMissDetailWhereInput,
		ec.unmarshalInputNetworkMetricsWhereInput,
		ec.unmarshalInputPackageLoadMetricsWhereInput,
		ec.unmarshalInputPackageMetricsWhereInput,
		ec.unmarshalInputRaceStatisticsWhereInput,
		ec.unmarshalInputRunnerCountWhereInput,
		ec.unmarshalInputSystemNetworkStatsWhereInput,
		ec.unmarshalInputTargetMetricsWhereInput,
		ec.unmarshalInputTimingMetricsWhereInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "schema/scalars.graphql" "schema/ent.graphql" "schema/custom.graphql"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schema/scalars.graphql", Input: sourceData("schema/scalars.graphql"), BuiltIn: false},
	{Name: "schema/ent.graphql", Input: sourceData("schema/ent.graphql"), BuiltIn: false},
	{Name: "schema/custom.graphql", Input: sourceData("schema/custom.graphql"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_bazelInvocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["invocationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["invocationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findBazelInvocations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *entgql.Cursor[int]
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *entgql.Cursor[int]
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *ent.BazelInvocationWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOBazelInvocationWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_findBuilds_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *entgql.Cursor[int]
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *entgql.Cursor[int]
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *ent.BuildWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOBuildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_findMetrics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *entgql.Cursor[int]
	if tmp, ok := rawArgs["after"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
		arg0, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *entgql.Cursor[int]
	if tmp, ok := rawArgs["before"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
		arg2, err = ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["last"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	var arg4 *ent.MetricsWhereInput
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getBuild_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["buildURL"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURL"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["buildURL"] = arg0
	var arg1 *uuid.UUID
	if tmp, ok := rawArgs["buildUUID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUID"))
		arg1, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["buildUUID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_nodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ActionCacheStatistics_id(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionCacheStatistics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_sizeInBytes(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_sizeInBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeInBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_sizeInBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_saveTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_saveTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaveTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_saveTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_loadTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_loadTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_loadTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_hits(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_hits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_hits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_misses(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_misses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Misses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_misses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_missDetails(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_missDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MissDetails(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.MissDetail)
	fc.Result = res
	return ec.marshalOMissDetail2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_missDetails(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MissDetail_id(ctx, field)
			case "reason":
				return ec.fieldContext_MissDetail_reason(ctx, field)
			case "count":
				return ec.fieldContext_MissDetail_count(ctx, field)
			case "actionCacheStatistics":
				return ec.fieldContext_MissDetail_actionCacheStatistics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MissDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionCacheStatistics_actionSummary(ctx context.Context, field graphql.CollectedField, obj *ent.ActionCacheStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionCacheStatistics_actionSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionSummary(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ActionSummary)
	fc.Result = res
	return ec.marshalOActionSummary2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionCacheStatistics_actionSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionCacheStatistics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionSummary_id(ctx, field)
			case "actionsCreated":
				return ec.fieldContext_ActionSummary_actionsCreated(ctx, field)
			case "actionsCreatedNotIncludingAspects":
				return ec.fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_ActionSummary_actionsExecuted(ctx, field)
			case "remoteCacheHits":
				return ec.fieldContext_ActionSummary_remoteCacheHits(ctx, field)
			case "actionData":
				return ec.fieldContext_ActionSummary_actionData(ctx, field)
			case "runnerCount":
				return ec.fieldContext_ActionSummary_runnerCount(ctx, field)
			case "actionCacheStatistics":
				return ec.fieldContext_ActionSummary_actionCacheStatistics(ctx, field)
			case "metrics":
				return ec.fieldContext_ActionSummary_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_id(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionData().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_mnemonic(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_mnemonic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mnemonic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_mnemonic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_actionsExecuted(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_actionsExecuted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsExecuted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_actionsExecuted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_actionsCreated(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_actionsCreated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_actionsCreated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_firstStartedMs(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_firstStartedMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstStartedMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_firstStartedMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_lastEndedMs(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_lastEndedMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastEndedMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_lastEndedMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_systemTime(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_systemTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionData().SystemTime(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_systemTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_userTime(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_userTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionData().UserTime(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_userTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_actionSummary(ctx context.Context, field graphql.CollectedField, obj *ent.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_actionSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionSummary(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ActionSummary)
	fc.Result = res
	return ec.marshalOActionSummary2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_actionSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionSummary_id(ctx, field)
			case "actionsCreated":
				return ec.fieldContext_ActionSummary_actionsCreated(ctx, field)
			case "actionsCreatedNotIncludingAspects":
				return ec.fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_ActionSummary_actionsExecuted(ctx, field)
			case "remoteCacheHits":
				return ec.fieldContext_ActionSummary_remoteCacheHits(ctx, field)
			case "actionData":
				return ec.fieldContext_ActionSummary_actionData(ctx, field)
			case "runnerCount":
				return ec.fieldContext_ActionSummary_runnerCount(ctx, field)
			case "actionCacheStatistics":
				return ec.fieldContext_ActionSummary_actionCacheStatistics(ctx, field)
			case "metrics":
				return ec.fieldContext_ActionSummary_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionProblem_id(ctx context.Context, field graphql.CollectedField, obj *model.ActionProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionProblem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionProblem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionProblem_label(ctx context.Context, field graphql.CollectedField, obj *model.ActionProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionProblem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionProblem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionProblem_type(ctx context.Context, field graphql.CollectedField, obj *model.ActionProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionProblem_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionProblem_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionProblem_stdout(ctx context.Context, field graphql.CollectedField, obj *model.ActionProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionProblem_stdout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionProblem().Stdout(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlobReference)
	fc.Result = res
	return ec.marshalOBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionProblem_stdout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionProblem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_BlobReference_name(ctx, field)
			case "downloadURL":
				return ec.fieldContext_BlobReference_downloadURL(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_BlobReference_sizeInBytes(ctx, field)
			case "availabilityStatus":
				return ec.fieldContext_BlobReference_availabilityStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlobReference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionProblem_stderr(ctx context.Context, field graphql.CollectedField, obj *model.ActionProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionProblem_stderr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionProblem().Stderr(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlobReference)
	fc.Result = res
	return ec.marshalOBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionProblem_stderr(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionProblem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_BlobReference_name(ctx, field)
			case "downloadURL":
				return ec.fieldContext_BlobReference_downloadURL(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_BlobReference_sizeInBytes(ctx, field)
			case "availabilityStatus":
				return ec.fieldContext_BlobReference_availabilityStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlobReference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_id(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ActionSummary().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_actionsCreated(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_actionsCreated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_actionsCreated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_actionsCreatedNotIncludingAspects(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsCreatedNotIncludingAspects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_actionsExecuted(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_actionsExecuted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsExecuted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_actionsExecuted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_remoteCacheHits(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_remoteCacheHits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoteCacheHits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_remoteCacheHits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_actionData(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_actionData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionData(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ActionData)
	fc.Result = res
	return ec.marshalOActionData2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_actionData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionData_id(ctx, field)
			case "mnemonic":
				return ec.fieldContext_ActionData_mnemonic(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_ActionData_actionsExecuted(ctx, field)
			case "actionsCreated":
				return ec.fieldContext_ActionData_actionsCreated(ctx, field)
			case "firstStartedMs":
				return ec.fieldContext_ActionData_firstStartedMs(ctx, field)
			case "lastEndedMs":
				return ec.fieldContext_ActionData_lastEndedMs(ctx, field)
			case "systemTime":
				return ec.fieldContext_ActionData_systemTime(ctx, field)
			case "userTime":
				return ec.fieldContext_ActionData_userTime(ctx, field)
			case "actionSummary":
				return ec.fieldContext_ActionData_actionSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_runnerCount(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_runnerCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RunnerCount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.RunnerCount)
	fc.Result = res
	return ec.marshalORunnerCount2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_runnerCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RunnerCount_id(ctx, field)
			case "name":
				return ec.fieldContext_RunnerCount_name(ctx, field)
			case "execKind":
				return ec.fieldContext_RunnerCount_execKind(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_RunnerCount_actionsExecuted(ctx, field)
			case "actionSummary":
				return ec.fieldContext_RunnerCount_actionSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RunnerCount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_actionCacheStatistics(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_actionCacheStatistics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionCacheStatistics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ActionCacheStatistics)
	fc.Result = res
	return ec.marshalOActionCacheStatistics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_actionCacheStatistics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionCacheStatistics_id(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_ActionCacheStatistics_sizeInBytes(ctx, field)
			case "saveTimeInMs":
				return ec.fieldContext_ActionCacheStatistics_saveTimeInMs(ctx, field)
			case "loadTimeInMs":
				return ec.fieldContext_ActionCacheStatistics_loadTimeInMs(ctx, field)
			case "hits":
				return ec.fieldContext_ActionCacheStatistics_hits(ctx, field)
			case "misses":
				return ec.fieldContext_ActionCacheStatistics_misses(ctx, field)
			case "missDetails":
				return ec.fieldContext_ActionCacheStatistics_missDetails(ctx, field)
			case "actionSummary":
				return ec.fieldContext_ActionCacheStatistics_actionSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionCacheStatistics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSummary_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.ActionSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSummary_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSummary_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSummary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ArtifactMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_sourceArtifactsRead(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_sourceArtifactsRead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceArtifactsRead(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.FilesMetric)
	fc.Result = res
	return ec.marshalOFilesMetric2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_sourceArtifactsRead(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FilesMetric_id(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_FilesMetric_sizeInBytes(ctx, field)
			case "count":
				return ec.fieldContext_FilesMetric_count(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_FilesMetric_artifactMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FilesMetric", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_outputArtifactsSeen(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_outputArtifactsSeen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputArtifactsSeen(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.FilesMetric)
	fc.Result = res
	return ec.marshalOFilesMetric2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_outputArtifactsSeen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FilesMetric_id(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_FilesMetric_sizeInBytes(ctx, field)
			case "count":
				return ec.fieldContext_FilesMetric_count(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_FilesMetric_artifactMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FilesMetric", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_outputArtifactsFromActionCache(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_outputArtifactsFromActionCache(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputArtifactsFromActionCache(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.FilesMetric)
	fc.Result = res
	return ec.marshalOFilesMetric2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_outputArtifactsFromActionCache(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FilesMetric_id(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_FilesMetric_sizeInBytes(ctx, field)
			case "count":
				return ec.fieldContext_FilesMetric_count(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_FilesMetric_artifactMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FilesMetric", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ArtifactMetrics_topLevelArtifacts(ctx context.Context, field graphql.CollectedField, obj *ent.ArtifactMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ArtifactMetrics_topLevelArtifacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopLevelArtifacts(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.FilesMetric)
	fc.Result = res
	return ec.marshalOFilesMetric2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ArtifactMetrics_topLevelArtifacts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ArtifactMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FilesMetric_id(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_FilesMetric_sizeInBytes(ctx, field)
			case "count":
				return ec.fieldContext_FilesMetric_count(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_FilesMetric_artifactMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FilesMetric", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_id(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_command(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_command(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Command, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_command(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_executable(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_executable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Executable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_executable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_options(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelCommand_residual(ctx context.Context, field graphql.CollectedField, obj *model.BazelCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelCommand_residual(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Residual, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelCommand_residual(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_id(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_invocationID(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_invocationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvocationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_invocationID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_startedAt(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_startedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_endedAt(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_endedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_endedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_changeNumber(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_changeNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_patchsetNumber(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatchsetNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_patchsetNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_bepCompleted(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BepCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_bepCompleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_stepLabel(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StepLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_stepLabel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_userEmail(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_userEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_userEmail(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_userLdap(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_userLdap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLdap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_userLdap(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_buildLogs(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildLogs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_buildLogs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_eventFile(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_eventFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventFile(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.EventFile)
	fc.Result = res
	return ec.marshalNEventFile2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEventFile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_eventFile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EventFile_id(ctx, field)
			case "url":
				return ec.fieldContext_EventFile_url(ctx, field)
			case "modTime":
				return ec.fieldContext_EventFile_modTime(ctx, field)
			case "protocol":
				return ec.fieldContext_EventFile_protocol(ctx, field)
			case "mimeType":
				return ec.fieldContext_EventFile_mimeType(ctx, field)
			case "status":
				return ec.fieldContext_EventFile_status(ctx, field)
			case "reason":
				return ec.fieldContext_EventFile_reason(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_EventFile_bazelInvocation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventFile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_build(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_build(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Build(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Build)
	fc.Result = res
	return ec.marshalOBuild2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuild(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_build(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Build_id(ctx, field)
			case "buildURL":
				return ec.fieldContext_Build_buildURL(ctx, field)
			case "buildUUID":
				return ec.fieldContext_Build_buildUUID(ctx, field)
			case "invocations":
				return ec.fieldContext_Build_invocations(ctx, field)
			case "env":
				return ec.fieldContext_Build_env(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Build", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_bazelCommand(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().BazelCommand(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BazelCommand)
	fc.Result = res
	return ec.marshalNBazelCommand2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelCommand(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_bazelCommand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelCommand_id(ctx, field)
			case "command":
				return ec.fieldContext_BazelCommand_command(ctx, field)
			case "executable":
				return ec.fieldContext_BazelCommand_executable(ctx, field)
			case "options":
				return ec.fieldContext_BazelCommand_options(ctx, field)
			case "residual":
				return ec.fieldContext_BazelCommand_residual(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelCommand", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_state(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().State(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BazelInvocationState)
	fc.Result = res
	return ec.marshalNBazelInvocationState2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelInvocationState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocationState_id(ctx, field)
			case "buildEndTime":
				return ec.fieldContext_BazelInvocationState_buildEndTime(ctx, field)
			case "buildStartTime":
				return ec.fieldContext_BazelInvocationState_buildStartTime(ctx, field)
			case "exitCode":
				return ec.fieldContext_BazelInvocationState_exitCode(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocationState_bepCompleted(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocationState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_user(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "Email":
				return ec.fieldContext_User_Email(ctx, field)
			case "LDAP":
				return ec.fieldContext_User_LDAP(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_relatedFiles(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_relatedFiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().RelatedFiles(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.NamedFile)
	fc.Result = res
	return ec.marshalNNamedFile2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐNamedFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_relatedFiles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_NamedFile_name(ctx, field)
			case "url":
				return ec.fieldContext_NamedFile_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NamedFile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocation_problems(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocation_problems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocation().Problems(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Problem)
	fc.Result = res
	return ec.marshalNProblem2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐProblemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocation_problems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.BazelInvocationEdge)
	fc.Result = res
	return ec.marshalOBazelInvocationEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_BazelInvocationEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_BazelInvocationEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocationEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			case "eventFile":
				return ec.fieldContext_BazelInvocation_eventFile(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "relatedFiles":
				return ec.fieldContext_BazelInvocation_relatedFiles(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationProblem_id(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationProblem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BazelInvocationProblem().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationProblem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationProblem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationProblem_problemType(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationProblem_problemType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProblemType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationProblem_problemType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationProblem_label(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationProblem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationProblem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationProblem_bazelInvocation(ctx context.Context, field graphql.CollectedField, obj *ent.BazelInvocationProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationProblem_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BazelInvocation(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationProblem_bazelInvocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationProblem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			case "eventFile":
				return ec.fieldContext_BazelInvocation_eventFile(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "relatedFiles":
				return ec.fieldContext_BazelInvocation_relatedFiles(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationState_id(ctx context.Context, field graphql.CollectedField, obj *model.BazelInvocationState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationState_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationState_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationState_buildEndTime(ctx context.Context, field graphql.CollectedField, obj *model.BazelInvocationState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationState_buildEndTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationState_buildEndTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationState_buildStartTime(ctx context.Context, field graphql.CollectedField, obj *model.BazelInvocationState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationState_buildStartTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationState_buildStartTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationState_exitCode(ctx context.Context, field graphql.CollectedField, obj *model.BazelInvocationState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationState_exitCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExitCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ExitCode)
	fc.Result = res
	return ec.marshalOExitCode2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐExitCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationState_exitCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExitCode_id(ctx, field)
			case "code":
				return ec.fieldContext_ExitCode_code(ctx, field)
			case "name":
				return ec.fieldContext_ExitCode_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExitCode", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BazelInvocationState_bepCompleted(ctx context.Context, field graphql.CollectedField, obj *model.BazelInvocationState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BazelInvocationState_bepCompleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BepCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BazelInvocationState_bepCompleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BazelInvocationState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_id(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Blob().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_uri(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_uri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_uri(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_sizeBytes(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_sizeBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_sizeBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_archivingStatus(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_archivingStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArchivingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(blob.ArchivingStatus)
	fc.Result = res
	return ec.marshalNBlobArchivingStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_archivingStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BlobArchivingStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_reason(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_reason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Blob_archiveURL(ctx context.Context, field graphql.CollectedField, obj *ent.Blob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Blob_archiveURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArchiveURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Blob_archiveURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Blob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobReference_name(ctx context.Context, field graphql.CollectedField, obj *model.BlobReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobReference_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobReference_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobReference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobReference_downloadURL(ctx context.Context, field graphql.CollectedField, obj *model.BlobReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobReference_downloadURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BlobReference().DownloadURL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobReference_downloadURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobReference",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobReference_sizeInBytes(ctx context.Context, field graphql.CollectedField, obj *model.BlobReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobReference_sizeInBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BlobReference().SizeInBytes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobReference_sizeInBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobReference",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlobReference_availabilityStatus(ctx context.Context, field graphql.CollectedField, obj *model.BlobReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlobReference_availabilityStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BlobReference().AvailabilityStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActionOutputStatus)
	fc.Result = res
	return ec.marshalNActionOutputStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐActionOutputStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlobReference_availabilityStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlobReference",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActionOutputStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Build_id(ctx context.Context, field graphql.CollectedField, obj *ent.Build) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Build_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Build().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Build_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Build_buildURL(ctx context.Context, field graphql.CollectedField, obj *ent.Build) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Build_buildURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Build_buildURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Build_buildUUID(ctx context.Context, field graphql.CollectedField, obj *ent.Build) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Build_buildUUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildUUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Build_buildUUID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Build_invocations(ctx context.Context, field graphql.CollectedField, obj *ent.Build) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Build_invocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invocations(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Build_invocations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			case "eventFile":
				return ec.fieldContext_BazelInvocation_eventFile(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "relatedFiles":
				return ec.fieldContext_BazelInvocation_relatedFiles(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Build_env(ctx context.Context, field graphql.CollectedField, obj *ent.Build) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Build_env(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Build().Env(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EnvVar)
	fc.Result = res
	return ec.marshalNEnvVar2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐEnvVarᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Build_env(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_EnvVar_key(ctx, field)
			case "value":
				return ec.fieldContext_EnvVar_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EnvVar", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.BuildConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.BuildEdge)
	fc.Result = res
	return ec.marshalOBuildEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_BuildEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_BuildEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BuildEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.BuildConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.BuildConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.BuildEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Build)
	fc.Result = res
	return ec.marshalOBuild2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuild(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Build_id(ctx, field)
			case "buildURL":
				return ec.fieldContext_Build_buildURL(ctx, field)
			case "buildUUID":
				return ec.fieldContext_Build_buildUUID(ctx, field)
			case "invocations":
				return ec.fieldContext_Build_invocations(ctx, field)
			case "env":
				return ec.fieldContext_Build_env(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Build", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.BuildEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CumulativeMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.CumulativeMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CumulativeMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CumulativeMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CumulativeMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CumulativeMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CumulativeMetrics_numAnalyses(ctx context.Context, field graphql.CollectedField, obj *ent.CumulativeMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CumulativeMetrics_numAnalyses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumAnalyses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CumulativeMetrics_numAnalyses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CumulativeMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CumulativeMetrics_numBuilds(ctx context.Context, field graphql.CollectedField, obj *ent.CumulativeMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CumulativeMetrics_numBuilds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumBuilds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CumulativeMetrics_numBuilds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CumulativeMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CumulativeMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.CumulativeMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CumulativeMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CumulativeMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CumulativeMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DynamicExecutionMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.DynamicExecutionMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DynamicExecutionMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DynamicExecutionMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DynamicExecutionMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DynamicExecutionMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DynamicExecutionMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.DynamicExecutionMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DynamicExecutionMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DynamicExecutionMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DynamicExecutionMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DynamicExecutionMetrics_raceStatistics(ctx context.Context, field graphql.CollectedField, obj *ent.DynamicExecutionMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DynamicExecutionMetrics_raceStatistics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RaceStatistics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.RaceStatistics)
	fc.Result = res
	return ec.marshalORaceStatistics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatisticsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DynamicExecutionMetrics_raceStatistics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DynamicExecutionMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RaceStatistics_id(ctx, field)
			case "mnemonic":
				return ec.fieldContext_RaceStatistics_mnemonic(ctx, field)
			case "localRunner":
				return ec.fieldContext_RaceStatistics_localRunner(ctx, field)
			case "remoteRunner":
				return ec.fieldContext_RaceStatistics_remoteRunner(ctx, field)
			case "localWins":
				return ec.fieldContext_RaceStatistics_localWins(ctx, field)
			case "renoteWins":
				return ec.fieldContext_RaceStatistics_renoteWins(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_RaceStatistics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RaceStatistics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnvVar_key(ctx context.Context, field graphql.CollectedField, obj *model.EnvVar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EnvVar_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EnvVar_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnvVar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnvVar_value(ctx context.Context, field graphql.CollectedField, obj *model.EnvVar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EnvVar_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EnvVar_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnvVar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFile_id(ctx context.Context, field graphql.CollectedField, obj *ent.EventFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EventFile().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFile_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFile",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFile_url(ctx context.Context, field graphql.CollectedField, obj *ent.EventFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFile_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFile_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFile_modTime(ctx context.Context, field graphql.CollectedField, obj *ent.EventFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFile_modTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFile_modTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFile_protocol(ctx context.Context, field graphql.CollectedField, obj *ent.EventFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFile_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Protocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFile_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFile_mimeType(ctx context.Context, field graphql.CollectedField, obj *ent.EventFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFile_mimeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFile_mimeType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFile_status(ctx context.Context, field graphql.CollectedField, obj *ent.EventFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFile_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFile_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFile_reason(ctx context.Context, field graphql.CollectedField, obj *ent.EventFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFile_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFile_reason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventFile_bazelInvocation(ctx context.Context, field graphql.CollectedField, obj *ent.EventFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventFile_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BazelInvocation(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventFile_bazelInvocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventFile",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			case "eventFile":
				return ec.fieldContext_BazelInvocation_eventFile(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "relatedFiles":
				return ec.fieldContext_BazelInvocation_relatedFiles(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExitCode_id(ctx context.Context, field graphql.CollectedField, obj *model.ExitCode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExitCode_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExitCode_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExitCode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExitCode_code(ctx context.Context, field graphql.CollectedField, obj *model.ExitCode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExitCode_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExitCode_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExitCode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExitCode_name(ctx context.Context, field graphql.CollectedField, obj *model.ExitCode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExitCode_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExitCode_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExitCode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilesMetric_id(ctx context.Context, field graphql.CollectedField, obj *ent.FilesMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilesMetric_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.FilesMetric().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilesMetric_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilesMetric",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilesMetric_sizeInBytes(ctx context.Context, field graphql.CollectedField, obj *ent.FilesMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilesMetric_sizeInBytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeInBytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilesMetric_sizeInBytes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilesMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilesMetric_count(ctx context.Context, field graphql.CollectedField, obj *ent.FilesMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilesMetric_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilesMetric_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilesMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FilesMetric_artifactMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.FilesMetric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FilesMetric_artifactMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtifactMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ArtifactMetrics)
	fc.Result = res
	return ec.marshalOArtifactMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FilesMetric_artifactMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FilesMetric",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactMetrics_id(ctx, field)
			case "metrics":
				return ec.fieldContext_ArtifactMetrics_metrics(ctx, field)
			case "sourceArtifactsRead":
				return ec.fieldContext_ArtifactMetrics_sourceArtifactsRead(ctx, field)
			case "outputArtifactsSeen":
				return ec.fieldContext_ArtifactMetrics_outputArtifactsSeen(ctx, field)
			case "outputArtifactsFromActionCache":
				return ec.fieldContext_ArtifactMetrics_outputArtifactsFromActionCache(ctx, field)
			case "topLevelArtifacts":
				return ec.fieldContext_ArtifactMetrics_topLevelArtifacts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GarbageMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.GarbageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GarbageMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GarbageMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GarbageMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GarbageMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GarbageMetrics_type(ctx context.Context, field graphql.CollectedField, obj *ent.GarbageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GarbageMetrics_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GarbageMetrics_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GarbageMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GarbageMetrics_garbageCollected(ctx context.Context, field graphql.CollectedField, obj *ent.GarbageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GarbageMetrics_garbageCollected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GarbageCollected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GarbageMetrics_garbageCollected(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GarbageMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GarbageMetrics_memoryMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.GarbageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GarbageMetrics_memoryMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemoryMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.MemoryMetrics)
	fc.Result = res
	return ec.marshalOMemoryMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GarbageMetrics_memoryMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GarbageMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemoryMetrics_id(ctx, field)
			case "peakPostGcHeapSize":
				return ec.fieldContext_MemoryMetrics_peakPostGcHeapSize(ctx, field)
			case "usedHeapSizePostBuild":
				return ec.fieldContext_MemoryMetrics_usedHeapSizePostBuild(ctx, field)
			case "peakPostGcTenuredSpaceHeapSize":
				return ec.fieldContext_MemoryMetrics_peakPostGcTenuredSpaceHeapSize(ctx, field)
			case "garbageMetrics":
				return ec.fieldContext_MemoryMetrics_garbageMetrics(ctx, field)
			case "metrics":
				return ec.fieldContext_MemoryMetrics_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemoryMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MemoryMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_peakPostGcHeapSize(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_peakPostGcHeapSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakPostGcHeapSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_peakPostGcHeapSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_usedHeapSizePostBuild(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_usedHeapSizePostBuild(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsedHeapSizePostBuild, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_usedHeapSizePostBuild(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_peakPostGcTenuredSpaceHeapSize(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_peakPostGcTenuredSpaceHeapSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakPostGcTenuredSpaceHeapSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_peakPostGcTenuredSpaceHeapSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_garbageMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_garbageMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GarbageMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.GarbageMetrics)
	fc.Result = res
	return ec.marshalOGarbageMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_garbageMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GarbageMetrics_id(ctx, field)
			case "type":
				return ec.fieldContext_GarbageMetrics_type(ctx, field)
			case "garbageCollected":
				return ec.fieldContext_GarbageMetrics_garbageCollected(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_GarbageMetrics_memoryMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GarbageMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemoryMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.MemoryMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemoryMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemoryMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemoryMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Metrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_bazelInvocation(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BazelInvocation(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_bazelInvocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			case "eventFile":
				return ec.fieldContext_BazelInvocation_eventFile(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "relatedFiles":
				return ec.fieldContext_BazelInvocation_relatedFiles(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_actionSummary(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_actionSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionSummary(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ActionSummary)
	fc.Result = res
	return ec.marshalOActionSummary2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_actionSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionSummary_id(ctx, field)
			case "actionsCreated":
				return ec.fieldContext_ActionSummary_actionsCreated(ctx, field)
			case "actionsCreatedNotIncludingAspects":
				return ec.fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_ActionSummary_actionsExecuted(ctx, field)
			case "remoteCacheHits":
				return ec.fieldContext_ActionSummary_remoteCacheHits(ctx, field)
			case "actionData":
				return ec.fieldContext_ActionSummary_actionData(ctx, field)
			case "runnerCount":
				return ec.fieldContext_ActionSummary_runnerCount(ctx, field)
			case "actionCacheStatistics":
				return ec.fieldContext_ActionSummary_actionCacheStatistics(ctx, field)
			case "metrics":
				return ec.fieldContext_ActionSummary_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_memoryMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_memoryMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemoryMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.MemoryMetrics)
	fc.Result = res
	return ec.marshalOMemoryMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_memoryMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemoryMetrics_id(ctx, field)
			case "peakPostGcHeapSize":
				return ec.fieldContext_MemoryMetrics_peakPostGcHeapSize(ctx, field)
			case "usedHeapSizePostBuild":
				return ec.fieldContext_MemoryMetrics_usedHeapSizePostBuild(ctx, field)
			case "peakPostGcTenuredSpaceHeapSize":
				return ec.fieldContext_MemoryMetrics_peakPostGcTenuredSpaceHeapSize(ctx, field)
			case "garbageMetrics":
				return ec.fieldContext_MemoryMetrics_garbageMetrics(ctx, field)
			case "metrics":
				return ec.fieldContext_MemoryMetrics_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemoryMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_targetMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_targetMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TargetMetrics)
	fc.Result = res
	return ec.marshalOTargetMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_targetMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TargetMetrics_id(ctx, field)
			case "targetsLoaded":
				return ec.fieldContext_TargetMetrics_targetsLoaded(ctx, field)
			case "targetsConfigured":
				return ec.fieldContext_TargetMetrics_targetsConfigured(ctx, field)
			case "targetsConfiguredNotIncludingAspects":
				return ec.fieldContext_TargetMetrics_targetsConfiguredNotIncludingAspects(ctx, field)
			case "metrics":
				return ec.fieldContext_TargetMetrics_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TargetMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_packageMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_packageMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.PackageMetrics)
	fc.Result = res
	return ec.marshalOPackageMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_packageMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PackageMetrics_id(ctx, field)
			case "packagesLoaded":
				return ec.fieldContext_PackageMetrics_packagesLoaded(ctx, field)
			case "packageLoadMetrics":
				return ec.fieldContext_PackageMetrics_packageLoadMetrics(ctx, field)
			case "metrics":
				return ec.fieldContext_PackageMetrics_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PackageMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_timingMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_timingMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimingMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.TimingMetrics)
	fc.Result = res
	return ec.marshalOTimingMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_timingMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TimingMetrics_id(ctx, field)
			case "cpuTimeInMs":
				return ec.fieldContext_TimingMetrics_cpuTimeInMs(ctx, field)
			case "wallTimeInMs":
				return ec.fieldContext_TimingMetrics_wallTimeInMs(ctx, field)
			case "analysisPhaseTimeInMs":
				return ec.fieldContext_TimingMetrics_analysisPhaseTimeInMs(ctx, field)
			case "executionPhaseTimeInMs":
				return ec.fieldContext_TimingMetrics_executionPhaseTimeInMs(ctx, field)
			case "actionsExecutionStartInMs":
				return ec.fieldContext_TimingMetrics_actionsExecutionStartInMs(ctx, field)
			case "metrics":
				return ec.fieldContext_TimingMetrics_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimingMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_cumulativeMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CumulativeMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.CumulativeMetrics)
	fc.Result = res
	return ec.marshalOCumulativeMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_cumulativeMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CumulativeMetrics_id(ctx, field)
			case "numAnalyses":
				return ec.fieldContext_CumulativeMetrics_numAnalyses(ctx, field)
			case "numBuilds":
				return ec.fieldContext_CumulativeMetrics_numBuilds(ctx, field)
			case "metrics":
				return ec.fieldContext_CumulativeMetrics_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CumulativeMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_artifactMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_artifactMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtifactMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ArtifactMetrics)
	fc.Result = res
	return ec.marshalOArtifactMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_artifactMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ArtifactMetrics_id(ctx, field)
			case "metrics":
				return ec.fieldContext_ArtifactMetrics_metrics(ctx, field)
			case "sourceArtifactsRead":
				return ec.fieldContext_ArtifactMetrics_sourceArtifactsRead(ctx, field)
			case "outputArtifactsSeen":
				return ec.fieldContext_ArtifactMetrics_outputArtifactsSeen(ctx, field)
			case "outputArtifactsFromActionCache":
				return ec.fieldContext_ArtifactMetrics_outputArtifactsFromActionCache(ctx, field)
			case "topLevelArtifacts":
				return ec.fieldContext_ArtifactMetrics_topLevelArtifacts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ArtifactMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_networkMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_networkMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetworkMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.NetworkMetrics)
	fc.Result = res
	return ec.marshalONetworkMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_networkMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NetworkMetrics_id(ctx, field)
			case "metrics":
				return ec.fieldContext_NetworkMetrics_metrics(ctx, field)
			case "systemNetworkStats":
				return ec.fieldContext_NetworkMetrics_systemNetworkStats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NetworkMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metrics_dynamicExecutionMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.Metrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DynamicExecutionMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.DynamicExecutionMetrics)
	fc.Result = res
	return ec.marshalODynamicExecutionMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metrics_dynamicExecutionMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DynamicExecutionMetrics_id(ctx, field)
			case "metrics":
				return ec.fieldContext_DynamicExecutionMetrics_metrics(ctx, field)
			case "raceStatistics":
				return ec.fieldContext_DynamicExecutionMetrics_raceStatistics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DynamicExecutionMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricsConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.MetricsConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricsConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.MetricsEdge)
	fc.Result = res
	return ec.marshalOMetricsEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricsConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricsConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_MetricsEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_MetricsEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricsEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricsConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.MetricsConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricsConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.PageInfo[int])
	fc.Result = res
	return ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricsConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricsConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricsConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.MetricsConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricsConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricsConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricsConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricsEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.MetricsEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricsEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricsEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricsEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricsEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.MetricsEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetricsEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(entgql.Cursor[int])
	fc.Result = res
	return ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetricsEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricsEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MissDetail_id(ctx context.Context, field graphql.CollectedField, obj *ent.MissDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MissDetail_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MissDetail().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MissDetail_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MissDetail",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MissDetail_reason(ctx context.Context, field graphql.CollectedField, obj *ent.MissDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MissDetail_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(missdetail.Reason)
	fc.Result = res
	return ec.marshalOMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MissDetail_reason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MissDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MissDetailReason does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MissDetail_count(ctx context.Context, field graphql.CollectedField, obj *ent.MissDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MissDetail_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MissDetail_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MissDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MissDetail_actionCacheStatistics(ctx context.Context, field graphql.CollectedField, obj *ent.MissDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MissDetail_actionCacheStatistics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionCacheStatistics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ActionCacheStatistics)
	fc.Result = res
	return ec.marshalOActionCacheStatistics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MissDetail_actionCacheStatistics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MissDetail",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionCacheStatistics_id(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_ActionCacheStatistics_sizeInBytes(ctx, field)
			case "saveTimeInMs":
				return ec.fieldContext_ActionCacheStatistics_saveTimeInMs(ctx, field)
			case "loadTimeInMs":
				return ec.fieldContext_ActionCacheStatistics_loadTimeInMs(ctx, field)
			case "hits":
				return ec.fieldContext_ActionCacheStatistics_hits(ctx, field)
			case "misses":
				return ec.fieldContext_ActionCacheStatistics_misses(ctx, field)
			case "missDetails":
				return ec.fieldContext_ActionCacheStatistics_missDetails(ctx, field)
			case "actionSummary":
				return ec.fieldContext_ActionCacheStatistics_actionSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionCacheStatistics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NamedFile_name(ctx context.Context, field graphql.CollectedField, obj *model.NamedFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NamedFile_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NamedFile_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NamedFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NamedFile_url(ctx context.Context, field graphql.CollectedField, obj *model.NamedFile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NamedFile_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NamedFile_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NamedFile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.NetworkMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.NetworkMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.NetworkMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkMetrics_systemNetworkStats(ctx context.Context, field graphql.CollectedField, obj *ent.NetworkMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkMetrics_systemNetworkStats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemNetworkStats(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.SystemNetworkStats)
	fc.Result = res
	return ec.marshalOSystemNetworkStats2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkMetrics_systemNetworkStats(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemNetworkStats_id(ctx, field)
			case "bytesSent":
				return ec.fieldContext_SystemNetworkStats_bytesSent(ctx, field)
			case "bytesRecv":
				return ec.fieldContext_SystemNetworkStats_bytesRecv(ctx, field)
			case "packetsSent":
				return ec.fieldContext_SystemNetworkStats_packetsSent(ctx, field)
			case "packetsRecv":
				return ec.fieldContext_SystemNetworkStats_packetsRecv(ctx, field)
			case "peakBytesSentPerSec":
				return ec.fieldContext_SystemNetworkStats_peakBytesSentPerSec(ctx, field)
			case "peakBytesRecvPerSec":
				return ec.fieldContext_SystemNetworkStats_peakBytesRecvPerSec(ctx, field)
			case "peakPacketsSentPerSec":
				return ec.fieldContext_SystemNetworkStats_peakPacketsSentPerSec(ctx, field)
			case "peakPacketsRecvPerSec":
				return ec.fieldContext_SystemNetworkStats_peakPacketsRecvPerSec(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_SystemNetworkStats_networkMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemNetworkStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PackageLoadMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_name(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_loadDuration(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_loadDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PackageLoadMetrics().LoadDuration(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_loadDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_numTargets(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_numTargets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumTargets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_numTargets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_computationSteps(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_computationSteps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComputationSteps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_computationSteps(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_numTransitiveLoads(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_numTransitiveLoads(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumTransitiveLoads, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_numTransitiveLoads(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_packageOverhead(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_packageOverhead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageOverhead, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_packageOverhead(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageLoadMetrics_packageMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.PackageLoadMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageLoadMetrics_packageMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.PackageMetrics)
	fc.Result = res
	return ec.marshalOPackageMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageLoadMetrics_packageMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageLoadMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PackageMetrics_id(ctx, field)
			case "packagesLoaded":
				return ec.fieldContext_PackageMetrics_packagesLoaded(ctx, field)
			case "packageLoadMetrics":
				return ec.fieldContext_PackageMetrics_packageLoadMetrics(ctx, field)
			case "metrics":
				return ec.fieldContext_PackageMetrics_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PackageMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.PackageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PackageMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageMetrics_packagesLoaded(ctx context.Context, field graphql.CollectedField, obj *ent.PackageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageMetrics_packagesLoaded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackagesLoaded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageMetrics_packagesLoaded(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageMetrics_packageLoadMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.PackageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageMetrics_packageLoadMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageLoadMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.PackageLoadMetrics)
	fc.Result = res
	return ec.marshalOPackageLoadMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageMetrics_packageLoadMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PackageLoadMetrics_id(ctx, field)
			case "name":
				return ec.fieldContext_PackageLoadMetrics_name(ctx, field)
			case "loadDuration":
				return ec.fieldContext_PackageLoadMetrics_loadDuration(ctx, field)
			case "numTargets":
				return ec.fieldContext_PackageLoadMetrics_numTargets(ctx, field)
			case "computationSteps":
				return ec.fieldContext_PackageLoadMetrics_computationSteps(ctx, field)
			case "numTransitiveLoads":
				return ec.fieldContext_PackageLoadMetrics_numTransitiveLoads(ctx, field)
			case "packageOverhead":
				return ec.fieldContext_PackageLoadMetrics_packageOverhead(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_PackageLoadMetrics_packageMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PackageLoadMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackageMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.PackageMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackageMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackageMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackageMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[int])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[int]) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entgql.Cursor[int])
	fc.Result = res
	return ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressProblem_id(ctx context.Context, field graphql.CollectedField, obj *model.ProgressProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressProblem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressProblem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressProblem_label(ctx context.Context, field graphql.CollectedField, obj *model.ProgressProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressProblem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressProblem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgressProblem_output(ctx context.Context, field graphql.CollectedField, obj *model.ProgressProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgressProblem_output(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Output, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgressProblem_output(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgressProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(ent.Noder)
	fc.Result = res
	return ec.marshalONode2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_nodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Nodes(rctx, fc.Args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]ent.Noder)
	fc.Result = res
	return ec.marshalNNode2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNoder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findBazelInvocations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findBazelInvocations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindBazelInvocations(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["where"].(*ent.BazelInvocationWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocationConnection)
	fc.Result = res
	return ec.marshalNBazelInvocationConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findBazelInvocations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_BazelInvocationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_BazelInvocationConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_BazelInvocationConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findBazelInvocations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findBuilds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findBuilds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindBuilds(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["where"].(*ent.BuildWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.BuildConnection)
	fc.Result = res
	return ec.marshalNBuildConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findBuilds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_BuildConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_BuildConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_BuildConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BuildConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findBuilds_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_findMetrics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_findMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindMetrics(rctx, fc.Args["after"].(*entgql.Cursor[int]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[int]), fc.Args["last"].(*int), fc.Args["where"].(*ent.MetricsWhereInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.MetricsConnection)
	fc.Result = res
	return ec.marshalNMetricsConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_findMetrics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_MetricsConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MetricsConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_MetricsConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricsConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_findMetrics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_bazelInvocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_bazelInvocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BazelInvocation(rctx, fc.Args["invocationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.BazelInvocation)
	fc.Result = res
	return ec.marshalNBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_bazelInvocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BazelInvocation_id(ctx, field)
			case "invocationID":
				return ec.fieldContext_BazelInvocation_invocationID(ctx, field)
			case "startedAt":
				return ec.fieldContext_BazelInvocation_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_BazelInvocation_endedAt(ctx, field)
			case "changeNumber":
				return ec.fieldContext_BazelInvocation_changeNumber(ctx, field)
			case "patchsetNumber":
				return ec.fieldContext_BazelInvocation_patchsetNumber(ctx, field)
			case "bepCompleted":
				return ec.fieldContext_BazelInvocation_bepCompleted(ctx, field)
			case "stepLabel":
				return ec.fieldContext_BazelInvocation_stepLabel(ctx, field)
			case "userEmail":
				return ec.fieldContext_BazelInvocation_userEmail(ctx, field)
			case "userLdap":
				return ec.fieldContext_BazelInvocation_userLdap(ctx, field)
			case "buildLogs":
				return ec.fieldContext_BazelInvocation_buildLogs(ctx, field)
			case "eventFile":
				return ec.fieldContext_BazelInvocation_eventFile(ctx, field)
			case "build":
				return ec.fieldContext_BazelInvocation_build(ctx, field)
			case "metrics":
				return ec.fieldContext_BazelInvocation_metrics(ctx, field)
			case "bazelCommand":
				return ec.fieldContext_BazelInvocation_bazelCommand(ctx, field)
			case "state":
				return ec.fieldContext_BazelInvocation_state(ctx, field)
			case "user":
				return ec.fieldContext_BazelInvocation_user(ctx, field)
			case "relatedFiles":
				return ec.fieldContext_BazelInvocation_relatedFiles(ctx, field)
			case "problems":
				return ec.fieldContext_BazelInvocation_problems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BazelInvocation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_bazelInvocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBuild(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getBuild(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBuild(rctx, fc.Args["buildURL"].(*string), fc.Args["buildUUID"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Build)
	fc.Result = res
	return ec.marshalOBuild2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuild(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getBuild(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Build_id(ctx, field)
			case "buildURL":
				return ec.fieldContext_Build_buildURL(ctx, field)
			case "buildUUID":
				return ec.fieldContext_Build_buildUUID(ctx, field)
			case "invocations":
				return ec.fieldContext_Build_invocations(ctx, field)
			case "env":
				return ec.fieldContext_Build_env(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Build", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getBuild_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RaceStatistics_id(ctx context.Context, field graphql.CollectedField, obj *ent.RaceStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RaceStatistics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RaceStatistics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RaceStatistics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RaceStatistics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RaceStatistics_mnemonic(ctx context.Context, field graphql.CollectedField, obj *ent.RaceStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RaceStatistics_mnemonic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mnemonic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RaceStatistics_mnemonic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RaceStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RaceStatistics_localRunner(ctx context.Context, field graphql.CollectedField, obj *ent.RaceStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RaceStatistics_localRunner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocalRunner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RaceStatistics_localRunner(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RaceStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RaceStatistics_remoteRunner(ctx context.Context, field graphql.CollectedField, obj *ent.RaceStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RaceStatistics_remoteRunner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoteRunner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RaceStatistics_remoteRunner(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RaceStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RaceStatistics_localWins(ctx context.Context, field graphql.CollectedField, obj *ent.RaceStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RaceStatistics_localWins(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocalWins, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	fc.Result = res
	return ec.marshalOInt2int32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RaceStatistics_localWins(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RaceStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RaceStatistics_renoteWins(ctx context.Context, field graphql.CollectedField, obj *ent.RaceStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RaceStatistics_renoteWins(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenoteWins, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RaceStatistics_renoteWins(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RaceStatistics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RaceStatistics_dynamicExecutionMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.RaceStatistics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RaceStatistics_dynamicExecutionMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DynamicExecutionMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.DynamicExecutionMetrics)
	fc.Result = res
	return ec.marshalODynamicExecutionMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RaceStatistics_dynamicExecutionMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RaceStatistics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DynamicExecutionMetrics_id(ctx, field)
			case "metrics":
				return ec.fieldContext_DynamicExecutionMetrics_metrics(ctx, field)
			case "raceStatistics":
				return ec.fieldContext_DynamicExecutionMetrics_raceStatistics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DynamicExecutionMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCount_id(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCount_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RunnerCount().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCount_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCount",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCount_name(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCount_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCount_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCount_execKind(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCount_execKind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExecKind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCount_execKind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCount_actionsExecuted(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCount_actionsExecuted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsExecuted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCount_actionsExecuted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RunnerCount_actionSummary(ctx context.Context, field graphql.CollectedField, obj *ent.RunnerCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RunnerCount_actionSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionSummary(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ActionSummary)
	fc.Result = res
	return ec.marshalOActionSummary2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RunnerCount_actionSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RunnerCount",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionSummary_id(ctx, field)
			case "actionsCreated":
				return ec.fieldContext_ActionSummary_actionsCreated(ctx, field)
			case "actionsCreatedNotIncludingAspects":
				return ec.fieldContext_ActionSummary_actionsCreatedNotIncludingAspects(ctx, field)
			case "actionsExecuted":
				return ec.fieldContext_ActionSummary_actionsExecuted(ctx, field)
			case "remoteCacheHits":
				return ec.fieldContext_ActionSummary_remoteCacheHits(ctx, field)
			case "actionData":
				return ec.fieldContext_ActionSummary_actionData(ctx, field)
			case "runnerCount":
				return ec.fieldContext_ActionSummary_runnerCount(ctx, field)
			case "actionCacheStatistics":
				return ec.fieldContext_ActionSummary_actionCacheStatistics(ctx, field)
			case "metrics":
				return ec.fieldContext_ActionSummary_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_id(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemNetworkStats().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_bytesSent(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_bytesSent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BytesSent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_bytesSent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_bytesRecv(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_bytesRecv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BytesRecv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_bytesRecv(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_packetsSent(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_packetsSent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PacketsSent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_packetsSent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_packetsRecv(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_packetsRecv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PacketsRecv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_packetsRecv(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_peakBytesSentPerSec(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_peakBytesSentPerSec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakBytesSentPerSec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_peakBytesSentPerSec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_peakBytesRecvPerSec(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_peakBytesRecvPerSec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakBytesRecvPerSec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_peakBytesRecvPerSec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_peakPacketsSentPerSec(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_peakPacketsSentPerSec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakPacketsSentPerSec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_peakPacketsSentPerSec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_peakPacketsRecvPerSec(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_peakPacketsRecvPerSec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakPacketsRecvPerSec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_peakPacketsRecvPerSec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemNetworkStats_networkMetrics(ctx context.Context, field graphql.CollectedField, obj *ent.SystemNetworkStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemNetworkStats_networkMetrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetworkMetrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.NetworkMetrics)
	fc.Result = res
	return ec.marshalONetworkMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemNetworkStats_networkMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemNetworkStats",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NetworkMetrics_id(ctx, field)
			case "metrics":
				return ec.fieldContext_NetworkMetrics_metrics(ctx, field)
			case "systemNetworkStats":
				return ec.fieldContext_NetworkMetrics_systemNetworkStats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NetworkMetrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.TargetMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TargetMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetMetrics_targetsLoaded(ctx context.Context, field graphql.CollectedField, obj *ent.TargetMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetMetrics_targetsLoaded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetsLoaded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetMetrics_targetsLoaded(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetMetrics_targetsConfigured(ctx context.Context, field graphql.CollectedField, obj *ent.TargetMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetMetrics_targetsConfigured(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetsConfigured, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetMetrics_targetsConfigured(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetMetrics_targetsConfiguredNotIncludingAspects(ctx context.Context, field graphql.CollectedField, obj *ent.TargetMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetMetrics_targetsConfiguredNotIncludingAspects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetsConfiguredNotIncludingAspects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetMetrics_targetsConfiguredNotIncludingAspects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.TargetMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetProblem_id(ctx context.Context, field graphql.CollectedField, obj *model.TargetProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetProblem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetProblem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TargetProblem_label(ctx context.Context, field graphql.CollectedField, obj *model.TargetProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TargetProblem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TargetProblem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TargetProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestProblem_id(ctx context.Context, field graphql.CollectedField, obj *model.TestProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestProblem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestProblem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestProblem_label(ctx context.Context, field graphql.CollectedField, obj *model.TestProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestProblem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestProblem_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestProblem_status(ctx context.Context, field graphql.CollectedField, obj *model.TestProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestProblem_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestProblem_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestProblem_results(ctx context.Context, field graphql.CollectedField, obj *model.TestProblem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestProblem_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TestResult)
	fc.Result = res
	return ec.marshalNTestResult2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestResultᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestProblem_results(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestProblem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TestResult_id(ctx, field)
			case "run":
				return ec.fieldContext_TestResult_run(ctx, field)
			case "shard":
				return ec.fieldContext_TestResult_shard(ctx, field)
			case "attempt":
				return ec.fieldContext_TestResult_attempt(ctx, field)
			case "status":
				return ec.fieldContext_TestResult_status(ctx, field)
			case "actionLogOutput":
				return ec.fieldContext_TestResult_actionLogOutput(ctx, field)
			case "undeclaredTestOutputs":
				return ec.fieldContext_TestResult_undeclaredTestOutputs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TestResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_id(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_run(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_run(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Run, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_run(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_shard(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_shard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_shard(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_attempt(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_attempt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attempt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_attempt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_status(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_actionLogOutput(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_actionLogOutput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestResult().ActionLogOutput(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BlobReference)
	fc.Result = res
	return ec.marshalNBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_actionLogOutput(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_BlobReference_name(ctx, field)
			case "downloadURL":
				return ec.fieldContext_BlobReference_downloadURL(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_BlobReference_sizeInBytes(ctx, field)
			case "availabilityStatus":
				return ec.fieldContext_BlobReference_availabilityStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlobReference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TestResult_undeclaredTestOutputs(ctx context.Context, field graphql.CollectedField, obj *model.TestResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TestResult_undeclaredTestOutputs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TestResult().UndeclaredTestOutputs(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlobReference)
	fc.Result = res
	return ec.marshalOBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TestResult_undeclaredTestOutputs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TestResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_BlobReference_name(ctx, field)
			case "downloadURL":
				return ec.fieldContext_BlobReference_downloadURL(ctx, field)
			case "sizeInBytes":
				return ec.fieldContext_BlobReference_sizeInBytes(ctx, field)
			case "availabilityStatus":
				return ec.fieldContext_BlobReference_availabilityStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlobReference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_id(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TimingMetrics().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_cpuTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_cpuTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CPUTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_cpuTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_wallTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_wallTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WallTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_wallTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_analysisPhaseTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_analysisPhaseTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnalysisPhaseTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_analysisPhaseTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_executionPhaseTimeInMs(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_executionPhaseTimeInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExecutionPhaseTimeInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_executionPhaseTimeInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_actionsExecutionStartInMs(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_actionsExecutionStartInMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionsExecutionStartInMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_actionsExecutionStartInMs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimingMetrics_metrics(ctx context.Context, field graphql.CollectedField, obj *ent.TimingMetrics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimingMetrics_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Metrics)
	fc.Result = res
	return ec.marshalOMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimingMetrics_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimingMetrics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metrics_id(ctx, field)
			case "bazelInvocation":
				return ec.fieldContext_Metrics_bazelInvocation(ctx, field)
			case "actionSummary":
				return ec.fieldContext_Metrics_actionSummary(ctx, field)
			case "memoryMetrics":
				return ec.fieldContext_Metrics_memoryMetrics(ctx, field)
			case "targetMetrics":
				return ec.fieldContext_Metrics_targetMetrics(ctx, field)
			case "packageMetrics":
				return ec.fieldContext_Metrics_packageMetrics(ctx, field)
			case "timingMetrics":
				return ec.fieldContext_Metrics_timingMetrics(ctx, field)
			case "cumulativeMetrics":
				return ec.fieldContext_Metrics_cumulativeMetrics(ctx, field)
			case "artifactMetrics":
				return ec.fieldContext_Metrics_artifactMetrics(ctx, field)
			case "networkMetrics":
				return ec.fieldContext_Metrics_networkMetrics(ctx, field)
			case "dynamicExecutionMetrics":
				return ec.fieldContext_Metrics_dynamicExecutionMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metrics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_Email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_Email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_Email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_LDAP(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_LDAP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ldap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_LDAP(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputActionCacheStatisticsWhereInput(ctx context.Context, obj interface{}) (ent.ActionCacheStatisticsWhereInput, error) {
	var it ent.ActionCacheStatisticsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "sizeInBytes", "sizeInBytesNEQ", "sizeInBytesIn", "sizeInBytesNotIn", "sizeInBytesGT", "sizeInBytesGTE", "sizeInBytesLT", "sizeInBytesLTE", "sizeInBytesIsNil", "sizeInBytesNotNil", "saveTimeInMs", "saveTimeInMsNEQ", "saveTimeInMsIn", "saveTimeInMsNotIn", "saveTimeInMsGT", "saveTimeInMsGTE", "saveTimeInMsLT", "saveTimeInMsLTE", "saveTimeInMsIsNil", "saveTimeInMsNotNil", "loadTimeInMs", "loadTimeInMsNEQ", "loadTimeInMsIn", "loadTimeInMsNotIn", "loadTimeInMsGT", "loadTimeInMsGTE", "loadTimeInMsLT", "loadTimeInMsLTE", "loadTimeInMsIsNil", "loadTimeInMsNotNil", "hits", "hitsNEQ", "hitsIn", "hitsNotIn", "hitsGT", "hitsGTE", "hitsLT", "hitsLTE", "hitsIsNil", "hitsNotNil", "misses", "missesNEQ", "missesIn", "missesNotIn", "missesGT", "missesGTE", "missesLT", "missesLTE", "missesIsNil", "missesNotNil", "hasMissDetails", "hasMissDetailsWith", "hasActionSummary", "hasActionSummaryWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOActionCacheStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOActionCacheStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOActionCacheStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionCacheStatisticsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "sizeInBytes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytes"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytes = data
		case "sizeInBytesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesNEQ = data
		case "sizeInBytesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesIn = data
		case "sizeInBytesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesNotIn = data
		case "sizeInBytesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesGT = data
		case "sizeInBytesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesGTE = data
		case "sizeInBytesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesLT = data
		case "sizeInBytesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesLTE = data
		case "sizeInBytesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesIsNil = data
		case "sizeInBytesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesNotNil = data
		case "saveTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMs = data
		case "saveTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsNEQ = data
		case "saveTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsIn = data
		case "saveTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsNotIn = data
		case "saveTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsGT = data
		case "saveTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsGTE = data
		case "saveTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsLT = data
		case "saveTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsLTE = data
		case "saveTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsIsNil = data
		case "saveTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SaveTimeInMsNotNil = data
		case "loadTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMs = data
		case "loadTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsNEQ = data
		case "loadTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsIn = data
		case "loadTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsNotIn = data
		case "loadTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsGT = data
		case "loadTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsGTE = data
		case "loadTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsLT = data
		case "loadTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsLTE = data
		case "loadTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsIsNil = data
		case "loadTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadTimeInMsNotNil = data
		case "hits":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hits"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hits = data
		case "hitsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsNEQ = data
		case "hitsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsIn = data
		case "hitsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsNotIn = data
		case "hitsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsGT = data
		case "hitsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsGTE = data
		case "hitsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsLT = data
		case "hitsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsLTE = data
		case "hitsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsIsNil = data
		case "hitsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hitsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HitsNotNil = data
		case "misses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("misses"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Misses = data
		case "missesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesNEQ = data
		case "missesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesIn = data
		case "missesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesNotIn = data
		case "missesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesGT = data
		case "missesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesGTE = data
		case "missesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesLT = data
		case "missesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesLTE = data
		case "missesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesIsNil = data
		case "missesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("missesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MissesNotNil = data
		case "hasMissDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMissDetails"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMissDetails = data
		case "hasMissDetailsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMissDetailsWith"))
			data, err := ec.unmarshalOMissDetailWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMissDetailsWith = data
		case "hasActionSummary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummary = data
		case "hasActionSummaryWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummaryWith"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummaryWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputActionDataWhereInput(ctx context.Context, obj interface{}) (ent.ActionDataWhereInput, error) {
	var it ent.ActionDataWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "mnemonic", "mnemonicNEQ", "mnemonicIn", "mnemonicNotIn", "mnemonicGT", "mnemonicGTE", "mnemonicLT", "mnemonicLTE", "mnemonicContains", "mnemonicHasPrefix", "mnemonicHasSuffix", "mnemonicIsNil", "mnemonicNotNil", "mnemonicEqualFold", "mnemonicContainsFold", "actionsExecuted", "actionsExecutedNEQ", "actionsExecutedIn", "actionsExecutedNotIn", "actionsExecutedGT", "actionsExecutedGTE", "actionsExecutedLT", "actionsExecutedLTE", "actionsExecutedIsNil", "actionsExecutedNotNil", "actionsCreated", "actionsCreatedNEQ", "actionsCreatedIn", "actionsCreatedNotIn", "actionsCreatedGT", "actionsCreatedGTE", "actionsCreatedLT", "actionsCreatedLTE", "actionsCreatedIsNil", "actionsCreatedNotNil", "firstStartedMs", "firstStartedMsNEQ", "firstStartedMsIn", "firstStartedMsNotIn", "firstStartedMsGT", "firstStartedMsGTE", "firstStartedMsLT", "firstStartedMsLTE", "firstStartedMsIsNil", "firstStartedMsNotNil", "lastEndedMs", "lastEndedMsNEQ", "lastEndedMsIn", "lastEndedMsNotIn", "lastEndedMsGT", "lastEndedMsGTE", "lastEndedMsLT", "lastEndedMsLTE", "lastEndedMsIsNil", "lastEndedMsNotNil", "systemTime", "systemTimeNEQ", "systemTimeIn", "systemTimeNotIn", "systemTimeGT", "systemTimeGTE", "systemTimeLT", "systemTimeLTE", "systemTimeIsNil", "systemTimeNotNil", "userTime", "userTimeNEQ", "userTimeIn", "userTimeNotIn", "userTimeGT", "userTimeGTE", "userTimeLT", "userTimeLTE", "userTimeIsNil", "userTimeNotNil", "hasActionSummary", "hasActionSummaryWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOActionDataWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOActionDataWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOActionDataWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "mnemonic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonic"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mnemonic = data
		case "mnemonicNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicNEQ = data
		case "mnemonicIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicIn = data
		case "mnemonicNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicNotIn = data
		case "mnemonicGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicGT = data
		case "mnemonicGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicGTE = data
		case "mnemonicLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicLT = data
		case "mnemonicLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicLTE = data
		case "mnemonicContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicContains = data
		case "mnemonicHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicHasPrefix = data
		case "mnemonicHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicHasSuffix = data
		case "mnemonicIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicIsNil = data
		case "mnemonicNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicNotNil = data
		case "mnemonicEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicEqualFold = data
		case "mnemonicContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicContainsFold = data
		case "actionsExecuted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecuted"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecuted = data
		case "actionsExecutedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNEQ = data
		case "actionsExecutedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIn = data
		case "actionsExecutedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotIn = data
		case "actionsExecutedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGT = data
		case "actionsExecutedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGTE = data
		case "actionsExecutedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLT = data
		case "actionsExecutedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLTE = data
		case "actionsExecutedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIsNil = data
		case "actionsExecutedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotNil = data
		case "actionsCreated":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreated"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreated = data
		case "actionsCreatedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNEQ = data
		case "actionsCreatedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedIn = data
		case "actionsCreatedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIn = data
		case "actionsCreatedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedGT = data
		case "actionsCreatedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedGTE = data
		case "actionsCreatedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedLT = data
		case "actionsCreatedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedLTE = data
		case "actionsCreatedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedIsNil = data
		case "actionsCreatedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotNil = data
		case "firstStartedMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMs = data
		case "firstStartedMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsNEQ = data
		case "firstStartedMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsIn = data
		case "firstStartedMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsNotIn = data
		case "firstStartedMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsGT = data
		case "firstStartedMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsGTE = data
		case "firstStartedMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsLT = data
		case "firstStartedMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsLTE = data
		case "firstStartedMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsIsNil = data
		case "firstStartedMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstStartedMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstStartedMsNotNil = data
		case "lastEndedMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMs = data
		case "lastEndedMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsNEQ = data
		case "lastEndedMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsIn = data
		case "lastEndedMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsNotIn = data
		case "lastEndedMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsGT = data
		case "lastEndedMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsGTE = data
		case "lastEndedMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsLT = data
		case "lastEndedMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsLTE = data
		case "lastEndedMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsIsNil = data
		case "lastEndedMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastEndedMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastEndedMsNotNil = data
		case "systemTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTime"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().SystemTime(ctx, &it, data); err != nil {
				return it, err
			}
		case "systemTimeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().SystemTimeNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "systemTimeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().SystemTimeIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "systemTimeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().SystemTimeNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "systemTimeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().SystemTimeGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "systemTimeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().SystemTimeGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "systemTimeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().SystemTimeLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "systemTimeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().SystemTimeLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "systemTimeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTimeIsNil = data
		case "systemTimeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemTimeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemTimeNotNil = data
		case "userTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTime"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().UserTime(ctx, &it, data); err != nil {
				return it, err
			}
		case "userTimeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().UserTimeNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "userTimeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().UserTimeIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "userTimeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().UserTimeNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "userTimeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().UserTimeGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "userTimeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().UserTimeGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "userTimeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().UserTimeLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "userTimeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionDataWhereInput().UserTimeLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "userTimeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTimeIsNil = data
		case "userTimeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userTimeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserTimeNotNil = data
		case "hasActionSummary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummary = data
		case "hasActionSummaryWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummaryWith"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummaryWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputActionSummaryWhereInput(ctx context.Context, obj interface{}) (ent.ActionSummaryWhereInput, error) {
	var it ent.ActionSummaryWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "actionsCreated", "actionsCreatedNEQ", "actionsCreatedIn", "actionsCreatedNotIn", "actionsCreatedGT", "actionsCreatedGTE", "actionsCreatedLT", "actionsCreatedLTE", "actionsCreatedIsNil", "actionsCreatedNotNil", "actionsCreatedNotIncludingAspects", "actionsCreatedNotIncludingAspectsNEQ", "actionsCreatedNotIncludingAspectsIn", "actionsCreatedNotIncludingAspectsNotIn", "actionsCreatedNotIncludingAspectsGT", "actionsCreatedNotIncludingAspectsGTE", "actionsCreatedNotIncludingAspectsLT", "actionsCreatedNotIncludingAspectsLTE", "actionsCreatedNotIncludingAspectsIsNil", "actionsCreatedNotIncludingAspectsNotNil", "actionsExecuted", "actionsExecutedNEQ", "actionsExecutedIn", "actionsExecutedNotIn", "actionsExecutedGT", "actionsExecutedGTE", "actionsExecutedLT", "actionsExecutedLTE", "actionsExecutedIsNil", "actionsExecutedNotNil", "remoteCacheHits", "remoteCacheHitsNEQ", "remoteCacheHitsIn", "remoteCacheHitsNotIn", "remoteCacheHitsGT", "remoteCacheHitsGTE", "remoteCacheHitsLT", "remoteCacheHitsLTE", "remoteCacheHitsIsNil", "remoteCacheHitsNotNil", "hasActionData", "hasActionDataWith", "hasRunnerCount", "hasRunnerCountWith", "hasActionCacheStatistics", "hasActionCacheStatisticsWith", "hasMetrics", "hasMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ActionSummaryWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "actionsCreated":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreated"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreated = data
		case "actionsCreatedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNEQ = data
		case "actionsCreatedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedIn = data
		case "actionsCreatedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIn = data
		case "actionsCreatedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedGT = data
		case "actionsCreatedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedGTE = data
		case "actionsCreatedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedLT = data
		case "actionsCreatedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedLTE = data
		case "actionsCreatedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedIsNil = data
		case "actionsCreatedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotNil = data
		case "actionsCreatedNotIncludingAspects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspects"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspects = data
		case "actionsCreatedNotIncludingAspectsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsNEQ = data
		case "actionsCreatedNotIncludingAspectsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsIn = data
		case "actionsCreatedNotIncludingAspectsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsNotIn = data
		case "actionsCreatedNotIncludingAspectsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsGT = data
		case "actionsCreatedNotIncludingAspectsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsGTE = data
		case "actionsCreatedNotIncludingAspectsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsLT = data
		case "actionsCreatedNotIncludingAspectsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsLTE = data
		case "actionsCreatedNotIncludingAspectsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsIsNil = data
		case "actionsCreatedNotIncludingAspectsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsCreatedNotIncludingAspectsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsCreatedNotIncludingAspectsNotNil = data
		case "actionsExecuted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecuted"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecuted = data
		case "actionsExecutedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNEQ = data
		case "actionsExecutedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIn = data
		case "actionsExecutedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotIn = data
		case "actionsExecutedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGT = data
		case "actionsExecutedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGTE = data
		case "actionsExecutedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLT = data
		case "actionsExecutedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLTE = data
		case "actionsExecutedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIsNil = data
		case "actionsExecutedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotNil = data
		case "remoteCacheHits":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHits"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHits = data
		case "remoteCacheHitsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsNEQ = data
		case "remoteCacheHitsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsIn = data
		case "remoteCacheHitsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsNotIn = data
		case "remoteCacheHitsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsGT = data
		case "remoteCacheHitsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsGTE = data
		case "remoteCacheHitsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsLT = data
		case "remoteCacheHitsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsLTE = data
		case "remoteCacheHitsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsIsNil = data
		case "remoteCacheHitsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteCacheHitsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteCacheHitsNotNil = data
		case "hasActionData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionData"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionData = data
		case "hasActionDataWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionDataWith"))
			data, err := ec.unmarshalOActionDataWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionDataWith = data
		case "hasRunnerCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRunnerCount"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRunnerCount = data
		case "hasRunnerCountWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRunnerCountWith"))
			data, err := ec.unmarshalORunnerCountWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRunnerCountWith = data
		case "hasActionCacheStatistics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionCacheStatistics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionCacheStatistics = data
		case "hasActionCacheStatisticsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionCacheStatisticsWith"))
			data, err := ec.unmarshalOActionCacheStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionCacheStatisticsWith = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputArtifactMetricsWhereInput(ctx context.Context, obj interface{}) (ent.ArtifactMetricsWhereInput, error) {
	var it ent.ArtifactMetricsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "hasMetrics", "hasMetricsWith", "hasSourceArtifactsRead", "hasSourceArtifactsReadWith", "hasOutputArtifactsSeen", "hasOutputArtifactsSeenWith", "hasOutputArtifactsFromActionCache", "hasOutputArtifactsFromActionCacheWith", "hasTopLevelArtifacts", "hasTopLevelArtifactsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOArtifactMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOArtifactMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOArtifactMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.ArtifactMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		case "hasSourceArtifactsRead":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSourceArtifactsRead"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSourceArtifactsRead = data
		case "hasSourceArtifactsReadWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSourceArtifactsReadWith"))
			data, err := ec.unmarshalOFilesMetricWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSourceArtifactsReadWith = data
		case "hasOutputArtifactsSeen":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOutputArtifactsSeen"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasOutputArtifactsSeen = data
		case "hasOutputArtifactsSeenWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOutputArtifactsSeenWith"))
			data, err := ec.unmarshalOFilesMetricWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasOutputArtifactsSeenWith = data
		case "hasOutputArtifactsFromActionCache":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOutputArtifactsFromActionCache"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasOutputArtifactsFromActionCache = data
		case "hasOutputArtifactsFromActionCacheWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasOutputArtifactsFromActionCacheWith"))
			data, err := ec.unmarshalOFilesMetricWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasOutputArtifactsFromActionCacheWith = data
		case "hasTopLevelArtifacts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTopLevelArtifacts"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTopLevelArtifacts = data
		case "hasTopLevelArtifactsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTopLevelArtifactsWith"))
			data, err := ec.unmarshalOFilesMetricWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTopLevelArtifactsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBazelInvocationProblemWhereInput(ctx context.Context, obj interface{}) (ent.BazelInvocationProblemWhereInput, error) {
	var it ent.BazelInvocationProblemWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "problemType", "problemTypeNEQ", "problemTypeIn", "problemTypeNotIn", "problemTypeGT", "problemTypeGTE", "problemTypeLT", "problemTypeLTE", "problemTypeContains", "problemTypeHasPrefix", "problemTypeHasSuffix", "problemTypeEqualFold", "problemTypeContainsFold", "label", "labelNEQ", "labelIn", "labelNotIn", "labelGT", "labelGTE", "labelLT", "labelLTE", "labelContains", "labelHasPrefix", "labelHasSuffix", "labelEqualFold", "labelContainsFold", "hasBazelInvocation", "hasBazelInvocationWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOBazelInvocationProblemWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOBazelInvocationProblemWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOBazelInvocationProblemWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationProblemWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "problemType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemType = data
		case "problemTypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeNEQ = data
		case "problemTypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeIn = data
		case "problemTypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeNotIn = data
		case "problemTypeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeGT = data
		case "problemTypeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeGTE = data
		case "problemTypeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeLT = data
		case "problemTypeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeLTE = data
		case "problemTypeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeContains = data
		case "problemTypeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeHasPrefix = data
		case "problemTypeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeHasSuffix = data
		case "problemTypeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeEqualFold = data
		case "problemTypeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("problemTypeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProblemTypeContainsFold = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "labelNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNEQ = data
		case "labelIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelIn = data
		case "labelNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelNotIn = data
		case "labelGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGT = data
		case "labelGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelGTE = data
		case "labelLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLT = data
		case "labelLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelLTE = data
		case "labelContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContains = data
		case "labelHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasPrefix = data
		case "labelHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelHasSuffix = data
		case "labelEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelEqualFold = data
		case "labelContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labelContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LabelContainsFold = data
		case "hasBazelInvocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocation"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocation = data
		case "hasBazelInvocationWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocationWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocationWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBazelInvocationWhereInput(ctx context.Context, obj interface{}) (ent.BazelInvocationWhereInput, error) {
	var it ent.BazelInvocationWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "invocationID", "invocationIDNEQ", "invocationIDIn", "invocationIDNotIn", "invocationIDGT", "invocationIDGTE", "invocationIDLT", "invocationIDLTE", "startedAt", "startedAtNEQ", "startedAtIn", "startedAtNotIn", "startedAtGT", "startedAtGTE", "startedAtLT", "startedAtLTE", "endedAt", "endedAtNEQ", "endedAtIn", "endedAtNotIn", "endedAtGT", "endedAtGTE", "endedAtLT", "endedAtLTE", "endedAtIsNil", "endedAtNotNil", "changeNumber", "changeNumberNEQ", "changeNumberIn", "changeNumberNotIn", "changeNumberGT", "changeNumberGTE", "changeNumberLT", "changeNumberLTE", "changeNumberIsNil", "changeNumberNotNil", "patchsetNumber", "patchsetNumberNEQ", "patchsetNumberIn", "patchsetNumberNotIn", "patchsetNumberGT", "patchsetNumberGTE", "patchsetNumberLT", "patchsetNumberLTE", "patchsetNumberIsNil", "patchsetNumberNotNil", "bepCompleted", "bepCompletedNEQ", "bepCompletedIsNil", "bepCompletedNotNil", "stepLabel", "stepLabelNEQ", "stepLabelIn", "stepLabelNotIn", "stepLabelGT", "stepLabelGTE", "stepLabelLT", "stepLabelLTE", "stepLabelContains", "stepLabelHasPrefix", "stepLabelHasSuffix", "stepLabelEqualFold", "stepLabelContainsFold", "userEmail", "userEmailNEQ", "userEmailIn", "userEmailNotIn", "userEmailGT", "userEmailGTE", "userEmailLT", "userEmailLTE", "userEmailContains", "userEmailHasPrefix", "userEmailHasSuffix", "userEmailIsNil", "userEmailNotNil", "userEmailEqualFold", "userEmailContainsFold", "userLdap", "userLdapNEQ", "userLdapIn", "userLdapNotIn", "userLdapGT", "userLdapGTE", "userLdapLT", "userLdapLTE", "userLdapContains", "userLdapHasPrefix", "userLdapHasSuffix", "userLdapIsNil", "userLdapNotNil", "userLdapEqualFold", "userLdapContainsFold", "buildLogs", "buildLogsNEQ", "buildLogsIn", "buildLogsNotIn", "buildLogsGT", "buildLogsGTE", "buildLogsLT", "buildLogsLTE", "buildLogsContains", "buildLogsHasPrefix", "buildLogsHasSuffix", "buildLogsIsNil", "buildLogsNotNil", "buildLogsEqualFold", "buildLogsContainsFold", "hasEventFile", "hasEventFileWith", "hasBuild", "hasBuildWith", "hasMetrics", "hasMetricsWith", "hasProblems", "hasProblemsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BazelInvocationWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "invocationID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationID"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationID = data
		case "invocationIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDNEQ"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDNEQ = data
		case "invocationIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDIn"))
			data, err := ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDIn = data
		case "invocationIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDNotIn"))
			data, err := ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDNotIn = data
		case "invocationIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDGT"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDGT = data
		case "invocationIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDGTE"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDGTE = data
		case "invocationIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDLT"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDLT = data
		case "invocationIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invocationIDLTE"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvocationIDLTE = data
		case "startedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAt = data
		case "startedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtNEQ = data
		case "startedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtIn = data
		case "startedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtNotIn = data
		case "startedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtGT = data
		case "startedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtGTE = data
		case "startedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtLT = data
		case "startedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAtLTE = data
		case "endedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAt = data
		case "endedAtNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtNEQ = data
		case "endedAtIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtIn = data
		case "endedAtNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtNotIn = data
		case "endedAtGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtGT = data
		case "endedAtGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtGTE = data
		case "endedAtLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtLT = data
		case "endedAtLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtLTE = data
		case "endedAtIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtIsNil = data
		case "endedAtNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAtNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAtNotNil = data
		case "changeNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumber"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumber = data
		case "changeNumberNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberNEQ = data
		case "changeNumberIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberIn = data
		case "changeNumberNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberNotIn = data
		case "changeNumberGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberGT = data
		case "changeNumberGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberGTE = data
		case "changeNumberLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberLT = data
		case "changeNumberLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberLTE = data
		case "changeNumberIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberIsNil = data
		case "changeNumberNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changeNumberNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberNotNil = data
		case "patchsetNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumber"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumber = data
		case "patchsetNumberNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberNEQ = data
		case "patchsetNumberIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberIn = data
		case "patchsetNumberNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberNotIn = data
		case "patchsetNumberGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberGT = data
		case "patchsetNumberGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberGTE = data
		case "patchsetNumberLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberLT = data
		case "patchsetNumberLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberLTE = data
		case "patchsetNumberIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberIsNil = data
		case "patchsetNumberNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patchsetNumberNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatchsetNumberNotNil = data
		case "bepCompleted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bepCompleted"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BepCompleted = data
		case "bepCompletedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bepCompletedNEQ"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BepCompletedNEQ = data
		case "bepCompletedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bepCompletedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BepCompletedIsNil = data
		case "bepCompletedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bepCompletedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BepCompletedNotNil = data
		case "stepLabel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabel"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabel = data
		case "stepLabelNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelNEQ = data
		case "stepLabelIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelIn = data
		case "stepLabelNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelNotIn = data
		case "stepLabelGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelGT = data
		case "stepLabelGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelGTE = data
		case "stepLabelLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelLT = data
		case "stepLabelLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelLTE = data
		case "stepLabelContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelContains = data
		case "stepLabelHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelHasPrefix = data
		case "stepLabelHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelHasSuffix = data
		case "stepLabelEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelEqualFold = data
		case "stepLabelContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stepLabelContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StepLabelContainsFold = data
		case "userEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmail = data
		case "userEmailNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailNEQ = data
		case "userEmailIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailIn = data
		case "userEmailNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailNotIn = data
		case "userEmailGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailGT = data
		case "userEmailGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailGTE = data
		case "userEmailLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailLT = data
		case "userEmailLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailLTE = data
		case "userEmailContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailContains = data
		case "userEmailHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailHasPrefix = data
		case "userEmailHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailHasSuffix = data
		case "userEmailIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailIsNil = data
		case "userEmailNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailNotNil = data
		case "userEmailEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailEqualFold = data
		case "userEmailContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmailContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserEmailContainsFold = data
		case "userLdap":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdap"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdap = data
		case "userLdapNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapNEQ = data
		case "userLdapIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapIn = data
		case "userLdapNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapNotIn = data
		case "userLdapGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapGT = data
		case "userLdapGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapGTE = data
		case "userLdapLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapLT = data
		case "userLdapLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapLTE = data
		case "userLdapContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapContains = data
		case "userLdapHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapHasPrefix = data
		case "userLdapHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapHasSuffix = data
		case "userLdapIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapIsNil = data
		case "userLdapNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapNotNil = data
		case "userLdapEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapEqualFold = data
		case "userLdapContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userLdapContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserLdapContainsFold = data
		case "buildLogs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogs"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogs = data
		case "buildLogsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsNEQ = data
		case "buildLogsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsIn = data
		case "buildLogsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsNotIn = data
		case "buildLogsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsGT = data
		case "buildLogsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsGTE = data
		case "buildLogsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsLT = data
		case "buildLogsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsLTE = data
		case "buildLogsContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsContains = data
		case "buildLogsHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsHasPrefix = data
		case "buildLogsHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsHasSuffix = data
		case "buildLogsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsIsNil = data
		case "buildLogsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsNotNil = data
		case "buildLogsEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsEqualFold = data
		case "buildLogsContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildLogsContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildLogsContainsFold = data
		case "hasEventFile":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEventFile"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEventFile = data
		case "hasEventFileWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasEventFileWith"))
			data, err := ec.unmarshalOEventFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEventFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasEventFileWith = data
		case "hasBuild":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBuild"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBuild = data
		case "hasBuildWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBuildWith"))
			data, err := ec.unmarshalOBuildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBuildWith = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		case "hasProblems":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProblems"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProblems = data
		case "hasProblemsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasProblemsWith"))
			data, err := ec.unmarshalOBazelInvocationProblemWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasProblemsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlobWhereInput(ctx context.Context, obj interface{}) (ent.BlobWhereInput, error) {
	var it ent.BlobWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "uri", "uriNEQ", "uriIn", "uriNotIn", "uriGT", "uriGTE", "uriLT", "uriLTE", "uriContains", "uriHasPrefix", "uriHasSuffix", "uriEqualFold", "uriContainsFold", "sizeBytes", "sizeBytesNEQ", "sizeBytesIn", "sizeBytesNotIn", "sizeBytesGT", "sizeBytesGTE", "sizeBytesLT", "sizeBytesLTE", "sizeBytesIsNil", "sizeBytesNotNil", "archivingStatus", "archivingStatusNEQ", "archivingStatusIn", "archivingStatusNotIn", "reason", "reasonNEQ", "reasonIn", "reasonNotIn", "reasonGT", "reasonGTE", "reasonLT", "reasonLTE", "reasonContains", "reasonHasPrefix", "reasonHasSuffix", "reasonIsNil", "reasonNotNil", "reasonEqualFold", "reasonContainsFold", "archiveURL", "archiveURLNEQ", "archiveURLIn", "archiveURLNotIn", "archiveURLGT", "archiveURLGTE", "archiveURLLT", "archiveURLLTE", "archiveURLContains", "archiveURLHasPrefix", "archiveURLHasSuffix", "archiveURLIsNil", "archiveURLNotNil", "archiveURLEqualFold", "archiveURLContainsFold"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOBlobWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOBlobWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOBlobWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BlobWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "uri":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uri"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URI = data
		case "uriNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URINEQ = data
		case "uriIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIIn = data
		case "uriNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URINotIn = data
		case "uriGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIGT = data
		case "uriGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIGTE = data
		case "uriLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URILT = data
		case "uriLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URILTE = data
		case "uriContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIContains = data
		case "uriHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIHasPrefix = data
		case "uriHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIHasSuffix = data
		case "uriEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIEqualFold = data
		case "uriContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uriContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URIContainsFold = data
		case "sizeBytes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytes"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytes = data
		case "sizeBytesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesNEQ = data
		case "sizeBytesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesIn = data
		case "sizeBytesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesNotIn = data
		case "sizeBytesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesGT = data
		case "sizeBytesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesGTE = data
		case "sizeBytesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesLT = data
		case "sizeBytesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesLTE = data
		case "sizeBytesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesIsNil = data
		case "sizeBytesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeBytesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeBytesNotNil = data
		case "archivingStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivingStatus"))
			data, err := ec.unmarshalOBlobArchivingStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchivingStatus = data
		case "archivingStatusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivingStatusNEQ"))
			data, err := ec.unmarshalOBlobArchivingStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchivingStatusNEQ = data
		case "archivingStatusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivingStatusIn"))
			data, err := ec.unmarshalOBlobArchivingStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchivingStatusIn = data
		case "archivingStatusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archivingStatusNotIn"))
			data, err := ec.unmarshalOBlobArchivingStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchivingStatusNotIn = data
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "reasonNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNEQ = data
		case "reasonIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonIn = data
		case "reasonNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNotIn = data
		case "reasonGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonGT = data
		case "reasonGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonGTE = data
		case "reasonLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonLT = data
		case "reasonLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonLTE = data
		case "reasonContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonContains = data
		case "reasonHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonHasPrefix = data
		case "reasonHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonHasSuffix = data
		case "reasonIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonIsNil = data
		case "reasonNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNotNil = data
		case "reasonEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonEqualFold = data
		case "reasonContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonContainsFold = data
		case "archiveURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURL = data
		case "archiveURLNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLNEQ = data
		case "archiveURLIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLIn = data
		case "archiveURLNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLNotIn = data
		case "archiveURLGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLGT = data
		case "archiveURLGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLGTE = data
		case "archiveURLLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLLT = data
		case "archiveURLLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLLTE = data
		case "archiveURLContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLContains = data
		case "archiveURLHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLHasPrefix = data
		case "archiveURLHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLHasSuffix = data
		case "archiveURLIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLIsNil = data
		case "archiveURLNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLNotNil = data
		case "archiveURLEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLEqualFold = data
		case "archiveURLContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveURLContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ArchiveURLContainsFold = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBuildWhereInput(ctx context.Context, obj interface{}) (ent.BuildWhereInput, error) {
	var it ent.BuildWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "buildURL", "buildURLNEQ", "buildURLIn", "buildURLNotIn", "buildURLGT", "buildURLGTE", "buildURLLT", "buildURLLTE", "buildURLContains", "buildURLHasPrefix", "buildURLHasSuffix", "buildURLEqualFold", "buildURLContainsFold", "buildUUID", "buildUUIDNEQ", "buildUUIDIn", "buildUUIDNotIn", "buildUUIDGT", "buildUUIDGTE", "buildUUIDLT", "buildUUIDLTE", "hasInvocations", "hasInvocationsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOBuildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOBuildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOBuildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.BuildWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "buildURL":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURL"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURL = data
		case "buildURLNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLNEQ = data
		case "buildURLIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLIn = data
		case "buildURLNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLNotIn = data
		case "buildURLGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLGT = data
		case "buildURLGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLGTE = data
		case "buildURLLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLLT = data
		case "buildURLLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLLTE = data
		case "buildURLContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLContains = data
		case "buildURLHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLHasPrefix = data
		case "buildURLHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLHasSuffix = data
		case "buildURLEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLEqualFold = data
		case "buildURLContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildURLContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildURLContainsFold = data
		case "buildUUID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUID"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUID = data
		case "buildUUIDNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDNEQ"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDNEQ = data
		case "buildUUIDIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDIn"))
			data, err := ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDIn = data
		case "buildUUIDNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDNotIn"))
			data, err := ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDNotIn = data
		case "buildUUIDGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDGT"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDGT = data
		case "buildUUIDGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDGTE"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDGTE = data
		case "buildUUIDLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDLT"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDLT = data
		case "buildUUIDLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildUUIDLTE"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.BuildUUIDLTE = data
		case "hasInvocations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInvocations"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInvocations = data
		case "hasInvocationsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasInvocationsWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasInvocationsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCumulativeMetricsWhereInput(ctx context.Context, obj interface{}) (ent.CumulativeMetricsWhereInput, error) {
	var it ent.CumulativeMetricsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "numAnalyses", "numAnalysesNEQ", "numAnalysesIn", "numAnalysesNotIn", "numAnalysesGT", "numAnalysesGTE", "numAnalysesLT", "numAnalysesLTE", "numAnalysesIsNil", "numAnalysesNotNil", "numBuilds", "numBuildsNEQ", "numBuildsIn", "numBuildsNotIn", "numBuildsGT", "numBuildsGTE", "numBuildsLT", "numBuildsLTE", "numBuildsIsNil", "numBuildsNotNil", "hasMetrics", "hasMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOCumulativeMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOCumulativeMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOCumulativeMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.CumulativeMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "numAnalyses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalyses"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalyses = data
		case "numAnalysesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesNEQ = data
		case "numAnalysesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesIn = data
		case "numAnalysesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesNotIn = data
		case "numAnalysesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesGT = data
		case "numAnalysesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesGTE = data
		case "numAnalysesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesLT = data
		case "numAnalysesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesLTE = data
		case "numAnalysesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesIsNil = data
		case "numAnalysesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numAnalysesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumAnalysesNotNil = data
		case "numBuilds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuilds"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuilds = data
		case "numBuildsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsNEQ = data
		case "numBuildsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsIn = data
		case "numBuildsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsNotIn = data
		case "numBuildsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsGT = data
		case "numBuildsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsGTE = data
		case "numBuildsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsLT = data
		case "numBuildsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsLTE = data
		case "numBuildsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsIsNil = data
		case "numBuildsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numBuildsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumBuildsNotNil = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicExecutionMetricsWhereInput(ctx context.Context, obj interface{}) (ent.DynamicExecutionMetricsWhereInput, error) {
	var it ent.DynamicExecutionMetricsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "hasMetrics", "hasMetricsWith", "hasRaceStatistics", "hasRaceStatisticsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalODynamicExecutionMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalODynamicExecutionMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalODynamicExecutionMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DynamicExecutionMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DynamicExecutionMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DynamicExecutionMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DynamicExecutionMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DynamicExecutionMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DynamicExecutionMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DynamicExecutionMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.DynamicExecutionMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		case "hasRaceStatistics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRaceStatistics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRaceStatistics = data
		case "hasRaceStatisticsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasRaceStatisticsWith"))
			data, err := ec.unmarshalORaceStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatisticsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasRaceStatisticsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventFileWhereInput(ctx context.Context, obj interface{}) (ent.EventFileWhereInput, error) {
	var it ent.EventFileWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "url", "urlNEQ", "urlIn", "urlNotIn", "urlGT", "urlGTE", "urlLT", "urlLTE", "urlContains", "urlHasPrefix", "urlHasSuffix", "urlEqualFold", "urlContainsFold", "modTime", "modTimeNEQ", "modTimeIn", "modTimeNotIn", "modTimeGT", "modTimeGTE", "modTimeLT", "modTimeLTE", "protocol", "protocolNEQ", "protocolIn", "protocolNotIn", "protocolGT", "protocolGTE", "protocolLT", "protocolLTE", "protocolContains", "protocolHasPrefix", "protocolHasSuffix", "protocolEqualFold", "protocolContainsFold", "mimeType", "mimeTypeNEQ", "mimeTypeIn", "mimeTypeNotIn", "mimeTypeGT", "mimeTypeGTE", "mimeTypeLT", "mimeTypeLTE", "mimeTypeContains", "mimeTypeHasPrefix", "mimeTypeHasSuffix", "mimeTypeEqualFold", "mimeTypeContainsFold", "status", "statusNEQ", "statusIn", "statusNotIn", "statusGT", "statusGTE", "statusLT", "statusLTE", "statusContains", "statusHasPrefix", "statusHasSuffix", "statusEqualFold", "statusContainsFold", "reason", "reasonNEQ", "reasonIn", "reasonNotIn", "reasonGT", "reasonGTE", "reasonLT", "reasonLTE", "reasonContains", "reasonHasPrefix", "reasonHasSuffix", "reasonIsNil", "reasonNotNil", "reasonEqualFold", "reasonContainsFold", "hasBazelInvocation", "hasBazelInvocationWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOEventFileWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEventFileWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOEventFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEventFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOEventFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEventFileWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EventFileWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EventFileWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EventFileWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EventFileWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EventFileWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EventFileWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EventFileWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.EventFileWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "urlNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNEQ = data
		case "urlIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLIn = data
		case "urlNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLNotIn = data
		case "urlGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGT = data
		case "urlGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLGTE = data
		case "urlLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLT = data
		case "urlLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLLTE = data
		case "urlContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContains = data
		case "urlHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasPrefix = data
		case "urlHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLHasSuffix = data
		case "urlEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLEqualFold = data
		case "urlContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("urlContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URLContainsFold = data
		case "modTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modTime"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ModTime = data
		case "modTimeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modTimeNEQ"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ModTimeNEQ = data
		case "modTimeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modTimeIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ModTimeIn = data
		case "modTimeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modTimeNotIn"))
			data, err := ec.unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ModTimeNotIn = data
		case "modTimeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modTimeGT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ModTimeGT = data
		case "modTimeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modTimeGTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ModTimeGTE = data
		case "modTimeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modTimeLT"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ModTimeLT = data
		case "modTimeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modTimeLTE"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ModTimeLTE = data
		case "protocol":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocol"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Protocol = data
		case "protocolNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolNEQ = data
		case "protocolIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolIn = data
		case "protocolNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolNotIn = data
		case "protocolGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolGT = data
		case "protocolGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolGTE = data
		case "protocolLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolLT = data
		case "protocolLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolLTE = data
		case "protocolContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolContains = data
		case "protocolHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolHasPrefix = data
		case "protocolHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolHasSuffix = data
		case "protocolEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolEqualFold = data
		case "protocolContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("protocolContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProtocolContainsFold = data
		case "mimeType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeType = data
		case "mimeTypeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeNEQ = data
		case "mimeTypeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeIn = data
		case "mimeTypeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeNotIn = data
		case "mimeTypeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeGT = data
		case "mimeTypeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeGTE = data
		case "mimeTypeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeLT = data
		case "mimeTypeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeLTE = data
		case "mimeTypeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeContains = data
		case "mimeTypeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeHasPrefix = data
		case "mimeTypeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeHasSuffix = data
		case "mimeTypeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeEqualFold = data
		case "mimeTypeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeTypeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeTypeContainsFold = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "statusNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNEQ = data
		case "statusIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusIn = data
		case "statusNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusNotIn = data
		case "statusGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusGT = data
		case "statusGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusGTE = data
		case "statusLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusLT = data
		case "statusLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusLTE = data
		case "statusContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusContains = data
		case "statusHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusHasPrefix = data
		case "statusHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusHasSuffix = data
		case "statusEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusEqualFold = data
		case "statusContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusContainsFold = data
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "reasonNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNEQ = data
		case "reasonIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonIn = data
		case "reasonNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNotIn = data
		case "reasonGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonGT = data
		case "reasonGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonGTE = data
		case "reasonLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonLT = data
		case "reasonLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonLTE = data
		case "reasonContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonContains = data
		case "reasonHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonHasPrefix = data
		case "reasonHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonHasSuffix = data
		case "reasonIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonIsNil = data
		case "reasonNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNotNil = data
		case "reasonEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonEqualFold = data
		case "reasonContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonContainsFold = data
		case "hasBazelInvocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocation"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocation = data
		case "hasBazelInvocationWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocationWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocationWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilesMetricWhereInput(ctx context.Context, obj interface{}) (ent.FilesMetricWhereInput, error) {
	var it ent.FilesMetricWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "sizeInBytes", "sizeInBytesNEQ", "sizeInBytesIn", "sizeInBytesNotIn", "sizeInBytesGT", "sizeInBytesGTE", "sizeInBytesLT", "sizeInBytesLTE", "sizeInBytesIsNil", "sizeInBytesNotNil", "count", "countNEQ", "countIn", "countNotIn", "countGT", "countGTE", "countLT", "countLTE", "countIsNil", "countNotNil", "hasArtifactMetrics", "hasArtifactMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOFilesMetricWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOFilesMetricWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOFilesMetricWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.FilesMetricWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.FilesMetricWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.FilesMetricWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.FilesMetricWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.FilesMetricWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.FilesMetricWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.FilesMetricWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.FilesMetricWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "sizeInBytes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytes"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytes = data
		case "sizeInBytesNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesNEQ = data
		case "sizeInBytesIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesIn = data
		case "sizeInBytesNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesNotIn = data
		case "sizeInBytesGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesGT = data
		case "sizeInBytesGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesGTE = data
		case "sizeInBytesLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesLT = data
		case "sizeInBytesLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesLTE = data
		case "sizeInBytesIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesIsNil = data
		case "sizeInBytesNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sizeInBytesNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SizeInBytesNotNil = data
		case "count":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Count = data
		case "countNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNEQ = data
		case "countIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountIn = data
		case "countNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNotIn = data
		case "countGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountGT = data
		case "countGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountGTE = data
		case "countLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountLT = data
		case "countLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountLTE = data
		case "countIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountIsNil = data
		case "countNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNotNil = data
		case "hasArtifactMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArtifactMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasArtifactMetrics = data
		case "hasArtifactMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArtifactMetricsWith"))
			data, err := ec.unmarshalOArtifactMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasArtifactMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGarbageMetricsWhereInput(ctx context.Context, obj interface{}) (ent.GarbageMetricsWhereInput, error) {
	var it ent.GarbageMetricsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "type", "typeNEQ", "typeIn", "typeNotIn", "typeGT", "typeGTE", "typeLT", "typeLTE", "typeContains", "typeHasPrefix", "typeHasSuffix", "typeIsNil", "typeNotNil", "typeEqualFold", "typeContainsFold", "garbageCollected", "garbageCollectedNEQ", "garbageCollectedIn", "garbageCollectedNotIn", "garbageCollectedGT", "garbageCollectedGTE", "garbageCollectedLT", "garbageCollectedLTE", "garbageCollectedIsNil", "garbageCollectedNotNil", "hasMemoryMetrics", "hasMemoryMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOGarbageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOGarbageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOGarbageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.GarbageMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "typeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNEQ = data
		case "typeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIn = data
		case "typeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotIn = data
		case "typeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeGT = data
		case "typeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeGTE = data
		case "typeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeLT = data
		case "typeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeLTE = data
		case "typeContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeContains = data
		case "typeHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeHasPrefix = data
		case "typeHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeHasSuffix = data
		case "typeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeIsNil = data
		case "typeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeNotNil = data
		case "typeEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeEqualFold = data
		case "typeContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeContainsFold = data
		case "garbageCollected":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollected"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollected = data
		case "garbageCollectedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedNEQ = data
		case "garbageCollectedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedIn = data
		case "garbageCollectedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedNotIn = data
		case "garbageCollectedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedGT = data
		case "garbageCollectedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedGTE = data
		case "garbageCollectedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedLT = data
		case "garbageCollectedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedLTE = data
		case "garbageCollectedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedIsNil = data
		case "garbageCollectedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("garbageCollectedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.GarbageCollectedNotNil = data
		case "hasMemoryMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMemoryMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMemoryMetrics = data
		case "hasMemoryMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMemoryMetricsWith"))
			data, err := ec.unmarshalOMemoryMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMemoryMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMemoryMetricsWhereInput(ctx context.Context, obj interface{}) (ent.MemoryMetricsWhereInput, error) {
	var it ent.MemoryMetricsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "peakPostGcHeapSize", "peakPostGcHeapSizeNEQ", "peakPostGcHeapSizeIn", "peakPostGcHeapSizeNotIn", "peakPostGcHeapSizeGT", "peakPostGcHeapSizeGTE", "peakPostGcHeapSizeLT", "peakPostGcHeapSizeLTE", "peakPostGcHeapSizeIsNil", "peakPostGcHeapSizeNotNil", "usedHeapSizePostBuild", "usedHeapSizePostBuildNEQ", "usedHeapSizePostBuildIn", "usedHeapSizePostBuildNotIn", "usedHeapSizePostBuildGT", "usedHeapSizePostBuildGTE", "usedHeapSizePostBuildLT", "usedHeapSizePostBuildLTE", "usedHeapSizePostBuildIsNil", "usedHeapSizePostBuildNotNil", "peakPostGcTenuredSpaceHeapSize", "peakPostGcTenuredSpaceHeapSizeNEQ", "peakPostGcTenuredSpaceHeapSizeIn", "peakPostGcTenuredSpaceHeapSizeNotIn", "peakPostGcTenuredSpaceHeapSizeGT", "peakPostGcTenuredSpaceHeapSizeGTE", "peakPostGcTenuredSpaceHeapSizeLT", "peakPostGcTenuredSpaceHeapSizeLTE", "peakPostGcTenuredSpaceHeapSizeIsNil", "peakPostGcTenuredSpaceHeapSizeNotNil", "hasGarbageMetrics", "hasGarbageMetricsWith", "hasMetrics", "hasMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOMemoryMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOMemoryMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOMemoryMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MemoryMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "peakPostGcHeapSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSize"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSize = data
		case "peakPostGcHeapSizeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeNEQ = data
		case "peakPostGcHeapSizeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeIn = data
		case "peakPostGcHeapSizeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeNotIn = data
		case "peakPostGcHeapSizeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeGT = data
		case "peakPostGcHeapSizeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeGTE = data
		case "peakPostGcHeapSizeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeLT = data
		case "peakPostGcHeapSizeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeLTE = data
		case "peakPostGcHeapSizeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeIsNil = data
		case "peakPostGcHeapSizeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcHeapSizeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcHeapSizeNotNil = data
		case "usedHeapSizePostBuild":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuild"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuild = data
		case "usedHeapSizePostBuildNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildNEQ = data
		case "usedHeapSizePostBuildIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildIn = data
		case "usedHeapSizePostBuildNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildNotIn = data
		case "usedHeapSizePostBuildGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildGT = data
		case "usedHeapSizePostBuildGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildGTE = data
		case "usedHeapSizePostBuildLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildLT = data
		case "usedHeapSizePostBuildLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildLTE = data
		case "usedHeapSizePostBuildIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildIsNil = data
		case "usedHeapSizePostBuildNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedHeapSizePostBuildNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedHeapSizePostBuildNotNil = data
		case "peakPostGcTenuredSpaceHeapSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSize"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSize = data
		case "peakPostGcTenuredSpaceHeapSizeNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeNEQ = data
		case "peakPostGcTenuredSpaceHeapSizeIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeIn = data
		case "peakPostGcTenuredSpaceHeapSizeNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeNotIn = data
		case "peakPostGcTenuredSpaceHeapSizeGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeGT = data
		case "peakPostGcTenuredSpaceHeapSizeGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeGTE = data
		case "peakPostGcTenuredSpaceHeapSizeLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeLT = data
		case "peakPostGcTenuredSpaceHeapSizeLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeLTE = data
		case "peakPostGcTenuredSpaceHeapSizeIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeIsNil = data
		case "peakPostGcTenuredSpaceHeapSizeNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPostGcTenuredSpaceHeapSizeNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPostGcTenuredSpaceHeapSizeNotNil = data
		case "hasGarbageMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasGarbageMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasGarbageMetrics = data
		case "hasGarbageMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasGarbageMetricsWith"))
			data, err := ec.unmarshalOGarbageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasGarbageMetricsWith = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMetricsWhereInput(ctx context.Context, obj interface{}) (ent.MetricsWhereInput, error) {
	var it ent.MetricsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "hasBazelInvocation", "hasBazelInvocationWith", "hasActionSummary", "hasActionSummaryWith", "hasMemoryMetrics", "hasMemoryMetricsWith", "hasTargetMetrics", "hasTargetMetricsWith", "hasPackageMetrics", "hasPackageMetricsWith", "hasTimingMetrics", "hasTimingMetricsWith", "hasCumulativeMetrics", "hasCumulativeMetricsWith", "hasArtifactMetrics", "hasArtifactMetricsWith", "hasNetworkMetrics", "hasNetworkMetricsWith", "hasDynamicExecutionMetrics", "hasDynamicExecutionMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "hasBazelInvocation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocation"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocation = data
		case "hasBazelInvocationWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasBazelInvocationWith"))
			data, err := ec.unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasBazelInvocationWith = data
		case "hasActionSummary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummary = data
		case "hasActionSummaryWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummaryWith"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummaryWith = data
		case "hasMemoryMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMemoryMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMemoryMetrics = data
		case "hasMemoryMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMemoryMetricsWith"))
			data, err := ec.unmarshalOMemoryMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMemoryMetricsWith = data
		case "hasTargetMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTargetMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTargetMetrics = data
		case "hasTargetMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTargetMetricsWith"))
			data, err := ec.unmarshalOTargetMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTargetMetricsWith = data
		case "hasPackageMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageMetrics = data
		case "hasPackageMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageMetricsWith"))
			data, err := ec.unmarshalOPackageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageMetricsWith = data
		case "hasTimingMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTimingMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTimingMetrics = data
		case "hasTimingMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasTimingMetricsWith"))
			data, err := ec.unmarshalOTimingMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasTimingMetricsWith = data
		case "hasCumulativeMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCumulativeMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCumulativeMetrics = data
		case "hasCumulativeMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasCumulativeMetricsWith"))
			data, err := ec.unmarshalOCumulativeMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasCumulativeMetricsWith = data
		case "hasArtifactMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArtifactMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasArtifactMetrics = data
		case "hasArtifactMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasArtifactMetricsWith"))
			data, err := ec.unmarshalOArtifactMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasArtifactMetricsWith = data
		case "hasNetworkMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNetworkMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNetworkMetrics = data
		case "hasNetworkMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNetworkMetricsWith"))
			data, err := ec.unmarshalONetworkMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNetworkMetricsWith = data
		case "hasDynamicExecutionMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDynamicExecutionMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDynamicExecutionMetrics = data
		case "hasDynamicExecutionMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDynamicExecutionMetricsWith"))
			data, err := ec.unmarshalODynamicExecutionMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDynamicExecutionMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMissDetailWhereInput(ctx context.Context, obj interface{}) (ent.MissDetailWhereInput, error) {
	var it ent.MissDetailWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "reason", "reasonNEQ", "reasonIn", "reasonNotIn", "reasonIsNil", "reasonNotNil", "count", "countNEQ", "countIn", "countNotIn", "countGT", "countGTE", "countLT", "countLTE", "countIsNil", "countNotNil", "hasActionCacheStatistics", "hasActionCacheStatisticsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOMissDetailWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOMissDetailWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOMissDetailWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.MissDetailWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalOMissDetailReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "reasonNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNEQ"))
			data, err := ec.unmarshalOMissDetailReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNEQ = data
		case "reasonIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonIn"))
			data, err := ec.unmarshalOMissDetailReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReasonᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonIn = data
		case "reasonNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNotIn"))
			data, err := ec.unmarshalOMissDetailReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReasonᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNotIn = data
		case "reasonIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonIsNil = data
		case "reasonNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonNotNil = data
		case "count":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Count = data
		case "countNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNEQ = data
		case "countIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountIn = data
		case "countNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNotIn = data
		case "countGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountGT = data
		case "countGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountGTE = data
		case "countLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountLT = data
		case "countLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountLTE = data
		case "countIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountIsNil = data
		case "countNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountNotNil = data
		case "hasActionCacheStatistics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionCacheStatistics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionCacheStatistics = data
		case "hasActionCacheStatisticsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionCacheStatisticsWith"))
			data, err := ec.unmarshalOActionCacheStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionCacheStatisticsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNetworkMetricsWhereInput(ctx context.Context, obj interface{}) (ent.NetworkMetricsWhereInput, error) {
	var it ent.NetworkMetricsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "hasMetrics", "hasMetricsWith", "hasSystemNetworkStats", "hasSystemNetworkStatsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalONetworkMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalONetworkMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalONetworkMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.NetworkMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		case "hasSystemNetworkStats":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSystemNetworkStats"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSystemNetworkStats = data
		case "hasSystemNetworkStatsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSystemNetworkStatsWith"))
			data, err := ec.unmarshalOSystemNetworkStatsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasSystemNetworkStatsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPackageLoadMetricsWhereInput(ctx context.Context, obj interface{}) (ent.PackageLoadMetricsWhereInput, error) {
	var it ent.PackageLoadMetricsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "loadDuration", "loadDurationNEQ", "loadDurationIn", "loadDurationNotIn", "loadDurationGT", "loadDurationGTE", "loadDurationLT", "loadDurationLTE", "loadDurationIsNil", "loadDurationNotNil", "numTargets", "numTargetsNEQ", "numTargetsIn", "numTargetsNotIn", "numTargetsGT", "numTargetsGTE", "numTargetsLT", "numTargetsLTE", "numTargetsIsNil", "numTargetsNotNil", "computationSteps", "computationStepsNEQ", "computationStepsIn", "computationStepsNotIn", "computationStepsGT", "computationStepsGTE", "computationStepsLT", "computationStepsLTE", "computationStepsIsNil", "computationStepsNotNil", "numTransitiveLoads", "numTransitiveLoadsNEQ", "numTransitiveLoadsIn", "numTransitiveLoadsNotIn", "numTransitiveLoadsGT", "numTransitiveLoadsGTE", "numTransitiveLoadsLT", "numTransitiveLoadsLTE", "numTransitiveLoadsIsNil", "numTransitiveLoadsNotNil", "packageOverhead", "packageOverheadNEQ", "packageOverheadIn", "packageOverheadNotIn", "packageOverheadGT", "packageOverheadGTE", "packageOverheadLT", "packageOverheadLTE", "packageOverheadIsNil", "packageOverheadNotNil", "hasPackageMetrics", "hasPackageMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPackageLoadMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPackageLoadMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPackageLoadMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "loadDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDuration"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().LoadDuration(ctx, &it, data); err != nil {
				return it, err
			}
		case "loadDurationNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationNEQ"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().LoadDurationNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "loadDurationIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().LoadDurationIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "loadDurationNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationNotIn"))
			data, err := ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().LoadDurationNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "loadDurationGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationGT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().LoadDurationGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "loadDurationGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationGTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().LoadDurationGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "loadDurationLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationLT"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().LoadDurationLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "loadDurationLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationLTE"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageLoadMetricsWhereInput().LoadDurationLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "loadDurationIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDurationIsNil = data
		case "loadDurationNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadDurationNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LoadDurationNotNil = data
		case "numTargets":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargets"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargets = data
		case "numTargetsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsNEQ = data
		case "numTargetsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsIn = data
		case "numTargetsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsNotIn = data
		case "numTargetsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsGT = data
		case "numTargetsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsGTE = data
		case "numTargetsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsLT = data
		case "numTargetsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsLTE = data
		case "numTargetsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsIsNil = data
		case "numTargetsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTargetsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTargetsNotNil = data
		case "computationSteps":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationSteps"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationSteps = data
		case "computationStepsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsNEQ = data
		case "computationStepsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsIn = data
		case "computationStepsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsNotIn = data
		case "computationStepsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsGT = data
		case "computationStepsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsGTE = data
		case "computationStepsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsLT = data
		case "computationStepsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsLTE = data
		case "computationStepsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsIsNil = data
		case "computationStepsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("computationStepsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ComputationStepsNotNil = data
		case "numTransitiveLoads":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoads"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoads = data
		case "numTransitiveLoadsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsNEQ = data
		case "numTransitiveLoadsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsIn = data
		case "numTransitiveLoadsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsNotIn = data
		case "numTransitiveLoadsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsGT = data
		case "numTransitiveLoadsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsGTE = data
		case "numTransitiveLoadsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsLT = data
		case "numTransitiveLoadsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsLTE = data
		case "numTransitiveLoadsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsIsNil = data
		case "numTransitiveLoadsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numTransitiveLoadsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NumTransitiveLoadsNotNil = data
		case "packageOverhead":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverhead"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverhead = data
		case "packageOverheadNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadNEQ = data
		case "packageOverheadIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadIn = data
		case "packageOverheadNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadNotIn = data
		case "packageOverheadGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadGT = data
		case "packageOverheadGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadGTE = data
		case "packageOverheadLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadLT = data
		case "packageOverheadLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadLTE = data
		case "packageOverheadIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadIsNil = data
		case "packageOverheadNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packageOverheadNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackageOverheadNotNil = data
		case "hasPackageMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageMetrics = data
		case "hasPackageMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageMetricsWith"))
			data, err := ec.unmarshalOPackageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPackageMetricsWhereInput(ctx context.Context, obj interface{}) (ent.PackageMetricsWhereInput, error) {
	var it ent.PackageMetricsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "packagesLoaded", "packagesLoadedNEQ", "packagesLoadedIn", "packagesLoadedNotIn", "packagesLoadedGT", "packagesLoadedGTE", "packagesLoadedLT", "packagesLoadedLTE", "packagesLoadedIsNil", "packagesLoadedNotNil", "hasPackageLoadMetrics", "hasPackageLoadMetricsWith", "hasMetrics", "hasMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOPackageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOPackageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOPackageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.PackageMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "packagesLoaded":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoaded"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoaded = data
		case "packagesLoadedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedNEQ = data
		case "packagesLoadedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedIn = data
		case "packagesLoadedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedNotIn = data
		case "packagesLoadedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedGT = data
		case "packagesLoadedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedGTE = data
		case "packagesLoadedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedLT = data
		case "packagesLoadedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedLTE = data
		case "packagesLoadedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedIsNil = data
		case "packagesLoadedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagesLoadedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PackagesLoadedNotNil = data
		case "hasPackageLoadMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageLoadMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageLoadMetrics = data
		case "hasPackageLoadMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPackageLoadMetricsWith"))
			data, err := ec.unmarshalOPackageLoadMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasPackageLoadMetricsWith = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRaceStatisticsWhereInput(ctx context.Context, obj interface{}) (ent.RaceStatisticsWhereInput, error) {
	var it ent.RaceStatisticsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "mnemonic", "mnemonicNEQ", "mnemonicIn", "mnemonicNotIn", "mnemonicGT", "mnemonicGTE", "mnemonicLT", "mnemonicLTE", "mnemonicContains", "mnemonicHasPrefix", "mnemonicHasSuffix", "mnemonicIsNil", "mnemonicNotNil", "mnemonicEqualFold", "mnemonicContainsFold", "localRunner", "localRunnerNEQ", "localRunnerIn", "localRunnerNotIn", "localRunnerGT", "localRunnerGTE", "localRunnerLT", "localRunnerLTE", "localRunnerContains", "localRunnerHasPrefix", "localRunnerHasSuffix", "localRunnerIsNil", "localRunnerNotNil", "localRunnerEqualFold", "localRunnerContainsFold", "remoteRunner", "remoteRunnerNEQ", "remoteRunnerIn", "remoteRunnerNotIn", "remoteRunnerGT", "remoteRunnerGTE", "remoteRunnerLT", "remoteRunnerLTE", "remoteRunnerContains", "remoteRunnerHasPrefix", "remoteRunnerHasSuffix", "remoteRunnerIsNil", "remoteRunnerNotNil", "remoteRunnerEqualFold", "remoteRunnerContainsFold", "localWins", "localWinsNEQ", "localWinsIn", "localWinsNotIn", "localWinsGT", "localWinsGTE", "localWinsLT", "localWinsLTE", "localWinsIsNil", "localWinsNotNil", "renoteWins", "renoteWinsNEQ", "renoteWinsIn", "renoteWinsNotIn", "renoteWinsGT", "renoteWinsGTE", "renoteWinsLT", "renoteWinsLTE", "renoteWinsIsNil", "renoteWinsNotNil", "hasDynamicExecutionMetrics", "hasDynamicExecutionMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalORaceStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatisticsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalORaceStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatisticsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalORaceStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatisticsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RaceStatisticsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RaceStatisticsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RaceStatisticsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RaceStatisticsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RaceStatisticsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RaceStatisticsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RaceStatisticsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RaceStatisticsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "mnemonic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonic"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mnemonic = data
		case "mnemonicNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicNEQ = data
		case "mnemonicIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicIn = data
		case "mnemonicNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicNotIn = data
		case "mnemonicGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicGT = data
		case "mnemonicGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicGTE = data
		case "mnemonicLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicLT = data
		case "mnemonicLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicLTE = data
		case "mnemonicContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicContains = data
		case "mnemonicHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicHasPrefix = data
		case "mnemonicHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicHasSuffix = data
		case "mnemonicIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicIsNil = data
		case "mnemonicNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicNotNil = data
		case "mnemonicEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicEqualFold = data
		case "mnemonicContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mnemonicContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MnemonicContainsFold = data
		case "localRunner":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunner"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunner = data
		case "localRunnerNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerNEQ = data
		case "localRunnerIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerIn = data
		case "localRunnerNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerNotIn = data
		case "localRunnerGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerGT = data
		case "localRunnerGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerGTE = data
		case "localRunnerLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerLT = data
		case "localRunnerLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerLTE = data
		case "localRunnerContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerContains = data
		case "localRunnerHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerHasPrefix = data
		case "localRunnerHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerHasSuffix = data
		case "localRunnerIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerIsNil = data
		case "localRunnerNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerNotNil = data
		case "localRunnerEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerEqualFold = data
		case "localRunnerContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localRunnerContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalRunnerContainsFold = data
		case "remoteRunner":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunner"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunner = data
		case "remoteRunnerNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerNEQ = data
		case "remoteRunnerIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerIn = data
		case "remoteRunnerNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerNotIn = data
		case "remoteRunnerGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerGT = data
		case "remoteRunnerGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerGTE = data
		case "remoteRunnerLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerLT = data
		case "remoteRunnerLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerLTE = data
		case "remoteRunnerContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerContains = data
		case "remoteRunnerHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerHasPrefix = data
		case "remoteRunnerHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerHasSuffix = data
		case "remoteRunnerIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerIsNil = data
		case "remoteRunnerNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerNotNil = data
		case "remoteRunnerEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerEqualFold = data
		case "remoteRunnerContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteRunnerContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoteRunnerContainsFold = data
		case "localWins":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localWins"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalWins = data
		case "localWinsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localWinsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalWinsNEQ = data
		case "localWinsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localWinsIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalWinsIn = data
		case "localWinsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localWinsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint32ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalWinsNotIn = data
		case "localWinsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localWinsGT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalWinsGT = data
		case "localWinsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localWinsGTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalWinsGTE = data
		case "localWinsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localWinsLT"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalWinsLT = data
		case "localWinsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localWinsLTE"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalWinsLTE = data
		case "localWinsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localWinsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalWinsIsNil = data
		case "localWinsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("localWinsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocalWinsNotNil = data
		case "renoteWins":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renoteWins"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenoteWins = data
		case "renoteWinsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renoteWinsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenoteWinsNEQ = data
		case "renoteWinsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renoteWinsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenoteWinsIn = data
		case "renoteWinsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renoteWinsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenoteWinsNotIn = data
		case "renoteWinsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renoteWinsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenoteWinsGT = data
		case "renoteWinsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renoteWinsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenoteWinsGTE = data
		case "renoteWinsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renoteWinsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenoteWinsLT = data
		case "renoteWinsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renoteWinsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenoteWinsLTE = data
		case "renoteWinsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renoteWinsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenoteWinsIsNil = data
		case "renoteWinsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renoteWinsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenoteWinsNotNil = data
		case "hasDynamicExecutionMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDynamicExecutionMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDynamicExecutionMetrics = data
		case "hasDynamicExecutionMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDynamicExecutionMetricsWith"))
			data, err := ec.unmarshalODynamicExecutionMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasDynamicExecutionMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRunnerCountWhereInput(ctx context.Context, obj interface{}) (ent.RunnerCountWhereInput, error) {
	var it ent.RunnerCountWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "name", "nameNEQ", "nameIn", "nameNotIn", "nameGT", "nameGTE", "nameLT", "nameLTE", "nameContains", "nameHasPrefix", "nameHasSuffix", "nameIsNil", "nameNotNil", "nameEqualFold", "nameContainsFold", "execKind", "execKindNEQ", "execKindIn", "execKindNotIn", "execKindGT", "execKindGTE", "execKindLT", "execKindLTE", "execKindContains", "execKindHasPrefix", "execKindHasSuffix", "execKindIsNil", "execKindNotNil", "execKindEqualFold", "execKindContainsFold", "actionsExecuted", "actionsExecutedNEQ", "actionsExecutedIn", "actionsExecutedNotIn", "actionsExecutedGT", "actionsExecutedGTE", "actionsExecutedLT", "actionsExecutedLTE", "actionsExecutedIsNil", "actionsExecutedNotNil", "hasActionSummary", "hasActionSummaryWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalORunnerCountWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalORunnerCountWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalORunnerCountWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.RunnerCountWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "nameNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNEQ = data
		case "nameIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIn = data
		case "nameNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotIn = data
		case "nameGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGT = data
		case "nameGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameGTE = data
		case "nameLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLT = data
		case "nameLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameLTE = data
		case "nameContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContains = data
		case "nameHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasPrefix = data
		case "nameHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameHasSuffix = data
		case "nameIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameIsNil = data
		case "nameNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameNotNil = data
		case "nameEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameEqualFold = data
		case "nameContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NameContainsFold = data
		case "execKind":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKind"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKind = data
		case "execKindNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindNEQ"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindNEQ = data
		case "execKindIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindIn = data
		case "execKindNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindNotIn"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindNotIn = data
		case "execKindGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindGT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindGT = data
		case "execKindGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindGTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindGTE = data
		case "execKindLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindLT"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindLT = data
		case "execKindLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindLTE"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindLTE = data
		case "execKindContains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindContains"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindContains = data
		case "execKindHasPrefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindHasPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindHasPrefix = data
		case "execKindHasSuffix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindHasSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindHasSuffix = data
		case "execKindIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindIsNil = data
		case "execKindNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindNotNil = data
		case "execKindEqualFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindEqualFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindEqualFold = data
		case "execKindContainsFold":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("execKindContainsFold"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecKindContainsFold = data
		case "actionsExecuted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecuted"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecuted = data
		case "actionsExecutedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNEQ = data
		case "actionsExecutedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIn = data
		case "actionsExecutedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotIn = data
		case "actionsExecutedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGT = data
		case "actionsExecutedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedGTE = data
		case "actionsExecutedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLT = data
		case "actionsExecutedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedLTE = data
		case "actionsExecutedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedIsNil = data
		case "actionsExecutedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutedNotNil = data
		case "hasActionSummary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummary = data
		case "hasActionSummaryWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasActionSummaryWith"))
			data, err := ec.unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasActionSummaryWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemNetworkStatsWhereInput(ctx context.Context, obj interface{}) (ent.SystemNetworkStatsWhereInput, error) {
	var it ent.SystemNetworkStatsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "bytesSent", "bytesSentNEQ", "bytesSentIn", "bytesSentNotIn", "bytesSentGT", "bytesSentGTE", "bytesSentLT", "bytesSentLTE", "bytesSentIsNil", "bytesSentNotNil", "bytesRecv", "bytesRecvNEQ", "bytesRecvIn", "bytesRecvNotIn", "bytesRecvGT", "bytesRecvGTE", "bytesRecvLT", "bytesRecvLTE", "bytesRecvIsNil", "bytesRecvNotNil", "packetsSent", "packetsSentNEQ", "packetsSentIn", "packetsSentNotIn", "packetsSentGT", "packetsSentGTE", "packetsSentLT", "packetsSentLTE", "packetsSentIsNil", "packetsSentNotNil", "packetsRecv", "packetsRecvNEQ", "packetsRecvIn", "packetsRecvNotIn", "packetsRecvGT", "packetsRecvGTE", "packetsRecvLT", "packetsRecvLTE", "packetsRecvIsNil", "packetsRecvNotNil", "peakBytesSentPerSec", "peakBytesSentPerSecNEQ", "peakBytesSentPerSecIn", "peakBytesSentPerSecNotIn", "peakBytesSentPerSecGT", "peakBytesSentPerSecGTE", "peakBytesSentPerSecLT", "peakBytesSentPerSecLTE", "peakBytesSentPerSecIsNil", "peakBytesSentPerSecNotNil", "peakBytesRecvPerSec", "peakBytesRecvPerSecNEQ", "peakBytesRecvPerSecIn", "peakBytesRecvPerSecNotIn", "peakBytesRecvPerSecGT", "peakBytesRecvPerSecGTE", "peakBytesRecvPerSecLT", "peakBytesRecvPerSecLTE", "peakBytesRecvPerSecIsNil", "peakBytesRecvPerSecNotNil", "peakPacketsSentPerSec", "peakPacketsSentPerSecNEQ", "peakPacketsSentPerSecIn", "peakPacketsSentPerSecNotIn", "peakPacketsSentPerSecGT", "peakPacketsSentPerSecGTE", "peakPacketsSentPerSecLT", "peakPacketsSentPerSecLTE", "peakPacketsSentPerSecIsNil", "peakPacketsSentPerSecNotNil", "peakPacketsRecvPerSec", "peakPacketsRecvPerSecNEQ", "peakPacketsRecvPerSecIn", "peakPacketsRecvPerSecNotIn", "peakPacketsRecvPerSecGT", "peakPacketsRecvPerSecGTE", "peakPacketsRecvPerSecLT", "peakPacketsRecvPerSecLTE", "peakPacketsRecvPerSecIsNil", "peakPacketsRecvPerSecNotNil", "hasNetworkMetrics", "hasNetworkMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOSystemNetworkStatsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOSystemNetworkStatsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOSystemNetworkStatsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.SystemNetworkStatsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "bytesSent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSent"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSent = data
		case "bytesSentNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentNEQ = data
		case "bytesSentIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentIn = data
		case "bytesSentNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentNotIn = data
		case "bytesSentGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentGT = data
		case "bytesSentGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentGTE = data
		case "bytesSentLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentLT = data
		case "bytesSentLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentLTE = data
		case "bytesSentIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentIsNil = data
		case "bytesSentNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesSentNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesSentNotNil = data
		case "bytesRecv":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecv"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecv = data
		case "bytesRecvNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvNEQ = data
		case "bytesRecvIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvIn = data
		case "bytesRecvNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvNotIn = data
		case "bytesRecvGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvGT = data
		case "bytesRecvGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvGTE = data
		case "bytesRecvLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvLT = data
		case "bytesRecvLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvLTE = data
		case "bytesRecvIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvIsNil = data
		case "bytesRecvNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytesRecvNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BytesRecvNotNil = data
		case "packetsSent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSent"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSent = data
		case "packetsSentNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentNEQ = data
		case "packetsSentIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentIn = data
		case "packetsSentNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentNotIn = data
		case "packetsSentGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentGT = data
		case "packetsSentGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentGTE = data
		case "packetsSentLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentLT = data
		case "packetsSentLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentLTE = data
		case "packetsSentIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentIsNil = data
		case "packetsSentNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsSentNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsSentNotNil = data
		case "packetsRecv":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecv"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecv = data
		case "packetsRecvNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvNEQ = data
		case "packetsRecvIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvIn = data
		case "packetsRecvNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvNotIn = data
		case "packetsRecvGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvGT = data
		case "packetsRecvGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvGTE = data
		case "packetsRecvLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvLT = data
		case "packetsRecvLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvLTE = data
		case "packetsRecvIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvIsNil = data
		case "packetsRecvNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packetsRecvNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PacketsRecvNotNil = data
		case "peakBytesSentPerSec":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSec"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSec = data
		case "peakBytesSentPerSecNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecNEQ = data
		case "peakBytesSentPerSecIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecIn = data
		case "peakBytesSentPerSecNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecNotIn = data
		case "peakBytesSentPerSecGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecGT = data
		case "peakBytesSentPerSecGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecGTE = data
		case "peakBytesSentPerSecLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecLT = data
		case "peakBytesSentPerSecLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecLTE = data
		case "peakBytesSentPerSecIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecIsNil = data
		case "peakBytesSentPerSecNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesSentPerSecNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesSentPerSecNotNil = data
		case "peakBytesRecvPerSec":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSec"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSec = data
		case "peakBytesRecvPerSecNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecNEQ = data
		case "peakBytesRecvPerSecIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecIn = data
		case "peakBytesRecvPerSecNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecNotIn = data
		case "peakBytesRecvPerSecGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecGT = data
		case "peakBytesRecvPerSecGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecGTE = data
		case "peakBytesRecvPerSecLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecLT = data
		case "peakBytesRecvPerSecLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecLTE = data
		case "peakBytesRecvPerSecIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecIsNil = data
		case "peakBytesRecvPerSecNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakBytesRecvPerSecNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakBytesRecvPerSecNotNil = data
		case "peakPacketsSentPerSec":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSec"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSec = data
		case "peakPacketsSentPerSecNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecNEQ = data
		case "peakPacketsSentPerSecIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecIn = data
		case "peakPacketsSentPerSecNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecNotIn = data
		case "peakPacketsSentPerSecGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecGT = data
		case "peakPacketsSentPerSecGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecGTE = data
		case "peakPacketsSentPerSecLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecLT = data
		case "peakPacketsSentPerSecLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecLTE = data
		case "peakPacketsSentPerSecIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecIsNil = data
		case "peakPacketsSentPerSecNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsSentPerSecNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsSentPerSecNotNil = data
		case "peakPacketsRecvPerSec":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSec"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSec = data
		case "peakPacketsRecvPerSecNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecNEQ = data
		case "peakPacketsRecvPerSecIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecIn = data
		case "peakPacketsRecvPerSecNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecNotIn = data
		case "peakPacketsRecvPerSecGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecGT = data
		case "peakPacketsRecvPerSecGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecGTE = data
		case "peakPacketsRecvPerSecLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecLT = data
		case "peakPacketsRecvPerSecLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecLTE = data
		case "peakPacketsRecvPerSecIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecIsNil = data
		case "peakPacketsRecvPerSecNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("peakPacketsRecvPerSecNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeakPacketsRecvPerSecNotNil = data
		case "hasNetworkMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNetworkMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNetworkMetrics = data
		case "hasNetworkMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNetworkMetricsWith"))
			data, err := ec.unmarshalONetworkMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasNetworkMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTargetMetricsWhereInput(ctx context.Context, obj interface{}) (ent.TargetMetricsWhereInput, error) {
	var it ent.TargetMetricsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "targetsLoaded", "targetsLoadedNEQ", "targetsLoadedIn", "targetsLoadedNotIn", "targetsLoadedGT", "targetsLoadedGTE", "targetsLoadedLT", "targetsLoadedLTE", "targetsLoadedIsNil", "targetsLoadedNotNil", "targetsConfigured", "targetsConfiguredNEQ", "targetsConfiguredIn", "targetsConfiguredNotIn", "targetsConfiguredGT", "targetsConfiguredGTE", "targetsConfiguredLT", "targetsConfiguredLTE", "targetsConfiguredIsNil", "targetsConfiguredNotNil", "targetsConfiguredNotIncludingAspects", "targetsConfiguredNotIncludingAspectsNEQ", "targetsConfiguredNotIncludingAspectsIn", "targetsConfiguredNotIncludingAspectsNotIn", "targetsConfiguredNotIncludingAspectsGT", "targetsConfiguredNotIncludingAspectsGTE", "targetsConfiguredNotIncludingAspectsLT", "targetsConfiguredNotIncludingAspectsLTE", "targetsConfiguredNotIncludingAspectsIsNil", "targetsConfiguredNotIncludingAspectsNotNil", "hasMetrics", "hasMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTargetMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTargetMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTargetMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TargetMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "targetsLoaded":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoaded"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoaded = data
		case "targetsLoadedNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedNEQ = data
		case "targetsLoadedIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedIn = data
		case "targetsLoadedNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedNotIn = data
		case "targetsLoadedGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedGT = data
		case "targetsLoadedGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedGTE = data
		case "targetsLoadedLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedLT = data
		case "targetsLoadedLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedLTE = data
		case "targetsLoadedIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedIsNil = data
		case "targetsLoadedNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsLoadedNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsLoadedNotNil = data
		case "targetsConfigured":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfigured"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfigured = data
		case "targetsConfiguredNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNEQ = data
		case "targetsConfiguredIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredIn = data
		case "targetsConfiguredNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIn = data
		case "targetsConfiguredGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredGT = data
		case "targetsConfiguredGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredGTE = data
		case "targetsConfiguredLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredLT = data
		case "targetsConfiguredLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredLTE = data
		case "targetsConfiguredIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredIsNil = data
		case "targetsConfiguredNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotNil = data
		case "targetsConfiguredNotIncludingAspects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspects"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspects = data
		case "targetsConfiguredNotIncludingAspectsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsNEQ = data
		case "targetsConfiguredNotIncludingAspectsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsIn = data
		case "targetsConfiguredNotIncludingAspectsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsNotIn = data
		case "targetsConfiguredNotIncludingAspectsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsGT = data
		case "targetsConfiguredNotIncludingAspectsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsGTE = data
		case "targetsConfiguredNotIncludingAspectsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsLT = data
		case "targetsConfiguredNotIncludingAspectsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsLTE = data
		case "targetsConfiguredNotIncludingAspectsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsIsNil = data
		case "targetsConfiguredNotIncludingAspectsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetsConfiguredNotIncludingAspectsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetsConfiguredNotIncludingAspectsNotNil = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimingMetricsWhereInput(ctx context.Context, obj interface{}) (ent.TimingMetricsWhereInput, error) {
	var it ent.TimingMetricsWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"not", "and", "or", "id", "idNEQ", "idIn", "idNotIn", "idGT", "idGTE", "idLT", "idLTE", "cpuTimeInMs", "cpuTimeInMsNEQ", "cpuTimeInMsIn", "cpuTimeInMsNotIn", "cpuTimeInMsGT", "cpuTimeInMsGTE", "cpuTimeInMsLT", "cpuTimeInMsLTE", "cpuTimeInMsIsNil", "cpuTimeInMsNotNil", "wallTimeInMs", "wallTimeInMsNEQ", "wallTimeInMsIn", "wallTimeInMsNotIn", "wallTimeInMsGT", "wallTimeInMsGTE", "wallTimeInMsLT", "wallTimeInMsLTE", "wallTimeInMsIsNil", "wallTimeInMsNotNil", "analysisPhaseTimeInMs", "analysisPhaseTimeInMsNEQ", "analysisPhaseTimeInMsIn", "analysisPhaseTimeInMsNotIn", "analysisPhaseTimeInMsGT", "analysisPhaseTimeInMsGTE", "analysisPhaseTimeInMsLT", "analysisPhaseTimeInMsLTE", "analysisPhaseTimeInMsIsNil", "analysisPhaseTimeInMsNotNil", "executionPhaseTimeInMs", "executionPhaseTimeInMsNEQ", "executionPhaseTimeInMsIn", "executionPhaseTimeInMsNotIn", "executionPhaseTimeInMsGT", "executionPhaseTimeInMsGTE", "executionPhaseTimeInMsLT", "executionPhaseTimeInMsLTE", "executionPhaseTimeInMsIsNil", "executionPhaseTimeInMsNotNil", "actionsExecutionStartInMs", "actionsExecutionStartInMsNEQ", "actionsExecutionStartInMsIn", "actionsExecutionStartInMsNotIn", "actionsExecutionStartInMsGT", "actionsExecutionStartInMsGTE", "actionsExecutionStartInMsLT", "actionsExecutionStartInMsLTE", "actionsExecutionStartInMsIsNil", "actionsExecutionStartInMsNotNil", "hasMetrics", "hasMetricsWith"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "not":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			data, err := ec.unmarshalOTimingMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "and":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			data, err := ec.unmarshalOTimingMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "or":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			data, err := ec.unmarshalOTimingMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().ID(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDNeq(ctx, &it, data); err != nil {
				return it, err
			}
		case "idIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDNotIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDGt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDGte(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDLt(ctx, &it, data); err != nil {
				return it, err
			}
		case "idLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TimingMetricsWhereInput().IDLte(ctx, &it, data); err != nil {
				return it, err
			}
		case "cpuTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMs = data
		case "cpuTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsNEQ = data
		case "cpuTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsIn = data
		case "cpuTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsNotIn = data
		case "cpuTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsGT = data
		case "cpuTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsGTE = data
		case "cpuTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsLT = data
		case "cpuTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsLTE = data
		case "cpuTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsIsNil = data
		case "cpuTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CPUTimeInMsNotNil = data
		case "wallTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMs = data
		case "wallTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsNEQ = data
		case "wallTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsIn = data
		case "wallTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsNotIn = data
		case "wallTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsGT = data
		case "wallTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsGTE = data
		case "wallTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsLT = data
		case "wallTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsLTE = data
		case "wallTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsIsNil = data
		case "wallTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WallTimeInMsNotNil = data
		case "analysisPhaseTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMs = data
		case "analysisPhaseTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsNEQ = data
		case "analysisPhaseTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsIn = data
		case "analysisPhaseTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsNotIn = data
		case "analysisPhaseTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsGT = data
		case "analysisPhaseTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsGTE = data
		case "analysisPhaseTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsLT = data
		case "analysisPhaseTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsLTE = data
		case "analysisPhaseTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsIsNil = data
		case "analysisPhaseTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisPhaseTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisPhaseTimeInMsNotNil = data
		case "executionPhaseTimeInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMs = data
		case "executionPhaseTimeInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsNEQ = data
		case "executionPhaseTimeInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsIn = data
		case "executionPhaseTimeInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsNotIn = data
		case "executionPhaseTimeInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsGT = data
		case "executionPhaseTimeInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsGTE = data
		case "executionPhaseTimeInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsLT = data
		case "executionPhaseTimeInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsLTE = data
		case "executionPhaseTimeInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsIsNil = data
		case "executionPhaseTimeInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executionPhaseTimeInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExecutionPhaseTimeInMsNotNil = data
		case "actionsExecutionStartInMs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMs"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMs = data
		case "actionsExecutionStartInMsNEQ":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsNEQ"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsNEQ = data
		case "actionsExecutionStartInMsIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsIn = data
		case "actionsExecutionStartInMsNotIn":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsNotIn"))
			data, err := ec.unmarshalOInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsNotIn = data
		case "actionsExecutionStartInMsGT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsGT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsGT = data
		case "actionsExecutionStartInMsGTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsGTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsGTE = data
		case "actionsExecutionStartInMsLT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsLT"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsLT = data
		case "actionsExecutionStartInMsLTE":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsLTE"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsLTE = data
		case "actionsExecutionStartInMsIsNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsIsNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsIsNil = data
		case "actionsExecutionStartInMsNotNil":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actionsExecutionStartInMsNotNil"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActionsExecutionStartInMsNotNil = data
		case "hasMetrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetrics"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetrics = data
		case "hasMetricsWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasMetricsWith"))
			data, err := ec.unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasMetricsWith = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _BuildStep(ctx context.Context, sel ast.SelectionSet, obj model.BuildStep) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj ent.Noder) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.ActionProblem:
		return ec._ActionProblem(ctx, sel, &obj)
	case *model.ActionProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActionProblem(ctx, sel, obj)
	case model.TestProblem:
		return ec._TestProblem(ctx, sel, &obj)
	case *model.TestProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestProblem(ctx, sel, obj)
	case model.TargetProblem:
		return ec._TargetProblem(ctx, sel, &obj)
	case *model.TargetProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._TargetProblem(ctx, sel, obj)
	case model.ProgressProblem:
		return ec._ProgressProblem(ctx, sel, &obj)
	case *model.ProgressProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProgressProblem(ctx, sel, obj)
	case *ent.Metrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._Metrics(ctx, sel, obj)
	case *ent.PackageLoadMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._PackageLoadMetrics(ctx, sel, obj)
	case *ent.Blob:
		if obj == nil {
			return graphql.Null
		}
		return ec._Blob(ctx, sel, obj)
	case *ent.Build:
		if obj == nil {
			return graphql.Null
		}
		return ec._Build(ctx, sel, obj)
	case *ent.CumulativeMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._CumulativeMetrics(ctx, sel, obj)
	case *ent.DynamicExecutionMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._DynamicExecutionMetrics(ctx, sel, obj)
	case *ent.EventFile:
		if obj == nil {
			return graphql.Null
		}
		return ec._EventFile(ctx, sel, obj)
	case *ent.FilesMetric:
		if obj == nil {
			return graphql.Null
		}
		return ec._FilesMetric(ctx, sel, obj)
	case *ent.GarbageMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._GarbageMetrics(ctx, sel, obj)
	case *ent.MemoryMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._MemoryMetrics(ctx, sel, obj)
	case *ent.ActionCacheStatistics:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActionCacheStatistics(ctx, sel, obj)
	case *ent.MissDetail:
		if obj == nil {
			return graphql.Null
		}
		return ec._MissDetail(ctx, sel, obj)
	case *ent.NetworkMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._NetworkMetrics(ctx, sel, obj)
	case *ent.BazelInvocationProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._BazelInvocationProblem(ctx, sel, obj)
	case *ent.PackageMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._PackageMetrics(ctx, sel, obj)
	case *ent.RaceStatistics:
		if obj == nil {
			return graphql.Null
		}
		return ec._RaceStatistics(ctx, sel, obj)
	case *ent.RunnerCount:
		if obj == nil {
			return graphql.Null
		}
		return ec._RunnerCount(ctx, sel, obj)
	case *ent.SystemNetworkStats:
		if obj == nil {
			return graphql.Null
		}
		return ec._SystemNetworkStats(ctx, sel, obj)
	case *ent.TargetMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._TargetMetrics(ctx, sel, obj)
	case *ent.TimingMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._TimingMetrics(ctx, sel, obj)
	case model.Problem:
		if obj == nil {
			return graphql.Null
		}
		return ec._Problem(ctx, sel, obj)
	case *ent.BazelInvocation:
		if obj == nil {
			return graphql.Null
		}
		return ec._BazelInvocation(ctx, sel, obj)
	case *ent.ArtifactMetrics:
		if obj == nil {
			return graphql.Null
		}
		return ec._ArtifactMetrics(ctx, sel, obj)
	case *ent.ActionSummary:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActionSummary(ctx, sel, obj)
	case *ent.ActionData:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActionData(ctx, sel, obj)
	case model.TestResult:
		return ec._TestResult(ctx, sel, &obj)
	case *model.TestResult:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestResult(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Problem(ctx context.Context, sel ast.SelectionSet, obj model.Problem) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.ActionProblem:
		return ec._ActionProblem(ctx, sel, &obj)
	case *model.ActionProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._ActionProblem(ctx, sel, obj)
	case model.ProgressProblem:
		return ec._ProgressProblem(ctx, sel, &obj)
	case *model.ProgressProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._ProgressProblem(ctx, sel, obj)
	case model.TargetProblem:
		return ec._TargetProblem(ctx, sel, &obj)
	case *model.TargetProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._TargetProblem(ctx, sel, obj)
	case model.TestProblem:
		return ec._TestProblem(ctx, sel, &obj)
	case *model.TestProblem:
		if obj == nil {
			return graphql.Null
		}
		return ec._TestProblem(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var actionCacheStatisticsImplementors = []string{"ActionCacheStatistics", "Node"}

func (ec *executionContext) _ActionCacheStatistics(ctx context.Context, sel ast.SelectionSet, obj *ent.ActionCacheStatistics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionCacheStatisticsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionCacheStatistics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionCacheStatistics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sizeInBytes":
			out.Values[i] = ec._ActionCacheStatistics_sizeInBytes(ctx, field, obj)
		case "saveTimeInMs":
			out.Values[i] = ec._ActionCacheStatistics_saveTimeInMs(ctx, field, obj)
		case "loadTimeInMs":
			out.Values[i] = ec._ActionCacheStatistics_loadTimeInMs(ctx, field, obj)
		case "hits":
			out.Values[i] = ec._ActionCacheStatistics_hits(ctx, field, obj)
		case "misses":
			out.Values[i] = ec._ActionCacheStatistics_misses(ctx, field, obj)
		case "missDetails":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionCacheStatistics_missDetails(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "actionSummary":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionCacheStatistics_actionSummary(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionDataImplementors = []string{"ActionData", "Node"}

func (ec *executionContext) _ActionData(ctx context.Context, sel ast.SelectionSet, obj *ent.ActionData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionData")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionData_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mnemonic":
			out.Values[i] = ec._ActionData_mnemonic(ctx, field, obj)
		case "actionsExecuted":
			out.Values[i] = ec._ActionData_actionsExecuted(ctx, field, obj)
		case "actionsCreated":
			out.Values[i] = ec._ActionData_actionsCreated(ctx, field, obj)
		case "firstStartedMs":
			out.Values[i] = ec._ActionData_firstStartedMs(ctx, field, obj)
		case "lastEndedMs":
			out.Values[i] = ec._ActionData_lastEndedMs(ctx, field, obj)
		case "systemTime":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionData_systemTime(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "userTime":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionData_userTime(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "actionSummary":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionData_actionSummary(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionProblemImplementors = []string{"ActionProblem", "Node", "Problem"}

func (ec *executionContext) _ActionProblem(ctx context.Context, sel ast.SelectionSet, obj *model.ActionProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionProblemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionProblem")
		case "id":
			out.Values[i] = ec._ActionProblem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "label":
			out.Values[i] = ec._ActionProblem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._ActionProblem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "stdout":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionProblem_stdout(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "stderr":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionProblem_stderr(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSummaryImplementors = []string{"ActionSummary", "Node"}

func (ec *executionContext) _ActionSummary(ctx context.Context, sel ast.SelectionSet, obj *ent.ActionSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSummary")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionSummary_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "actionsCreated":
			out.Values[i] = ec._ActionSummary_actionsCreated(ctx, field, obj)
		case "actionsCreatedNotIncludingAspects":
			out.Values[i] = ec._ActionSummary_actionsCreatedNotIncludingAspects(ctx, field, obj)
		case "actionsExecuted":
			out.Values[i] = ec._ActionSummary_actionsExecuted(ctx, field, obj)
		case "remoteCacheHits":
			out.Values[i] = ec._ActionSummary_remoteCacheHits(ctx, field, obj)
		case "actionData":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionSummary_actionData(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "runnerCount":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionSummary_runnerCount(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "actionCacheStatistics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionSummary_actionCacheStatistics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ActionSummary_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var artifactMetricsImplementors = []string{"ArtifactMetrics", "Node"}

func (ec *executionContext) _ArtifactMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.ArtifactMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArtifactMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ArtifactMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ArtifactMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sourceArtifactsRead":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ArtifactMetrics_sourceArtifactsRead(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "outputArtifactsSeen":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ArtifactMetrics_outputArtifactsSeen(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "outputArtifactsFromActionCache":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ArtifactMetrics_outputArtifactsFromActionCache(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "topLevelArtifacts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ArtifactMetrics_topLevelArtifacts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelCommandImplementors = []string{"BazelCommand"}

func (ec *executionContext) _BazelCommand(ctx context.Context, sel ast.SelectionSet, obj *model.BazelCommand) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelCommandImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelCommand")
		case "id":
			out.Values[i] = ec._BazelCommand_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "command":
			out.Values[i] = ec._BazelCommand_command(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "executable":
			out.Values[i] = ec._BazelCommand_executable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "options":
			out.Values[i] = ec._BazelCommand_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "residual":
			out.Values[i] = ec._BazelCommand_residual(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelInvocationImplementors = []string{"BazelInvocation", "Node"}

func (ec *executionContext) _BazelInvocation(ctx context.Context, sel ast.SelectionSet, obj *ent.BazelInvocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelInvocationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelInvocation")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "invocationID":
			out.Values[i] = ec._BazelInvocation_invocationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "startedAt":
			out.Values[i] = ec._BazelInvocation_startedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "endedAt":
			out.Values[i] = ec._BazelInvocation_endedAt(ctx, field, obj)
		case "changeNumber":
			out.Values[i] = ec._BazelInvocation_changeNumber(ctx, field, obj)
		case "patchsetNumber":
			out.Values[i] = ec._BazelInvocation_patchsetNumber(ctx, field, obj)
		case "bepCompleted":
			out.Values[i] = ec._BazelInvocation_bepCompleted(ctx, field, obj)
		case "stepLabel":
			out.Values[i] = ec._BazelInvocation_stepLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "userEmail":
			out.Values[i] = ec._BazelInvocation_userEmail(ctx, field, obj)
		case "userLdap":
			out.Values[i] = ec._BazelInvocation_userLdap(ctx, field, obj)
		case "buildLogs":
			out.Values[i] = ec._BazelInvocation_buildLogs(ctx, field, obj)
		case "eventFile":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_eventFile(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "build":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_build(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "bazelCommand":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_bazelCommand(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "state":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_state(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "relatedFiles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_relatedFiles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "problems":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocation_problems(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelInvocationConnectionImplementors = []string{"BazelInvocationConnection"}

func (ec *executionContext) _BazelInvocationConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.BazelInvocationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelInvocationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelInvocationConnection")
		case "edges":
			out.Values[i] = ec._BazelInvocationConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BazelInvocationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._BazelInvocationConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelInvocationEdgeImplementors = []string{"BazelInvocationEdge"}

func (ec *executionContext) _BazelInvocationEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.BazelInvocationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelInvocationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelInvocationEdge")
		case "node":
			out.Values[i] = ec._BazelInvocationEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._BazelInvocationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelInvocationProblemImplementors = []string{"BazelInvocationProblem", "Node"}

func (ec *executionContext) _BazelInvocationProblem(ctx context.Context, sel ast.SelectionSet, obj *ent.BazelInvocationProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelInvocationProblemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelInvocationProblem")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocationProblem_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "problemType":
			out.Values[i] = ec._BazelInvocationProblem_problemType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "label":
			out.Values[i] = ec._BazelInvocationProblem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BazelInvocationProblem_bazelInvocation(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bazelInvocationStateImplementors = []string{"BazelInvocationState"}

func (ec *executionContext) _BazelInvocationState(ctx context.Context, sel ast.SelectionSet, obj *model.BazelInvocationState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bazelInvocationStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BazelInvocationState")
		case "id":
			out.Values[i] = ec._BazelInvocationState_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "buildEndTime":
			out.Values[i] = ec._BazelInvocationState_buildEndTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "buildStartTime":
			out.Values[i] = ec._BazelInvocationState_buildStartTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "exitCode":
			out.Values[i] = ec._BazelInvocationState_exitCode(ctx, field, obj)
		case "bepCompleted":
			out.Values[i] = ec._BazelInvocationState_bepCompleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var blobImplementors = []string{"Blob", "Node"}

func (ec *executionContext) _Blob(ctx context.Context, sel ast.SelectionSet, obj *ent.Blob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blobImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Blob")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Blob_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "uri":
			out.Values[i] = ec._Blob_uri(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sizeBytes":
			out.Values[i] = ec._Blob_sizeBytes(ctx, field, obj)
		case "archivingStatus":
			out.Values[i] = ec._Blob_archivingStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "reason":
			out.Values[i] = ec._Blob_reason(ctx, field, obj)
		case "archiveURL":
			out.Values[i] = ec._Blob_archiveURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var blobReferenceImplementors = []string{"BlobReference"}

func (ec *executionContext) _BlobReference(ctx context.Context, sel ast.SelectionSet, obj *model.BlobReference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blobReferenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlobReference")
		case "name":
			out.Values[i] = ec._BlobReference_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "downloadURL":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BlobReference_downloadURL(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sizeInBytes":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BlobReference_sizeInBytes(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "availabilityStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BlobReference_availabilityStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var buildImplementors = []string{"Build", "Node"}

func (ec *executionContext) _Build(ctx context.Context, sel ast.SelectionSet, obj *ent.Build) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Build")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Build_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "buildURL":
			out.Values[i] = ec._Build_buildURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "buildUUID":
			out.Values[i] = ec._Build_buildUUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "invocations":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Build_invocations(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "env":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Build_env(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var buildConnectionImplementors = []string{"BuildConnection"}

func (ec *executionContext) _BuildConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.BuildConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BuildConnection")
		case "edges":
			out.Values[i] = ec._BuildConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BuildConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._BuildConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var buildEdgeImplementors = []string{"BuildEdge"}

func (ec *executionContext) _BuildEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.BuildEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BuildEdge")
		case "node":
			out.Values[i] = ec._BuildEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._BuildEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cumulativeMetricsImplementors = []string{"CumulativeMetrics", "Node"}

func (ec *executionContext) _CumulativeMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.CumulativeMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cumulativeMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CumulativeMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CumulativeMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "numAnalyses":
			out.Values[i] = ec._CumulativeMetrics_numAnalyses(ctx, field, obj)
		case "numBuilds":
			out.Values[i] = ec._CumulativeMetrics_numBuilds(ctx, field, obj)
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CumulativeMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dynamicExecutionMetricsImplementors = []string{"DynamicExecutionMetrics", "Node"}

func (ec *executionContext) _DynamicExecutionMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.DynamicExecutionMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicExecutionMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicExecutionMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DynamicExecutionMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DynamicExecutionMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "raceStatistics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DynamicExecutionMetrics_raceStatistics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var envVarImplementors = []string{"EnvVar"}

func (ec *executionContext) _EnvVar(ctx context.Context, sel ast.SelectionSet, obj *model.EnvVar) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, envVarImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnvVar")
		case "key":
			out.Values[i] = ec._EnvVar_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._EnvVar_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eventFileImplementors = []string{"EventFile", "Node"}

func (ec *executionContext) _EventFile(ctx context.Context, sel ast.SelectionSet, obj *ent.EventFile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventFileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventFile")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EventFile_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "url":
			out.Values[i] = ec._EventFile_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modTime":
			out.Values[i] = ec._EventFile_modTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "protocol":
			out.Values[i] = ec._EventFile_protocol(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "mimeType":
			out.Values[i] = ec._EventFile_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._EventFile_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "reason":
			out.Values[i] = ec._EventFile_reason(ctx, field, obj)
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EventFile_bazelInvocation(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var exitCodeImplementors = []string{"ExitCode"}

func (ec *executionContext) _ExitCode(ctx context.Context, sel ast.SelectionSet, obj *model.ExitCode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, exitCodeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExitCode")
		case "id":
			out.Values[i] = ec._ExitCode_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._ExitCode_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._ExitCode_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var filesMetricImplementors = []string{"FilesMetric", "Node"}

func (ec *executionContext) _FilesMetric(ctx context.Context, sel ast.SelectionSet, obj *ent.FilesMetric) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, filesMetricImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FilesMetric")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FilesMetric_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sizeInBytes":
			out.Values[i] = ec._FilesMetric_sizeInBytes(ctx, field, obj)
		case "count":
			out.Values[i] = ec._FilesMetric_count(ctx, field, obj)
		case "artifactMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FilesMetric_artifactMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var garbageMetricsImplementors = []string{"GarbageMetrics", "Node"}

func (ec *executionContext) _GarbageMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.GarbageMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, garbageMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GarbageMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GarbageMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "type":
			out.Values[i] = ec._GarbageMetrics_type(ctx, field, obj)
		case "garbageCollected":
			out.Values[i] = ec._GarbageMetrics_garbageCollected(ctx, field, obj)
		case "memoryMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GarbageMetrics_memoryMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var memoryMetricsImplementors = []string{"MemoryMetrics", "Node"}

func (ec *executionContext) _MemoryMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.MemoryMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memoryMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MemoryMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemoryMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "peakPostGcHeapSize":
			out.Values[i] = ec._MemoryMetrics_peakPostGcHeapSize(ctx, field, obj)
		case "usedHeapSizePostBuild":
			out.Values[i] = ec._MemoryMetrics_usedHeapSizePostBuild(ctx, field, obj)
		case "peakPostGcTenuredSpaceHeapSize":
			out.Values[i] = ec._MemoryMetrics_peakPostGcTenuredSpaceHeapSize(ctx, field, obj)
		case "garbageMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemoryMetrics_garbageMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemoryMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metricsImplementors = []string{"Metrics", "Node"}

func (ec *executionContext) _Metrics(ctx context.Context, sel ast.SelectionSet, obj *ent.Metrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Metrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_bazelInvocation(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "actionSummary":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_actionSummary(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "memoryMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_memoryMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "targetMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_targetMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "packageMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_packageMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "timingMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_timingMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cumulativeMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_cumulativeMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "artifactMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_artifactMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "networkMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_networkMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "dynamicExecutionMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Metrics_dynamicExecutionMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metricsConnectionImplementors = []string{"MetricsConnection"}

func (ec *executionContext) _MetricsConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.MetricsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metricsConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetricsConnection")
		case "edges":
			out.Values[i] = ec._MetricsConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._MetricsConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._MetricsConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metricsEdgeImplementors = []string{"MetricsEdge"}

func (ec *executionContext) _MetricsEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.MetricsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metricsEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetricsEdge")
		case "node":
			out.Values[i] = ec._MetricsEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._MetricsEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var missDetailImplementors = []string{"MissDetail", "Node"}

func (ec *executionContext) _MissDetail(ctx context.Context, sel ast.SelectionSet, obj *ent.MissDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, missDetailImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MissDetail")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MissDetail_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "reason":
			out.Values[i] = ec._MissDetail_reason(ctx, field, obj)
		case "count":
			out.Values[i] = ec._MissDetail_count(ctx, field, obj)
		case "actionCacheStatistics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MissDetail_actionCacheStatistics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var namedFileImplementors = []string{"NamedFile"}

func (ec *executionContext) _NamedFile(ctx context.Context, sel ast.SelectionSet, obj *model.NamedFile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, namedFileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NamedFile")
		case "name":
			out.Values[i] = ec._NamedFile_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._NamedFile_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var networkMetricsImplementors = []string{"NetworkMetrics", "Node"}

func (ec *executionContext) _NetworkMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.NetworkMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, networkMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NetworkMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NetworkMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NetworkMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "systemNetworkStats":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._NetworkMetrics_systemNetworkStats(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var packageLoadMetricsImplementors = []string{"PackageLoadMetrics", "Node"}

func (ec *executionContext) _PackageLoadMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.PackageLoadMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, packageLoadMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PackageLoadMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PackageLoadMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._PackageLoadMetrics_name(ctx, field, obj)
		case "loadDuration":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PackageLoadMetrics_loadDuration(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "numTargets":
			out.Values[i] = ec._PackageLoadMetrics_numTargets(ctx, field, obj)
		case "computationSteps":
			out.Values[i] = ec._PackageLoadMetrics_computationSteps(ctx, field, obj)
		case "numTransitiveLoads":
			out.Values[i] = ec._PackageLoadMetrics_numTransitiveLoads(ctx, field, obj)
		case "packageOverhead":
			out.Values[i] = ec._PackageLoadMetrics_packageOverhead(ctx, field, obj)
		case "packageMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PackageLoadMetrics_packageMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var packageMetricsImplementors = []string{"PackageMetrics", "Node"}

func (ec *executionContext) _PackageMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.PackageMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, packageMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PackageMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PackageMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "packagesLoaded":
			out.Values[i] = ec._PackageMetrics_packagesLoaded(ctx, field, obj)
		case "packageLoadMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PackageMetrics_packageLoadMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PackageMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *entgql.PageInfo[int]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var progressProblemImplementors = []string{"ProgressProblem", "Node", "Problem"}

func (ec *executionContext) _ProgressProblem(ctx context.Context, sel ast.SelectionSet, obj *model.ProgressProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, progressProblemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProgressProblem")
		case "id":
			out.Values[i] = ec._ProgressProblem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._ProgressProblem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "output":
			out.Values[i] = ec._ProgressProblem_output(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "nodes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findBazelInvocations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findBazelInvocations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findBuilds":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findBuilds(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "findMetrics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findMetrics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "bazelInvocation":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_bazelInvocation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getBuild":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBuild(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var raceStatisticsImplementors = []string{"RaceStatistics", "Node"}

func (ec *executionContext) _RaceStatistics(ctx context.Context, sel ast.SelectionSet, obj *ent.RaceStatistics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, raceStatisticsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RaceStatistics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RaceStatistics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mnemonic":
			out.Values[i] = ec._RaceStatistics_mnemonic(ctx, field, obj)
		case "localRunner":
			out.Values[i] = ec._RaceStatistics_localRunner(ctx, field, obj)
		case "remoteRunner":
			out.Values[i] = ec._RaceStatistics_remoteRunner(ctx, field, obj)
		case "localWins":
			out.Values[i] = ec._RaceStatistics_localWins(ctx, field, obj)
		case "renoteWins":
			out.Values[i] = ec._RaceStatistics_renoteWins(ctx, field, obj)
		case "dynamicExecutionMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RaceStatistics_dynamicExecutionMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var runnerCountImplementors = []string{"RunnerCount", "Node"}

func (ec *executionContext) _RunnerCount(ctx context.Context, sel ast.SelectionSet, obj *ent.RunnerCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, runnerCountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RunnerCount")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RunnerCount_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._RunnerCount_name(ctx, field, obj)
		case "execKind":
			out.Values[i] = ec._RunnerCount_execKind(ctx, field, obj)
		case "actionsExecuted":
			out.Values[i] = ec._RunnerCount_actionsExecuted(ctx, field, obj)
		case "actionSummary":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RunnerCount_actionSummary(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemNetworkStatsImplementors = []string{"SystemNetworkStats", "Node"}

func (ec *executionContext) _SystemNetworkStats(ctx context.Context, sel ast.SelectionSet, obj *ent.SystemNetworkStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemNetworkStatsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemNetworkStats")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemNetworkStats_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "bytesSent":
			out.Values[i] = ec._SystemNetworkStats_bytesSent(ctx, field, obj)
		case "bytesRecv":
			out.Values[i] = ec._SystemNetworkStats_bytesRecv(ctx, field, obj)
		case "packetsSent":
			out.Values[i] = ec._SystemNetworkStats_packetsSent(ctx, field, obj)
		case "packetsRecv":
			out.Values[i] = ec._SystemNetworkStats_packetsRecv(ctx, field, obj)
		case "peakBytesSentPerSec":
			out.Values[i] = ec._SystemNetworkStats_peakBytesSentPerSec(ctx, field, obj)
		case "peakBytesRecvPerSec":
			out.Values[i] = ec._SystemNetworkStats_peakBytesRecvPerSec(ctx, field, obj)
		case "peakPacketsSentPerSec":
			out.Values[i] = ec._SystemNetworkStats_peakPacketsSentPerSec(ctx, field, obj)
		case "peakPacketsRecvPerSec":
			out.Values[i] = ec._SystemNetworkStats_peakPacketsRecvPerSec(ctx, field, obj)
		case "networkMetrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemNetworkStats_networkMetrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var targetMetricsImplementors = []string{"TargetMetrics", "Node"}

func (ec *executionContext) _TargetMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.TargetMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TargetMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "targetsLoaded":
			out.Values[i] = ec._TargetMetrics_targetsLoaded(ctx, field, obj)
		case "targetsConfigured":
			out.Values[i] = ec._TargetMetrics_targetsConfigured(ctx, field, obj)
		case "targetsConfiguredNotIncludingAspects":
			out.Values[i] = ec._TargetMetrics_targetsConfiguredNotIncludingAspects(ctx, field, obj)
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TargetMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var targetProblemImplementors = []string{"TargetProblem", "Node", "Problem"}

func (ec *executionContext) _TargetProblem(ctx context.Context, sel ast.SelectionSet, obj *model.TargetProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetProblemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TargetProblem")
		case "id":
			out.Values[i] = ec._TargetProblem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._TargetProblem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testProblemImplementors = []string{"TestProblem", "Node", "Problem"}

func (ec *executionContext) _TestProblem(ctx context.Context, sel ast.SelectionSet, obj *model.TestProblem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testProblemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestProblem")
		case "id":
			out.Values[i] = ec._TestProblem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._TestProblem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._TestProblem_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "results":
			out.Values[i] = ec._TestProblem_results(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var testResultImplementors = []string{"TestResult", "Node"}

func (ec *executionContext) _TestResult(ctx context.Context, sel ast.SelectionSet, obj *model.TestResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, testResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TestResult")
		case "id":
			out.Values[i] = ec._TestResult_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "run":
			out.Values[i] = ec._TestResult_run(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "shard":
			out.Values[i] = ec._TestResult_shard(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "attempt":
			out.Values[i] = ec._TestResult_attempt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._TestResult_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "actionLogOutput":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestResult_actionLogOutput(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "undeclaredTestOutputs":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TestResult_undeclaredTestOutputs(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var timingMetricsImplementors = []string{"TimingMetrics", "Node"}

func (ec *executionContext) _TimingMetrics(ctx context.Context, sel ast.SelectionSet, obj *ent.TimingMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timingMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimingMetrics")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimingMetrics_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cpuTimeInMs":
			out.Values[i] = ec._TimingMetrics_cpuTimeInMs(ctx, field, obj)
		case "wallTimeInMs":
			out.Values[i] = ec._TimingMetrics_wallTimeInMs(ctx, field, obj)
		case "analysisPhaseTimeInMs":
			out.Values[i] = ec._TimingMetrics_analysisPhaseTimeInMs(ctx, field, obj)
		case "executionPhaseTimeInMs":
			out.Values[i] = ec._TimingMetrics_executionPhaseTimeInMs(ctx, field, obj)
		case "actionsExecutionStartInMs":
			out.Values[i] = ec._TimingMetrics_actionsExecutionStartInMs(ctx, field, obj)
		case "metrics":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimingMetrics_metrics(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Email":
			out.Values[i] = ec._User_Email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "LDAP":
			out.Values[i] = ec._User_LDAP(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNActionCacheStatistics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatistics(ctx context.Context, sel ast.SelectionSet, v *ent.ActionCacheStatistics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActionCacheStatistics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNActionCacheStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInput(ctx context.Context, v interface{}) (*ent.ActionCacheStatisticsWhereInput, error) {
	res, err := ec.unmarshalInputActionCacheStatisticsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActionData2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionData(ctx context.Context, sel ast.SelectionSet, v *ent.ActionData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActionData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNActionDataWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInput(ctx context.Context, v interface{}) (*ent.ActionDataWhereInput, error) {
	res, err := ec.unmarshalInputActionDataWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNActionOutputStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐActionOutputStatus(ctx context.Context, v interface{}) (model.ActionOutputStatus, error) {
	var res model.ActionOutputStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActionOutputStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐActionOutputStatus(ctx context.Context, sel ast.SelectionSet, v model.ActionOutputStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNActionSummary2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummary(ctx context.Context, sel ast.SelectionSet, v *ent.ActionSummary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActionSummary(ctx, sel, v)
}

func (ec *executionContext) unmarshalNActionSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInput(ctx context.Context, v interface{}) (*ent.ActionSummaryWhereInput, error) {
	res, err := ec.unmarshalInputActionSummaryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNArtifactMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.ArtifactMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ArtifactMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNArtifactMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInput(ctx context.Context, v interface{}) (*ent.ArtifactMetricsWhereInput, error) {
	res, err := ec.unmarshalInputArtifactMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBazelCommand2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelCommand(ctx context.Context, sel ast.SelectionSet, v model.BazelCommand) graphql.Marshaler {
	return ec._BazelCommand(ctx, sel, &v)
}

func (ec *executionContext) marshalNBazelCommand2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelCommand(ctx context.Context, sel ast.SelectionSet, v *model.BazelCommand) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BazelCommand(ctx, sel, v)
}

func (ec *executionContext) marshalNBazelInvocation2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx context.Context, sel ast.SelectionSet, v ent.BazelInvocation) graphql.Marshaler {
	return ec._BazelInvocation(ctx, sel, &v)
}

func (ec *executionContext) marshalNBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx context.Context, sel ast.SelectionSet, v *ent.BazelInvocation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BazelInvocation(ctx, sel, v)
}

func (ec *executionContext) marshalNBazelInvocationConnection2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationConnection(ctx context.Context, sel ast.SelectionSet, v ent.BazelInvocationConnection) graphql.Marshaler {
	return ec._BazelInvocationConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNBazelInvocationConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationConnection(ctx context.Context, sel ast.SelectionSet, v *ent.BazelInvocationConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BazelInvocationConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBazelInvocationProblemWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInput(ctx context.Context, v interface{}) (*ent.BazelInvocationProblemWhereInput, error) {
	res, err := ec.unmarshalInputBazelInvocationProblemWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBazelInvocationState2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelInvocationState(ctx context.Context, sel ast.SelectionSet, v model.BazelInvocationState) graphql.Marshaler {
	return ec._BazelInvocationState(ctx, sel, &v)
}

func (ec *executionContext) marshalNBazelInvocationState2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBazelInvocationState(ctx context.Context, sel ast.SelectionSet, v *model.BazelInvocationState) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BazelInvocationState(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBazelInvocationWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInput(ctx context.Context, v interface{}) (*ent.BazelInvocationWhereInput, error) {
	res, err := ec.unmarshalInputBazelInvocationWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBlobArchivingStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx context.Context, v interface{}) (blob.ArchivingStatus, error) {
	var res blob.ArchivingStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBlobArchivingStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx context.Context, sel ast.SelectionSet, v blob.ArchivingStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNBlobReference2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx context.Context, sel ast.SelectionSet, v model.BlobReference) graphql.Marshaler {
	return ec._BlobReference(ctx, sel, &v)
}

func (ec *executionContext) marshalNBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx context.Context, sel ast.SelectionSet, v *model.BlobReference) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BlobReference(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBlobWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInput(ctx context.Context, v interface{}) (*ent.BlobWhereInput, error) {
	res, err := ec.unmarshalInputBlobWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNBuildConnection2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildConnection(ctx context.Context, sel ast.SelectionSet, v ent.BuildConnection) graphql.Marshaler {
	return ec._BuildConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNBuildConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildConnection(ctx context.Context, sel ast.SelectionSet, v *ent.BuildConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BuildConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBuildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInput(ctx context.Context, v interface{}) (*ent.BuildWhereInput, error) {
	res, err := ec.unmarshalInputBuildWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCumulativeMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.CumulativeMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CumulativeMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCumulativeMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInput(ctx context.Context, v interface{}) (*ent.CumulativeMetricsWhereInput, error) {
	res, err := ec.unmarshalInputCumulativeMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v interface{}) (entgql.Cursor[int], error) {
	var res entgql.Cursor[int]
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v entgql.Cursor[int]) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDynamicExecutionMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.DynamicExecutionMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DynamicExecutionMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDynamicExecutionMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsWhereInput(ctx context.Context, v interface{}) (*ent.DynamicExecutionMetricsWhereInput, error) {
	res, err := ec.unmarshalInputDynamicExecutionMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnvVar2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐEnvVarᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.EnvVar) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnvVar2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐEnvVar(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEnvVar2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐEnvVar(ctx context.Context, sel ast.SelectionSet, v *model.EnvVar) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EnvVar(ctx, sel, v)
}

func (ec *executionContext) marshalNEventFile2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEventFile(ctx context.Context, sel ast.SelectionSet, v *ent.EventFile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EventFile(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEventFileWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEventFileWhereInput(ctx context.Context, v interface{}) (*ent.EventFileWhereInput, error) {
	res, err := ec.unmarshalInputEventFileWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFilesMetric2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetric(ctx context.Context, sel ast.SelectionSet, v *ent.FilesMetric) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FilesMetric(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFilesMetricWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricWhereInput(ctx context.Context, v interface{}) (*ent.FilesMetricWhereInput, error) {
	res, err := ec.unmarshalInputFilesMetricWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGarbageMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.GarbageMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GarbageMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGarbageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInput(ctx context.Context, v interface{}) (*ent.GarbageMetricsWhereInput, error) {
	res, err := ec.unmarshalInputGarbageMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int32(ctx context.Context, v interface{}) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	res := graphql.MarshalInt32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMemoryMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.MemoryMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MemoryMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMemoryMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInput(ctx context.Context, v interface{}) (*ent.MemoryMetricsWhereInput, error) {
	res, err := ec.unmarshalInputMemoryMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.Metrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Metrics(ctx, sel, v)
}

func (ec *executionContext) marshalNMetricsConnection2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsConnection(ctx context.Context, sel ast.SelectionSet, v ent.MetricsConnection) graphql.Marshaler {
	return ec._MetricsConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNMetricsConnection2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsConnection(ctx context.Context, sel ast.SelectionSet, v *ent.MetricsConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MetricsConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInput(ctx context.Context, v interface{}) (*ent.MetricsWhereInput, error) {
	res, err := ec.unmarshalInputMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMissDetail2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetail(ctx context.Context, sel ast.SelectionSet, v *ent.MissDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MissDetail(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, v interface{}) (missdetail.Reason, error) {
	var res missdetail.Reason
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, sel ast.SelectionSet, v missdetail.Reason) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMissDetailWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInput(ctx context.Context, v interface{}) (*ent.MissDetailWhereInput, error) {
	res, err := ec.unmarshalInputMissDetailWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNamedFile2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐNamedFileᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.NamedFile) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNamedFile2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐNamedFile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNamedFile2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐNamedFile(ctx context.Context, sel ast.SelectionSet, v *model.NamedFile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NamedFile(ctx, sel, v)
}

func (ec *executionContext) marshalNNetworkMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.NetworkMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NetworkMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNetworkMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInput(ctx context.Context, v interface{}) (*ent.NetworkMetricsWhereInput, error) {
	res, err := ec.unmarshalInputNetworkMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNode2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v []ent.Noder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNoder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNPackageLoadMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.PackageLoadMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PackageLoadMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPackageLoadMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInput(ctx context.Context, v interface{}) (*ent.PackageLoadMetricsWhereInput, error) {
	res, err := ec.unmarshalInputPackageLoadMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPackageMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.PackageMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PackageMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPackageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInput(ctx context.Context, v interface{}) (*ent.PackageMetricsWhereInput, error) {
	res, err := ec.unmarshalInputPackageMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v entgql.PageInfo[int]) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNProblem2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐProblem(ctx context.Context, sel ast.SelectionSet, v model.Problem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Problem(ctx, sel, v)
}

func (ec *executionContext) marshalNProblem2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐProblemᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Problem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProblem2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐProblem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRaceStatistics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatistics(ctx context.Context, sel ast.SelectionSet, v *ent.RaceStatistics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RaceStatistics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRaceStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatisticsWhereInput(ctx context.Context, v interface{}) (*ent.RaceStatisticsWhereInput, error) {
	res, err := ec.unmarshalInputRaceStatisticsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRunnerCount2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCount(ctx context.Context, sel ast.SelectionSet, v *ent.RunnerCount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RunnerCount(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRunnerCountWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInput(ctx context.Context, v interface{}) (*ent.RunnerCountWhereInput, error) {
	res, err := ec.unmarshalInputRunnerCountWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSystemNetworkStats2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStats(ctx context.Context, sel ast.SelectionSet, v *ent.SystemNetworkStats) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemNetworkStats(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemNetworkStatsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInput(ctx context.Context, v interface{}) (*ent.SystemNetworkStatsWhereInput, error) {
	res, err := ec.unmarshalInputSystemNetworkStatsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTargetMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.TargetMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TargetMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTargetMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInput(ctx context.Context, v interface{}) (*ent.TargetMetricsWhereInput, error) {
	res, err := ec.unmarshalInputTargetMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTestResult2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestResultᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TestResult) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTestResult2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTestResult2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐTestResult(ctx context.Context, sel ast.SelectionSet, v *model.TestResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TestResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTimingMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.TimingMetrics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TimingMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTimingMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInput(ctx context.Context, v interface{}) (*ent.TimingMetricsWhereInput, error) {
	res, err := ec.unmarshalInputTimingMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) (uuid.UUID, error) {
	res, err := uuidgql.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	res := uuidgql.MarshalUUID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOActionCacheStatistics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.ActionCacheStatistics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActionCacheStatistics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatistics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOActionCacheStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ActionCacheStatisticsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ActionCacheStatisticsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNActionCacheStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOActionCacheStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionCacheStatisticsWhereInput(ctx context.Context, v interface{}) (*ent.ActionCacheStatisticsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputActionCacheStatisticsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActionData2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.ActionData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActionData2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOActionDataWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ActionDataWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ActionDataWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNActionDataWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOActionDataWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionDataWhereInput(ctx context.Context, v interface{}) (*ent.ActionDataWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputActionDataWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActionSummary2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.ActionSummary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActionSummary2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOActionSummaryWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ActionSummaryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ActionSummaryWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNActionSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOActionSummaryWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐActionSummaryWhereInput(ctx context.Context, v interface{}) (*ent.ActionSummaryWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputActionSummaryWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOArtifactMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.ArtifactMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArtifactMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOArtifactMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.ArtifactMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.ArtifactMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNArtifactMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOArtifactMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐArtifactMetricsWhereInput(ctx context.Context, v interface{}) (*ent.ArtifactMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputArtifactMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBazelInvocation2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.BazelInvocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOBazelInvocation2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocation(ctx context.Context, sel ast.SelectionSet, v *ent.BazelInvocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BazelInvocation(ctx, sel, v)
}

func (ec *executionContext) marshalOBazelInvocationEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.BazelInvocationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBazelInvocationEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBazelInvocationEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationEdge(ctx context.Context, sel ast.SelectionSet, v *ent.BazelInvocationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BazelInvocationEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBazelInvocationProblemWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.BazelInvocationProblemWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.BazelInvocationProblemWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBazelInvocationProblemWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBazelInvocationProblemWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationProblemWhereInput(ctx context.Context, v interface{}) (*ent.BazelInvocationProblemWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBazelInvocationProblemWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBazelInvocationWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.BazelInvocationWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.BazelInvocationWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBazelInvocationWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBazelInvocationWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBazelInvocationWhereInput(ctx context.Context, v interface{}) (*ent.BazelInvocationWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBazelInvocationWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBlobArchivingStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatusᚄ(ctx context.Context, v interface{}) ([]blob.ArchivingStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]blob.ArchivingStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBlobArchivingStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBlobArchivingStatus2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []blob.ArchivingStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBlobArchivingStatus2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBlobArchivingStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx context.Context, v interface{}) (*blob.ArchivingStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(blob.ArchivingStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlobArchivingStatus2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋblobᚐArchivingStatus(ctx context.Context, sel ast.SelectionSet, v *blob.ArchivingStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOBlobReference2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐBlobReference(ctx context.Context, sel ast.SelectionSet, v *model.BlobReference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlobReference(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlobWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.BlobWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.BlobWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBlobWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBlobWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBlobWhereInput(ctx context.Context, v interface{}) (*ent.BlobWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlobWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOBuild2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuild(ctx context.Context, sel ast.SelectionSet, v *ent.Build) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Build(ctx, sel, v)
}

func (ec *executionContext) marshalOBuildEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.BuildEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBuildEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBuildEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildEdge(ctx context.Context, sel ast.SelectionSet, v *ent.BuildEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BuildEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBuildWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.BuildWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.BuildWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBuildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBuildWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐBuildWhereInput(ctx context.Context, v interface{}) (*ent.BuildWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBuildWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCumulativeMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.CumulativeMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCumulativeMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCumulativeMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.CumulativeMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.CumulativeMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCumulativeMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCumulativeMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐCumulativeMetricsWhereInput(ctx context.Context, v interface{}) (*ent.CumulativeMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCumulativeMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v interface{}) (*entgql.Cursor[int], error) {
	if v == nil {
		return nil, nil
	}
	var res = new(entgql.Cursor[int])
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v *entgql.Cursor[int]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODynamicExecutionMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.DynamicExecutionMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDynamicExecutionMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODynamicExecutionMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.DynamicExecutionMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.DynamicExecutionMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDynamicExecutionMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODynamicExecutionMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐDynamicExecutionMetricsWhereInput(ctx context.Context, v interface{}) (*ent.DynamicExecutionMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDynamicExecutionMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEventFileWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEventFileWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.EventFileWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.EventFileWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEventFileWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEventFileWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEventFileWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐEventFileWhereInput(ctx context.Context, v interface{}) (*ent.EventFileWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEventFileWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOExitCode2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐExitCode(ctx context.Context, sel ast.SelectionSet, v *model.ExitCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExitCode(ctx, sel, v)
}

func (ec *executionContext) marshalOFilesMetric2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.FilesMetric) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFilesMetric2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetric(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFilesMetricWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.FilesMetricWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.FilesMetricWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFilesMetricWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFilesMetricWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐFilesMetricWhereInput(ctx context.Context, v interface{}) (*ent.FilesMetricWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFilesMetricWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGarbageMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.GarbageMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGarbageMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGarbageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.GarbageMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.GarbageMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGarbageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOGarbageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐGarbageMetricsWhereInput(ctx context.Context, v interface{}) (*ent.GarbageMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGarbageMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2int32(ctx context.Context, v interface{}) (int32, error) {
	res, err := graphql.UnmarshalInt32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int32(ctx context.Context, sel ast.SelectionSet, v int32) graphql.Marshaler {
	res := graphql.MarshalInt32(v)
	return res
}

func (ec *executionContext) unmarshalOInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚕint32ᚄ(ctx context.Context, v interface{}) ([]int32, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int32, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int32(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕint32ᚄ(ctx context.Context, sel ast.SelectionSet, v []int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int32(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int64(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v interface{}) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) marshalOMemoryMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.MemoryMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMemoryMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOMemoryMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.MemoryMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.MemoryMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMemoryMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMemoryMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMemoryMetricsWhereInput(ctx context.Context, v interface{}) (*ent.MemoryMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMemoryMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.Metrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.Metrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Metrics(ctx, sel, v)
}

func (ec *executionContext) marshalOMetricsEdge2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.MetricsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMetricsEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMetricsEdge2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsEdge(ctx context.Context, sel ast.SelectionSet, v *ent.MetricsEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MetricsEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.MetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.MetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMetricsWhereInput(ctx context.Context, v interface{}) (*ent.MetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMissDetail2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.MissDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMissDetail2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, v interface{}) (missdetail.Reason, error) {
	var res missdetail.Reason
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, sel ast.SelectionSet, v missdetail.Reason) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOMissDetailReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReasonᚄ(ctx context.Context, v interface{}) ([]missdetail.Reason, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]missdetail.Reason, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMissDetailReason2ᚕgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReasonᚄ(ctx context.Context, sel ast.SelectionSet, v []missdetail.Reason) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMissDetailReason2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOMissDetailReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, v interface{}) (*missdetail.Reason, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(missdetail.Reason)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMissDetailReason2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚋmissdetailᚐReason(ctx context.Context, sel ast.SelectionSet, v *missdetail.Reason) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMissDetailWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.MissDetailWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.MissDetailWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMissDetailWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMissDetailWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐMissDetailWhereInput(ctx context.Context, v interface{}) (*ent.MissDetailWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMissDetailWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONetworkMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.NetworkMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNetworkMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalONetworkMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetrics(ctx context.Context, sel ast.SelectionSet, v *ent.NetworkMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NetworkMetrics(ctx, sel, v)
}

func (ec *executionContext) unmarshalONetworkMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.NetworkMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.NetworkMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNetworkMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONetworkMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNetworkMetricsWhereInput(ctx context.Context, v interface{}) (*ent.NetworkMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNetworkMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONode2githubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐNoder(ctx context.Context, sel ast.SelectionSet, v ent.Noder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalOPackageLoadMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.PackageLoadMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPackageLoadMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPackageLoadMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PackageLoadMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PackageLoadMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPackageLoadMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPackageLoadMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageLoadMetricsWhereInput(ctx context.Context, v interface{}) (*ent.PackageLoadMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPackageLoadMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPackageMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.PackageMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPackageMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPackageMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.PackageMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.PackageMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPackageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPackageMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐPackageMetricsWhereInput(ctx context.Context, v interface{}) (*ent.PackageMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPackageMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORaceStatistics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatisticsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.RaceStatistics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRaceStatistics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatistics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalORaceStatisticsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatisticsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.RaceStatisticsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.RaceStatisticsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRaceStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatisticsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORaceStatisticsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRaceStatisticsWhereInput(ctx context.Context, v interface{}) (*ent.RaceStatisticsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRaceStatisticsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORunnerCount2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.RunnerCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRunnerCount2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalORunnerCountWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.RunnerCountWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.RunnerCountWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRunnerCountWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORunnerCountWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐRunnerCountWhereInput(ctx context.Context, v interface{}) (*ent.RunnerCountWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRunnerCountWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSystemNetworkStats2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.SystemNetworkStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemNetworkStats2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStats(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOSystemNetworkStatsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.SystemNetworkStatsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.SystemNetworkStatsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSystemNetworkStatsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSystemNetworkStatsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐSystemNetworkStatsWhereInput(ctx context.Context, v interface{}) (*ent.SystemNetworkStatsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemNetworkStatsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTargetMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.TargetMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTargetMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTargetMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TargetMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TargetMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTargetMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTargetMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTargetMetricsWhereInput(ctx context.Context, v interface{}) (*ent.TargetMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTargetMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTime2timeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTime2ᚕtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTime2timeᚐTime(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOTimingMetrics2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsᚄ(ctx context.Context, sel ast.SelectionSet, v []*ent.TimingMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTimingMetrics2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTimingMetricsWhereInput2ᚕᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInputᚄ(ctx context.Context, v interface{}) ([]*ent.TimingMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ent.TimingMetricsWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimingMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTimingMetricsWhereInput2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋentᚋgenᚋentᚐTimingMetricsWhereInput(ctx context.Context, v interface{}) (*ent.TimingMetricsWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimingMetricsWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, v interface{}) ([]uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]uuid.UUID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, sel ast.SelectionSet, v []uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) (*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := uuidgql.UnmarshalUUID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := uuidgql.MarshalUUID(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋbuildbarnᚋbbᚑportalᚋinternalᚋgraphqlᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
